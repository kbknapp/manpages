
{
NAME
ffmpeg codecs   FFmpeg codecs
DESCRIPTION

This document describes the codecs (decoders and encoders) provided by
the libavcodec library.
CODEC OPTIONS

libavcodec provides some generic global options, which can be set on
all the encoders and decoders. In addition each codec may support
so called private options, which are specific for a given codec.

Sometimes, a global option may only affect a specific kind of codec,
and may be nonsensical or ignored by another, so you need to be aware
of the meaning of the specified options. Also some options are
meant only for decoding or encoding.

Options may be set by specifying  option value in the
FFmpeg tools, or by setting the value explicitly in the
AVCodecContext(fR options or using the libavutil/opt.h API
for programmatic use.

The list of supported options follow:
b integer (encoding,audio,video) 4

Set bitrate in bits/s. Default value is 200K.
ab integer (encoding,audio) 4

Set audio bitrate (in bits/s). Default value is 128K.
bt integer (encoding,video) 4

Set video bitrate tolerance (in bits/s). In 1 pass mode, bitrate
tolerance specifies how far ratecontrol is willing to deviate from the
target average bitrate value. This is not related to min/max
bitrate. Lowering tolerance too much has an adverse effect on quality.
flags flags (decoding/encoding,audio,video,subtitles) 4

Set generic flags.

Possible values:

mv4 4

Use four motion vector by macroblock (mpeg4).
qpel 4

Use 1/4 pel motion compensation.
loop 4

Use loop filter.
qscale 4

Use fixed qscale.
pass1 4

Use internal 2pass ratecontrol in first pass mode.
pass2 4

Use internal 2pass ratecontrol in second pass mode.
gray 4

Only decode/encode grayscale.
emu_edge 4

Do not draw edges.
psnr 4

Set error[?] variables during encoding.
truncated 4
ildct 4
Use interlaced DCT.
low_delay 4

Force low delay.
global_header 4

Place global headers in extradata instead of every keyframe.
bitexact 4

Only write platform , build  and time independent data. (except (I)DCT).
This ensures that file and data checksums are reproducible and match between
platforms. Its primary use is for regression testing.
aic 4

Apply H263 advanced intra coding / mpeg4 ac prediction.
cbp 4

Deprecated, use mpegvideo private options instead.
qprd 4

Deprecated, use mpegvideo private options instead.
ilme 4

Apply interlaced motion estimation.
cgop 4

Use closed gop.
me_method integer (encoding,video) 4

Set motion estimation method.

Possible values:

zero 4

zero motion estimation (fastest)
full 4

full motion estimation (slowest)
epzs 4

EPZS motion estimation (default)
esa 4

esa motion estimation (alias for full)
tesa 4

tesa motion estimation
dia 4

dia motion estimation (alias for epzs)
log 4

log motion estimation
phods 4

phods motion estimation
x1 4

X1 motion estimation
hex 4

hex motion estimation
umh 4

umh motion estimation
iter 4

iter motion estimation
extradata_size integer 4

Set extradata size.
time_base rational number 4

Set codec time base.

It is the fundamental unit of time (in seconds) in terms of which
frame timestamps are represented. For fixed fps content, timebase
should be 1 / frame_rate(fR and timestamp increments should be
identically 1.
g integer (encoding,video) 4

Set the group of picture (GOP) size. Default value is 12.
ar integer (decoding/encoding,audio) 4

Set audio sampling rate (in Hz).
ac integer (decoding/encoding,audio) 4

Set number of audio channels.
cutoff integer (encoding,audio) 4

Set cutoff bandwidth. (Supported only by selected encoders, see
their respective documentation sections.)
frame_size integer (encoding,audio) 4

Set audio frame size.

Each submitted frame except the last must contain exactly frame_size
samples per channel. May be 0 when the codec has
CODEC_CAP_VARIABLE_FRAME_SIZE set, in that case the frame size is not
restricted. It is set by some decoders to indicate constant frame
size.
frame_number integer 4

Set the frame number.
delay integer 4
qcomp float (encoding,video) 4
Set video quantizer scale compression (VBR). It is used as a constant
in the ratecontrol equation. Recommended range for default rc_eq:
0.0 1.0.
qblur float (encoding,video) 4

Set video quantizer scale blur (VBR).
qmin integer (encoding,video) 4

Set min video quantizer scale (VBR). Must be included between  1 and
69, default value is 2.
qmax integer (encoding,video) 4

Set max video quantizer scale (VBR). Must be included between  1 and
1024, default value is 31.
qdiff integer (encoding,video) 4

Set max difference between the quantizer scale (VBR).
bf integer (encoding,video) 4

Set max number of B frames between non B frames.

Must be an integer between  1 and 16. 0 means that B frames are
disabled. If a value of  1 is used, it will choose an automatic value
depending on the encoder.

Default value is 0.
b_qfactor float (encoding,video) 4

Set qp factor between P and B frames.
rc_strategy integer (encoding,video) 4

Set ratecontrol method.
b_strategy integer (encoding,video) 4

Set strategy to choose between I/P/B frames.
ps integer (encoding,video) 4

Set RTP payload size in bytes.
mv_bits integer 4
header_bits integer 4

i_tex_bits integer 4

p_tex_bits integer 4

i_count integer 4

p_count integer 4

skip_count integer 4

misc_bits integer 4

frame_bits integer 4

codec_tag integer 4

bug flags (decoding,video) 4
Workaround not auto detected encoder bugs.

Possible values:

autodetect 4
old_msmpeg4 4
some old lavc generated msmpeg4v3 files (no autodetection)
xvid_ilace 4

Xvid interlacing bug (autodetected if fourcc==XVIX)
ump4 4

(autodetected if fourcc==UMP4)
no_padding 4

padding bug (autodetected)
amv 4
ac_vlc 4
illegal vlc bug (autodetected per fourcc)
qpel_chroma 4
std_qpel 4
old standard qpel (autodetected per fourcc/version)
qpel_chroma2 4
direct_blocksize 4
direct qpel blocksize bug (autodetected per fourcc/version)
edge 4

edge padding bug (autodetected per fourcc/version)
hpel_chroma 4
dc_clip 4

ms 4
Workaround various bugs in microsoft broken decoders.
trunc 4

trancated frames
lelim integer (encoding,video) 4

Set single coefficient elimination threshold for luminance (negative
values also consider DC coefficient).
celim integer (encoding,video) 4

Set single coefficient elimination threshold for chrominance (negative
values also consider dc coefficient)
strict integer (decoding/encoding,audio,video) 4

Specify how strictly to follow the standards.

Possible values:

very 4

strictly conform to an older more strict version of the spec or reference software
strict 4

strictly conform to all the things in the spec no matter what consequences
normal 4
unofficial 4
allow unofficial extensions
experimental 4

allow non standardized experimental things, experimental
(unfinished/work in progress/not well tested) decoders and encoders.
Note: experimental decoders can pose a security risk, do not use this for
decoding untrusted input.
b_qoffset float (encoding,video) 4

Set QP offset between P and B frames.
err_detect flags (decoding,audio,video) 4

Set error detection flags.

Possible values:

crccheck 4

verify embedded CRCs
bitstream 4

detect bitstream specification deviations
buffer 4

detect improper bitstream length
explode 4

abort decoding on minor error detection
ignore_err 4

ignore decoding errors, and continue decoding.
This is useful if you want to analyze the content of a video and thus want
everything to be decoded no matter what. This option will not result in a video
that is pleasing to watch in case of errors.
careful 4

consider things that violate the spec and have not been seen in the wild as errors
compliant 4

consider all spec non compliancies as errors
aggressive 4

consider things that a sane encoder should not do as an error
has_b_frames integer 4
block_align integer 4

mpeg_quant integer (encoding,video) 4
Use MPEG quantizers instead of H.263.
qsquish float (encoding,video) 4

How to keep quantizer between qmin and qmax (0 = clip, 1 = use
differentiable function).
rc_qmod_amp float (encoding,video) 4

Set experimental quantizer modulation.
rc_qmod_freq integer (encoding,video) 4

Set experimental quantizer modulation.
rc_override_count integer 4
rc_eq string (encoding,video) 4
Set rate control equation. When computing the expression, besides the
standard functions defined in the section 'Expression Evaluation', the
following functions are available: bits2qp(bits), qp2bits(qp). Also
the following constants are available: iTex pTex tex mv fCode iCount
mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex
avgTex.
maxrate integer (encoding,audio,video) 4

Set max bitrate tolerance (in bits/s). Requires bufsize to be set.
minrate integer (encoding,audio,video) 4

Set min bitrate tolerance (in bits/s). Most useful in setting up a CBR
encode. It is of little use elsewise.
bufsize integer (encoding,audio,video) 4

Set ratecontrol buffer size (in bits).
rc_buf_aggressivity float (encoding,video) 4

Currently useless.
i_qfactor float (encoding,video) 4

Set QP factor between P and I frames.
i_qoffset float (encoding,video) 4

Set QP offset between P and I frames.
rc_init_cplx float (encoding,video) 4

Set initial complexity for 1 pass encoding.
dct integer (encoding,video) 4

Set DCT algorithm.

Possible values:

auto 4

autoselect a good one (default)
fastint 4

fast integer
int 4

accurate integer
mmx 4
altivec 4

faan 4
floating point AAN DCT
lumi_mask float (encoding,video) 4

Compress bright areas stronger than medium ones.
tcplx_mask float (encoding,video) 4

Set temporal complexity masking.
scplx_mask float (encoding,video) 4

Set spatial complexity masking.
p_mask float (encoding,video) 4

Set inter masking.
dark_mask float (encoding,video) 4

Compress dark areas stronger than medium ones.
idct integer (decoding/encoding,video) 4

Select IDCT implementation.

Possible values:

auto 4
int 4

simple 4

simplemmx 4

simpleauto 4
Automatically pick a IDCT compatible with the simple one
arm 4
altivec 4

sh4 4

simplearm 4

simplearmv5te 4

simplearmv6 4

simpleneon 4

simplealpha 4

ipp 4

xvidmmx 4

faani 4
floating point AAN IDCT
slice_count integer 4
ec flags (decoding,video) 4
Set error concealment strategy.

Possible values:

guess_mvs 4

iterative motion vector (MV) search (slow)
deblock 4

use strong deblock filter for damaged MBs
favor_inter 4

favor predicting from the previous frame instead of the current
bits_per_coded_sample integer 4
pred integer (encoding,video) 4
Set prediction method.

Possible values:

left 4
plane 4

median 4
aspect rational number (encoding,video) 4
Set sample aspect ratio.
sar rational number (encoding,video) 4

Set sample aspect ratio. Alias to aspect.
debug flags (decoding/encoding,audio,video,subtitles) 4

Print specific debug info.

Possible values:

pict 4

picture info
rc 4

rate control
bitstream 4
mb_type 4
macroblock (MB) type
qp 4

per block quantization parameter (QP)
dct_coeff 4
green_metadata 4
display complexity metadata for the upcoming frame, GoP or for a given duration.
skip 4
startcode 4

er 4
error recognition
mmco 4

memory management control operations (H.264)
bugs 4
buffers 4
picture buffer allocations
thread_ops 4

threading operations
nomc 4

skip motion compensation
cmp integer (encoding,video) 4

Set full pel me compare function.

Possible values:

sad 4

sum of absolute differences, fast (default)
sse 4

sum of squared errors
satd 4

sum of absolute Hadamard transformed differences
dct 4

sum of absolute DCT transformed differences
psnr 4

sum of squared quantization errors (avoid, low quality)
bit 4

number of bits needed for the block
rd 4

rate distortion optimal, slow
zero 4

0
vsad 4

sum of absolute vertical differences
vsse 4

sum of squared vertical differences
nsse 4

noise preserving sum of squared differences
w53 4

5/3 wavelet, only used in snow
w97 4

9/7 wavelet, only used in snow
dctmax 4
chroma 4
subcmp integer (encoding,video) 4
Set sub pel me compare function.

Possible values:

sad 4

sum of absolute differences, fast (default)
sse 4

sum of squared errors
satd 4

sum of absolute Hadamard transformed differences
dct 4

sum of absolute DCT transformed differences
psnr 4

sum of squared quantization errors (avoid, low quality)
bit 4

number of bits needed for the block
rd 4

rate distortion optimal, slow
zero 4

0
vsad 4

sum of absolute vertical differences
vsse 4

sum of squared vertical differences
nsse 4

noise preserving sum of squared differences
w53 4

5/3 wavelet, only used in snow
w97 4

9/7 wavelet, only used in snow
dctmax 4
chroma 4
mbcmp integer (encoding,video) 4
Set macroblock compare function.

Possible values:

sad 4

sum of absolute differences, fast (default)
sse 4

sum of squared errors
satd 4

sum of absolute Hadamard transformed differences
dct 4

sum of absolute DCT transformed differences
psnr 4

sum of squared quantization errors (avoid, low quality)
bit 4

number of bits needed for the block
rd 4

rate distortion optimal, slow
zero 4

0
vsad 4

sum of absolute vertical differences
vsse 4

sum of squared vertical differences
nsse 4

noise preserving sum of squared differences
w53 4

5/3 wavelet, only used in snow
w97 4

9/7 wavelet, only used in snow
dctmax 4
chroma 4
ildctcmp integer (encoding,video) 4
Set interlaced dct compare function.

Possible values:

sad 4

sum of absolute differences, fast (default)
sse 4

sum of squared errors
satd 4

sum of absolute Hadamard transformed differences
dct 4

sum of absolute DCT transformed differences
psnr 4

sum of squared quantization errors (avoid, low quality)
bit 4

number of bits needed for the block
rd 4

rate distortion optimal, slow
zero 4

0
vsad 4

sum of absolute vertical differences
vsse 4

sum of squared vertical differences
nsse 4

noise preserving sum of squared differences
w53 4

5/3 wavelet, only used in snow
w97 4

9/7 wavelet, only used in snow
dctmax 4
chroma 4
dia_size integer (encoding,video) 4
Set diamond type & size for motion estimation.
last_pred integer (encoding,video) 4

Set amount of motion predictors from the previous frame.
preme integer (encoding,video) 4

Set pre motion estimation.
precmp integer (encoding,video) 4

Set pre motion estimation compare function.

Possible values:

sad 4

sum of absolute differences, fast (default)
sse 4

sum of squared errors
satd 4

sum of absolute Hadamard transformed differences
dct 4

sum of absolute DCT transformed differences
psnr 4

sum of squared quantization errors (avoid, low quality)
bit 4

number of bits needed for the block
rd 4

rate distortion optimal, slow
zero 4

0
vsad 4

sum of absolute vertical differences
vsse 4

sum of squared vertical differences
nsse 4

noise preserving sum of squared differences
w53 4

5/3 wavelet, only used in snow
w97 4

9/7 wavelet, only used in snow
dctmax 4
chroma 4
pre_dia_size integer (encoding,video) 4
Set diamond type & size for motion estimation pre pass.
subq integer (encoding,video) 4

Set sub pel motion estimation quality.
dtg_active_format integer 4
me_range integer (encoding,video) 4
Set limit motion vectors range (1023 for DivX player).
ibias integer (encoding,video) 4

Set intra quant bias.
pbias integer (encoding,video) 4

Set inter quant bias.
color_table_id integer 4
global_quality integer (encoding,audio,video) 4

coder integer (encoding,video) 4
Possible values:

vlc 4

variable length coder / huffman coder
ac 4

arithmetic coder
raw 4

raw (no encoding)
rle 4

run length coder
deflate 4

deflate based coder
context integer (encoding,video) 4

Set context model.
slice_flags integer 4
mbd integer (encoding,video) 4
Set macroblock decision algorithm (high quality mode).

Possible values:

simple 4

use mbcmp (default)
bits 4

use fewest bits
rd 4

use best rate distortion
stream_codec_tag integer 4
sc_threshold integer (encoding,video) 4
Set scene change threshold.
lmin integer (encoding,video) 4

Set min lagrange factor (VBR).
lmax integer (encoding,video) 4

Set max lagrange factor (VBR).
nr integer (encoding,video) 4

Set noise reduction.
rc_init_occupancy integer (encoding,video) 4

Set number of bits which should be loaded into the rc buffer before
decoding starts.
flags2 flags (decoding/encoding,audio,video) 4

Possible values:

fast 4

Allow non spec compliant speedup tricks.
sgop 4

Deprecated, use mpegvideo private options instead.
noout 4

Skip bitstream encoding.
ignorecrop 4

Ignore cropping information from sps.
local_header 4

Place global headers at every keyframe instead of in extradata.
chunks 4

Frame data might be split into multiple chunks.
showall 4

Show all frames before the first keyframe.
skiprd 4

Deprecated, use mpegvideo private options instead.
export_mvs 4

Export motion vectors into frame side data (see AV_FRAME_DATA_MOTION_VECTORS(fR)
for codecs that support it. See also doc/examples/export_mvs.c.
error integer (encoding,video) 4
qns integer (encoding,video) 4
Deprecated, use mpegvideo private options instead.
threads integer (decoding/encoding,video) 4

Set the number of threads to be used, in case the selected codec
implementation supports multi threading.

Possible values:

auto, 0 4

automatically select the number of threads to set
Default value is auto.

me_threshold integer (encoding,video) 4

Set motion estimation threshold.
mb_threshold integer (encoding,video) 4

Set macroblock threshold.
dc integer (encoding,video) 4

Set intra_dc_precision.
nssew integer (encoding,video) 4

Set nsse weight.
skip_top integer (decoding,video) 4

Set number of macroblock rows at the top which are skipped.
skip_bottom integer (decoding,video) 4

Set number of macroblock rows at the bottom which are skipped.
profile integer (encoding,audio,video) 4

Possible values:

unknown 4
aac_main 4

aac_low 4

aac_ssr 4

aac_ltp 4

aac_he 4

aac_he_v2 4

aac_ld 4

aac_eld 4

mpeg2_aac_low 4

mpeg2_aac_he 4

mpeg4_sp 4

mpeg4_core 4

mpeg4_main 4

mpeg4_asp 4

dts 4

dts_es 4

dts_96_24 4

dts_hd_hra 4

dts_hd_ma 4
level integer (encoding,audio,video) 4
Possible values:

unknown 4
lowres integer (decoding,audio,video) 4
Decode at 1= 1/2, 2=1/4, 3=1/8 resolutions.
skip_threshold integer (encoding,video) 4

Set frame skip threshold.
skip_factor integer (encoding,video) 4

Set frame skip factor.
skip_exp integer (encoding,video) 4

Set frame skip exponent.
Negative values behave identical to the corresponding positive ones, except
that the score is normalized.
Positive values exist primarily for compatibility reasons and are not so useful.
skipcmp integer (encoding,video) 4

Set frame skip compare function.

Possible values:

sad 4

sum of absolute differences, fast (default)
sse 4

sum of squared errors
satd 4

sum of absolute Hadamard transformed differences
dct 4

sum of absolute DCT transformed differences
psnr 4

sum of squared quantization errors (avoid, low quality)
bit 4

number of bits needed for the block
rd 4

rate distortion optimal, slow
zero 4

0
vsad 4

sum of absolute vertical differences
vsse 4

sum of squared vertical differences
nsse 4

noise preserving sum of squared differences
w53 4

5/3 wavelet, only used in snow
w97 4

9/7 wavelet, only used in snow
dctmax 4
chroma 4
border_mask float (encoding,video) 4
Increase the quantizer for macroblocks close to borders.
mblmin integer (encoding,video) 4

Set min macroblock lagrange factor (VBR).
mblmax integer (encoding,video) 4

Set max macroblock lagrange factor (VBR).
mepc integer (encoding,video) 4

Set motion estimation bitrate penalty compensation (1.0 = 256).
skip_loop_filter integer (decoding,video) 4
skip_idct        integer (decoding,video) 4

skip_frame       integer (decoding,video) 4
Make decoder discard processing depending on the frame type selected
by the option value.

skip_loop_filter skips frame loop filtering, skip_idct
skips frame IDCT/dequantization, skip_frame skips decoding.

Possible values:

none 4

Discard no frame.
default 4

Discard useless frames like 0 sized frames.
noref 4

Discard all non reference frames.
bidir 4

Discard all bidirectional frames.
nokey 4

Discard all frames excepts keyframes.
all 4

Discard all frames.
Default value is default.

bidir_refine integer (encoding,video) 4

Refine the two motion vectors used in bidirectional macroblocks.
brd_scale integer (encoding,video) 4

Downscale frames for dynamic B frame decision.
keyint_min integer (encoding,video) 4

Set minimum interval between IDR frames.
refs integer (encoding,video) 4

Set reference frames to consider for motion compensation.
chromaoffset integer (encoding,video) 4

Set chroma qp offset from luma.
trellis integer (encoding,audio,video) 4

Set rate distortion optimal quantization.
mv0_threshold integer (encoding,video) 4
b_sensitivity integer (encoding,video) 4
Adjust sensitivity of b_frame_strategy 1.
compression_level integer (encoding,audio,video) 4
min_prediction_order integer (encoding,audio) 4

max_prediction_order integer (encoding,audio) 4

timecode_frame_start integer (encoding,video) 4
Set GOP timecode frame start number, in non drop frame format.
request_channels integer (decoding,audio) 4

Set desired number of audio channels.
bits_per_raw_sample integer 4
channel_layout integer (decoding/encoding,audio) 4
Possible values:
request_channel_layout integer (decoding,audio) 4

Possible values:
rc_max_vbv_use float (encoding,video) 4
rc_min_vbv_use float (encoding,video) 4

ticks_per_frame integer (decoding/encoding,audio,video) 4

color_primaries integer (decoding/encoding,video) 4
Possible values:

bt709 4

BT.709
bt470m 4

BT.470 M
bt470bg 4

BT.470 BG
smpte170m 4

SMPTE 170 M
smpte240m 4

SMPTE 240 M
film 4

Film
bt2020 4

BT.2020
smpte428 4
smpte428_1 4
SMPTE ST 428 1
smpte431 4

SMPTE 431 2
smpte432 4

SMPTE 432 1
jedec p22 4

JEDEC P22
color_trc integer (decoding/encoding,video) 4

Possible values:

bt709 4

BT.709
gamma22 4

BT.470 M
gamma28 4

BT.470 BG
smpte170m 4

SMPTE 170 M
smpte240m 4

SMPTE 240 M
linear 4

Linear
log 4
log100 4
Log
log_sqrt 4
log316 4
Log square root
iec61966_2_4 4
iec61966 2 4 4
IEC 61966 2 4
bt1361 4
bt1361e 4
BT.1361
iec61966_2_1 4
iec61966 2 1 4
IEC 61966 2 1
bt2020_10 4
bt2020_10bit 4
BT.2020   10 bit
bt2020_12 4
bt2020_12bit 4
BT.2020   12 bit
smpte2084 4

SMPTE ST 2084
smpte428 4
smpte428_1 4
SMPTE ST 428 1
arib std b67 4

ARIB STD B67
colorspace integer (decoding/encoding,video) 4

Possible values:

rgb 4

RGB
bt709 4

BT.709
fcc 4

FCC
bt470bg 4

BT.470 BG
smpte170m 4

SMPTE 170 M
smpte240m 4

SMPTE 240 M
ycocg 4

YCOCG
bt2020nc 4
bt2020_ncl 4
BT.2020 NCL
bt2020c 4
bt2020_cl 4
BT.2020 CL
smpte2085 4

SMPTE 2085
color_range integer (decoding/encoding,video) 4

If used as input parameter, it serves as a hint to the decoder, which
color_range the input has.
Possible values:

tv 4
mpeg 4
MPEG (219W2^(n 8))
pc 4
jpeg 4
JPEG (2^n 1)
chroma_sample_location integer (decoding/encoding,video) 4

Possible values:

left 4
center 4

topleft 4

top 4

bottomleft 4

bottom 4
log_level_offset integer 4
Set the log level offset.
slices integer (encoding,video) 4

Number of slices, used in parallelized encoding.
thread_type flags (decoding/encoding,video) 4

Select which multithreading methods to use.

Use of frame will increase decoding delay by one frame per
thread, so clients which cannot provide future frames should not use
it.

Possible values:

slice 4

Decode more than one part of a single frame at once.

Multithreading using slices works only when the video was encoded with
slices.
frame 4

Decode more than one frame at once.
Default value is slice+frame.

audio_service_type integer (encoding,audio) 4

Set audio service type.

Possible values:

ma 4

Main Audio Service
ef 4

Effects
vi 4

Visually Impaired
hi 4

Hearing Impaired
di 4

Dialogue
co 4

Commentary
em 4

Emergency
vo 4

Voice Over
ka 4

Karaoke
request_sample_fmt sample_fmt (decoding,audio) 4

Set sample format audio decoders should prefer. Default value is
none(fR.
pkt_timebase rational number 4
sub_charenc encoding (decoding,subtitles) 4
Set the input subtitles character encoding.
field_order  field_order (video) 4

Set/override the field order of the video.
Possible values:

progressive 4

Progressive video
tt 4

Interlaced video, top field coded and displayed first
bb 4

Interlaced video, bottom field coded and displayed first
tb 4

Interlaced video, top coded first, bottom displayed first
bt 4

Interlaced video, bottom coded first, top displayed first
skip_alpha bool (decoding,video) 4

Set to 1 to disable processing alpha (transparency). This works like the
gray flag in the flags option which skips chroma information
instead of alpha. Default is 0.
codec_whitelist list (input) 4

, separated list of allowed decoders. By default all are allowed.
dump_separator string (input) 4

Separator used to separate the fields printed on the command line about the
Stream parameters.
For example to separate the fields with newlines and indention:
        ffprobe  dump_separator "
                                  "   i ~/videos/matrixbench_mpeg2.mpg

max_pixels integer (decoding/encoding,video) 4

Maximum number of pixels per image. This value can be used to avoid out of
memory failures due to large images.
apply_cropping bool (decoding,video) 4

Enable cropping if cropping parameters are multiples of the required
alignment for the left and top parameters. If the alignment is not met the
cropping will be partially applied to maintain alignment.
Default is 1 (enabled).
Note: The required alignment depends on if AV_CODEC_FLAG_UNALIGNED(fR is set and the
CPU. AV_CODEC_FLAG_UNALIGNED(fR cannot be changed from the command line. Also hardware
decoders will not apply left/top Cropping.
DECODERS

Decoders are configured elements in FFmpeg which allow the decoding of
multimedia streams.

When you configure your FFmpeg build, all the supported native decoders
are enabled by default. Decoders requiring an external library must be enabled
manually via the corresponding (  enable lib(fR option. You can list all
available decoders using the configure option (  list decoders(fR.

You can disable all the decoders with the configure option
(  disable decoders(fR and selectively enable / disable single decoders
with the options (  enable decoder=DECODER(fR /
(  disable decoder=DECODER(fR.

The option ( decoders(fR of the ffW tools will display the list of
enabled decoders.
VIDEO DECODERS

A description of some of the currently available video decoders
follows.
rawvideo

Raw video decoder.

This decoder decodes rawvideo streams.

Options

top top_field_first 4

Specify the assumed field type of the input video.

 1 4

the video is assumed to be progressive (default)
0 4

bottom field first is assumed
1 4

top field first is assumed
libdavs2

AVS2 P2/IEEE1857.4 video decoder wrapper.

This decoder allows libavcodec to decode AVS2 streams with davs2 library.
AUDIO DECODERS

A description of some of the currently available audio decoders
follows.
ac3

AC 3 audio decoder.

This decoder implements part of ATSC A/52:2010 and ETSI TS 102 366, as well as
the undocumented RealAudio 3 (a.k.a. dnet).

AC 3 Decoder Options

 drc_scale value 4

Dynamic Range Scale Factor. The factor to apply to dynamic range values
from the AC 3 stream. This factor is applied exponentially.
There are 3 notable scale factor ranges:

drc_scale == 0 4

DRC disabled. Produces full range audio.
0 < drc_scale <= 1 4

DRC enabled.  Applies a fraction of the stream DRC value.
Audio reproduction is between full range and full compression.
drc_scale > 1 4

DRC enabled. Applies drc_scale asymmetrically.
Loud sounds are fully compressed.  Soft sounds are enhanced.
flac

FLAC audio decoder.

This decoder aims to implement the complete FLAC specification from Xiph.

FLAC Decoder options

 use_buggy_lpc 4

The lavc FLAC encoder used to produce buggy streams with high lpc values
(like the default value). This option makes it possible to decode such streams
correctly by using lavc's old buggy lpc logic for decoding.
ffwavesynth

Internal wave synthesizer.

This decoder generates wave patterns according to predefined sequences. Its
use is purely internal and the format of the data it accepts is not publicly
documented.
libcelt

libcelt decoder wrapper.

libcelt allows libavcodec to decode the Xiph CELT ultra low delay audio codec.
Requires the presence of the libcelt headers and library during configuration.
You need to explicitly configure the build with (  enable libcelt(fR.
libgsm

libgsm decoder wrapper.

libgsm allows libavcodec to decode the GSM full rate audio codec. Requires
the presence of the libgsm headers and library during configuration. You need
to explicitly configure the build with (  enable libgsm(fR.

This decoder supports both the ordinary GSM and the Microsoft variant.
libilbc

libilbc decoder wrapper.

libilbc allows libavcodec to decode the Internet Low Bitrate Codec (iLBC)
audio codec. Requires the presence of the libilbc headers and library during
configuration. You need to explicitly configure the build with
(  enable libilbc(fR.

Options
The following option is supported by the libilbc wrapper.
enhance 4

Enable the enhancement of the decoded audio when set to 1. The default
value is 0 (disabled).
libopencore amrnb

libopencore amrnb decoder wrapper.

libopencore amrnb allows libavcodec to decode the Adaptive Multi Rate
Narrowband audio codec. Using it requires the presence of the
libopencore amrnb headers and library during configuration. You need to
explicitly configure the build with (  enable libopencore amrnb(fR.

An FFmpeg native decoder for AMR NB exists, so users can decode AMR NB
without this library.
libopencore amrwb

libopencore amrwb decoder wrapper.

libopencore amrwb allows libavcodec to decode the Adaptive Multi Rate
Wideband audio codec. Using it requires the presence of the
libopencore amrwb headers and library during configuration. You need to
explicitly configure the build with (  enable libopencore amrwb(fR.

An FFmpeg native decoder for AMR WB exists, so users can decode AMR WB
without this library.
libopus

libopus decoder wrapper.

libopus allows libavcodec to decode the Opus Interactive Audio Codec.
Requires the presence of the libopus headers and library during
configuration. You need to explicitly configure the build with
(  enable libopus(fR.

An FFmpeg native decoder for Opus exists, so users can decode Opus
without this library.
SUBTITLES DECODERS

dvbsub

Options

compute_clut 4
 1 4
Compute clut if no matching CLUT is in the stream.
0 4

Never compute CLUT
1 4

Always compute CLUT and override the one provided in the stream.
dvb_substream 4

Selects the dvb substream, or all substreams if  1 which is default.
dvdsub

This codec decodes the bitmap subtitles used in DVDs; the same subtitles can
also be found in VobSub file pairs and in some Matroska files.

Options

palette 4

Specify the global palette used by the bitmaps. When stored in VobSub, the
palette is normally specified in the index file; in Matroska, the palette is
stored in the codec extra data in the same format as in VobSub. In DVDs, the
palette is stored in the IFO file, and therefore not available when reading
from dumped VOB files.

The format for this option is a string containing 16 24 bits hexadecimal
numbers (without 0x prefix) separated by comas, for example 0d00ee,
ee450d, 101010, eaeaea, 0ce60b, ec14ed, ebff0b, 0d617a, 7b7b7b, d1d1d1,
7b2a0e, 0d950c, 0f007b, cf0dec, cfa80c, 7c127b(fR.
ifo_palette 4

Specify the IFO file from which the global palette is obtained.
(experimental)
forced_subs_only 4

Only decode subtitle entries marked as forced. Some titles have forced
and non forced subtitles in the same track. Setting this flag to 1
will only keep the forced subtitles. Default value is 0.
libzvbi teletext

Libzvbi allows libavcodec to decode DVB teletext pages and DVB teletext
subtitles. Requires the presence of the libzvbi headers and library during
configuration. You need to explicitly configure the build with
(  enable libzvbi(fR.

Options

txt_page 4

List of teletext page numbers to decode. Pages that do not match the specified
list are dropped. You may use the special W(fR string to match all pages,
or subtitle(fR to match all subtitle pages.
Default value is W.
txt_chop_top 4

Discards the top teletext line. Default value is 1.
txt_format 4

Specifies the format of the decoded subtitles.

bitmap 4

The default format, you should use this for teletext pages, because certain
graphics and colors cannot be expressed in simple text or even ASS.
text 4

Simple text based output without formatting.
ass 4

Formatted ASS output, subtitle pages and teletext pages are returned in
different styles, subtitle pages are stripped down to text, but an effort is
made to keep the text alignment and the formatting.
txt_left 4

X offset of generated bitmaps, default is 0.
txt_top 4

Y offset of generated bitmaps, default is 0.
txt_chop_spaces 4

Chops leading and trailing spaces and removes empty lines from the generated
text. This option is useful for teletext based subtitles where empty spaces may
be present at the start or at the end of the lines or empty lines may be
present between the subtitle lines because of double sized teletext characters.
Default value is 1.
txt_duration 4

Sets the display duration of the decoded teletext pages or subtitles in
milliseconds. Default value is  1 which means infinity or until the next
subtitle event comes.
txt_transparent 4

Force transparent background of the generated teletext bitmaps. Default value
is 0 which means an opaque background.
txt_opacity 4

Sets the opacity (0 255) of the teletext background. If
txt_transparent is not set, it only affects characters between a start
box and an end box, typically subtitles. Default value is 0 if
txt_transparent is set, 255 otherwise.
ENCODERS

Encoders are configured elements in FFmpeg which allow the encoding of
multimedia streams.

When you configure your FFmpeg build, all the supported native encoders
are enabled by default. Encoders requiring an external library must be enabled
manually via the corresponding (  enable lib(fR option. You can list all
available encoders using the configure option (  list encoders(fR.

You can disable all the encoders with the configure option
(  disable encoders(fR and selectively enable / disable single encoders
with the options (  enable encoder=ENCODER(fR /
(  disable encoder=ENCODER(fR.

The option ( encoders(fR of the ffW tools will display the list of
enabled encoders.
AUDIO ENCODERS

A description of some of the currently available audio encoders
follows.
aac

Advanced Audio Coding (AAC) encoder.

This encoder is the default AAC encoder, natively implemented into FFmpeg. Its
quality is on par or better than libfdk_aac at the default bitrate of 128kbps.
This encoder also implements more options, profiles and samplerates than
other encoders (with only the AAC HE profile pending to be implemented) so this
encoder has become the default and is the recommended choice.

Options

b 4

Set bit rate in bits/s. Setting this automatically activates constant bit rate
(CBR) mode. If this option is unspecified it is set to 128kbps.
q 4

Set quality for variable bit rate (VBR) mode. This option is valid only using
the ffmpeg command line tool. For library interface users, use
global_quality.
cutoff 4

Set cutoff frequency. If unspecified will allow the encoder to dynamically
adjust the cutoff to improve clarity on low bitrates.
aac_coder 4

Set AAC encoder coding method. Possible values:

twoloop 4

Two loop searching (TLS) method.

This method first sets quantizers depending on band thresholds and then tries
to find an optimal combination by adding or subtracting a specific value from
all quantizers and adjusting some individual quantizer a little.  Will tune
itself based on whether aac_is, aac_ms and aac_pns
are enabled.
anmr 4

Average noise to mask ratio (ANMR) trellis based solution.

This is an experimental coder which currently produces a lower quality, is more
unstable and is slower than the default twoloop coder but has potential.
Currently has no support for the aac_is or aac_pns options.
Not currently recommended.
fast 4

Constant quantizer method.

Uses a cheaper version of twoloop algorithm that doesn't try to do as many
clever adjustments. Worse with low bitrates (less than 64kbps), but is better
and much faster at higher bitrates.
This is the default choice for a coder
aac_ms 4

Sets mid/side coding mode. The default value of auto will automatically use
M/S with bands which will benefit from such coding. Can be forced for all bands
using the value enable, which is mainly useful for debugging or disabled using
disable.
aac_is 4

Sets intensity stereo coding tool usage. By default, it's enabled and will
automatically toggle IS for similar pairs of stereo bands if it's beneficial.
Can be disabled for debugging by setting the value to disable.
aac_pns 4

Uses perceptual noise substitution to replace low entropy high frequency bands
with imperceptible white noise during the decoding process. By default, it's
enabled, but can be disabled for debugging purposes by using disable.
aac_tns 4

Enables the use of a multitap FIR filter which spans through the high frequency
bands to hide quantization noise during the encoding process and is reverted
by the decoder. As well as decreasing unpleasant artifacts in the high range
this also reduces the entropy in the high bands and allows for more bits to
be used by the mid low bands. By default it's enabled but can be disabled for
debugging by setting the option to disable.
aac_ltp 4

Enables the use of the long term prediction extension which increases coding
efficiency in very low bandwidth situations such as encoding of voice or
solo piano music by extending constant harmonic peaks in bands throughout
frames. This option is implied by profile:a aac_low and is incompatible with
aac_pred. Use in conjunction with  ar to decrease the samplerate.
aac_pred 4

Enables the use of a more traditional style of prediction where the spectral
coefficients transmitted are replaced by the difference of the current
coefficients minus the previous predicted coefficients. In theory and sometimes
in practice this can improve quality for low to mid bitrate audio.
This option implies the aac_main profile and is incompatible with aac_ltp.
profile 4

Sets the encoding profile, possible values:

aac_low 4

The default, AAC Low complexity profile. Is the most compatible and produces
decent quality.
mpeg2_aac_low 4

Equivalent to ( profile:a aac_low  aac_pns 0(fR. PNS was introduced with the
MPEG4 specifications.
aac_ltp 4

Long term prediction profile, is enabled by and will enable the aac_ltp
option. Introduced in MPEG4.
aac_main 4

Main type prediction profile, is enabled by and will enable the aac_pred
option. Introduced in MPEG2.
If this option is unspecified it is set to aac_low.

ac3 and ac3_fixed

AC 3 audio encoders.

These encoders implement part of ATSC A/52:2010 and ETSI TS 102 366, as well as
the undocumented RealAudio 3 (a.k.a. dnet).

The ac3 encoder uses floating point math, while the ac3_fixed
encoder only uses fixed point integer math. This does not mean that one is
always faster, just that one or the other may be better suited to a
particular system. The floating point encoder will generally produce better
quality audio for a given bitrate. The ac3_fixed encoder is not the
default codec for any of the output formats, so it must be specified explicitly
using the option ( acodec ac3_fixed(fR in order to use it.

AC 3 Metadata
The AC 3 metadata options are used to set parameters that describe the audio,
but in most cases do not affect the audio encoding itself. Some of the options
do directly affect or influence the decoding and playback of the resulting
bitstream, while others are just for informational purposes. A few of the
options will add bits to the output stream that could otherwise be used for
audio data, and will thus affect the quality of the output. Those will be
indicated accordingly with a note in the option list below.

These parameters are described in detail in several publicly available
documents.
W<<http://www.atsc.org/cms/standards/a_52 2010.pdf>> 4
W<<http://www.atsc.org/cms/standards/a_54a_with_corr_1.pdf>> 4

W<<http://www.dolby.com/uploadedFiles/zz _Shared_Assets/English_PDFs/Professional/18_Metadata.Guide.pdf>> 4

W<<http://www.dolby.com/uploadedFiles/zz _Shared_Assets/English_PDFs/Professional/46_DDEncodingGuidelines.pdf>> 4
Metadata Control Options

 per_frame_metadata boolean 4

Allow Per Frame Metadata. Specifies if the encoder should check for changing
metadata for each frame.

0 4

The metadata values set at initialization will be used for every frame in the
stream. (default)
1 4

Metadata values can be changed before encoding each frame.
Downmix Levels

 center_mixlev level 4

Center Mix Level. The amount of gain the decoder should apply to the center
channel when downmixing to stereo. This field will only be written to the
bitstream if a center channel is present. The value is specified as a scale
factor. There are 3 valid values:

0.707 4

Apply  3dB gain
0.595 4

Apply  4.5dB gain (default)
0.500 4

Apply  6dB gain
 surround_mixlev level 4

Surround Mix Level. The amount of gain the decoder should apply to the surround
channel(s) when downmixing to stereo. This field will only be written to the
bitstream if one or more surround channels are present. The value is specified
as a scale factor.  There are 3 valid values:

0.707 4

Apply  3dB gain
0.500 4

Apply  6dB gain (default)
0.000 4

Silence Surround Channel(s)
Audio Production Information
Audio Production Information is optional information describing the mixing
environment.  Either none or both of the fields are written to the bitstream.
 mixing_level number 4

Mixing Level. Specifies peak sound pressure level (SPL) in the production
environment when the mix was mastered. Valid values are 80 to 111, or  1 for
unknown or not indicated. The default value is  1, but that value cannot be
used if the Audio Production Information is written to the bitstream. Therefore,
if the room_type(fR option is not the default value, the mixing_level(fR
option must not be  1.
 room_type type 4

Room Type. Describes the equalization used during the final mixing session at
the studio or on the dubbing stage. A large room is a dubbing stage with the
industry standard X curve equalization; a small room has flat equalization.
This field will not be written to the bitstream if both the mixing_level(fR
option and the room_type(fR option have the default values.

0 4
notindicated 4
Not Indicated (default)
1 4
large 4
Large Room
2 4
small 4
Small Room
Other Metadata Options

 copyright boolean 4

Copyright Indicator. Specifies whether a copyright exists for this audio.

0 4
off 4
No Copyright Exists (default)
1 4
on 4
Copyright Exists
 dialnorm value 4

Dialogue Normalization. Indicates how far the average dialogue level of the
program is below digital 100% full scale (0 dBFS). This parameter determines a
level shift during audio reproduction that sets the average volume of the
dialogue to a preset level. The goal is to match volume level between program
sources. A value of  31dB will result in no volume level change, relative to
the source volume, during audio reproduction. Valid values are whole numbers in
the range  31 to  1, with  31 being the default.
 dsur_mode mode 4

Dolby Surround Mode. Specifies whether the stereo signal uses Dolby Surround
(Pro Logic). This field will only be written to the bitstream if the audio
stream is stereo. Using this option does NOT mean the encoder will actually
apply Dolby Surround processing.

0 4
notindicated 4
Not Indicated (default)
1 4
off 4
Not Dolby Surround Encoded
2 4
on 4
Dolby Surround Encoded
 original boolean 4

Original Bit Stream Indicator. Specifies whether this audio is from the
original source and not a copy.

0 4
off 4
Not Original Source
1 4
on 4
Original Source (default)
Extended Bitstream Information
The extended bitstream options are part of the Alternate Bit Stream Syntax as
specified in Annex D of the A/52:2010 standard. It is grouped into 2 parts.
If any one parameter in a group is specified, all values in that group will be
written to the bitstream.  Default values are used for those that are written
but have not been specified.  If the mixing levels are written, the decoder
will use these values instead of the ones specified in the center_mixlev(fR
and surround_mixlev(fR options if it supports the Alternate Bit Stream
Syntax.

Extended Bitstream Information   Part 1

 dmix_mode mode 4

Preferred Stereo Downmix Mode. Allows the user to select either Lt/Rt
(Dolby Surround) or Lo/Ro (normal stereo) as the preferred stereo downmix mode.

0 4
notindicated 4
Not Indicated (default)
1 4
ltrt 4
Lt/Rt Downmix Preferred
2 4
loro 4
Lo/Ro Downmix Preferred
 ltrt_cmixlev level 4

Lt/Rt Center Mix Level. The amount of gain the decoder should apply to the
center channel when downmixing to stereo in Lt/Rt mode.

1.414 4

Apply +3dB gain
1.189 4

Apply +1.5dB gain
1.000 4

Apply 0dB gain
0.841 4

Apply  1.5dB gain
0.707 4

Apply  3.0dB gain
0.595 4

Apply  4.5dB gain (default)
0.500 4

Apply  6.0dB gain
0.000 4

Silence Center Channel
 ltrt_surmixlev level 4

Lt/Rt Surround Mix Level. The amount of gain the decoder should apply to the
surround channel(s) when downmixing to stereo in Lt/Rt mode.

0.841 4

Apply  1.5dB gain
0.707 4

Apply  3.0dB gain
0.595 4

Apply  4.5dB gain
0.500 4

Apply  6.0dB gain (default)
0.000 4

Silence Surround Channel(s)
 loro_cmixlev level 4

Lo/Ro Center Mix Level. The amount of gain the decoder should apply to the
center channel when downmixing to stereo in Lo/Ro mode.

1.414 4

Apply +3dB gain
1.189 4

Apply +1.5dB gain
1.000 4

Apply 0dB gain
0.841 4

Apply  1.5dB gain
0.707 4

Apply  3.0dB gain
0.595 4

Apply  4.5dB gain (default)
0.500 4

Apply  6.0dB gain
0.000 4

Silence Center Channel
 loro_surmixlev level 4

Lo/Ro Surround Mix Level. The amount of gain the decoder should apply to the
surround channel(s) when downmixing to stereo in Lo/Ro mode.

0.841 4

Apply  1.5dB gain
0.707 4

Apply  3.0dB gain
0.595 4

Apply  4.5dB gain
0.500 4

Apply  6.0dB gain (default)
0.000 4

Silence Surround Channel(s)
Extended Bitstream Information   Part 2

 dsurex_mode mode 4

Dolby Surround EX Mode. Indicates whether the stream uses Dolby Surround EX
(7.1 matrixed to 5.1). Using this option does NOT mean the encoder will actually
apply Dolby Surround EX processing.

0 4
notindicated 4
Not Indicated (default)
1 4
on 4
Dolby Surround EX Off
2 4
off 4
Dolby Surround EX On
 dheadphone_mode mode 4

Dolby Headphone Mode. Indicates whether the stream uses Dolby Headphone
encoding (multi channel matrixed to 2.0 for use with headphones). Using this
option does NOT mean the encoder will actually apply Dolby Headphone
processing.

0 4
notindicated 4
Not Indicated (default)
1 4
on 4
Dolby Headphone Off
2 4
off 4
Dolby Headphone On
 ad_conv_type type 4

A/D Converter Type. Indicates whether the audio has passed through HDCD A/D
conversion.

0 4
standard 4
Standard A/D Converter (default)
1 4
hdcd 4
HDCD A/D Converter
Other AC 3 Encoding Options

 stereo_rematrixing boolean 4

Stereo Rematrixing. Enables/Disables use of rematrixing for stereo input. This
is an optional AC 3 feature that increases quality by selectively encoding
the left/right channels as mid/side. This option is enabled by default, and it
is highly recommended that it be left as enabled except for testing purposes.
cutoff frequency 4

Set lowpass cutoff frequency. If unspecified, the encoder selects a default
determined by various other encoding parameters.

Floating Point Only AC 3 Encoding Options
These options are only valid for the floating point encoder and do not exist
for the fixed point encoder due to the corresponding features not being
implemented in fixed point.
 channel_coupling boolean 4

Enables/Disables use of channel coupling, which is an optional AC 3 feature
that increases quality by combining high frequency information from multiple
channels into a single channel. The per channel high frequency information is
sent with less accuracy in both the frequency and time domains. This allows
more bits to be used for lower frequencies while preserving enough information
to reconstruct the high frequencies. This option is enabled by default for the
floating point encoder and should generally be left as enabled except for
testing purposes or to increase encoding speed.

 1 4
auto 4
Selected by Encoder (default)
0 4
off 4
Disable Channel Coupling
1 4
on 4
Enable Channel Coupling
 cpl_start_band number 4

Coupling Start Band. Sets the channel coupling start band, from 1 to 15. If a
value higher than the bandwidth is used, it will be reduced to 1 less than the
coupling end band. If auto is used, the start band will be determined by
the encoder based on the bit rate, sample rate, and channel layout. This option
has no effect if channel coupling is disabled.

 1 4
auto 4
Selected by Encoder (default)
flac

FLAC (Free Lossless Audio Codec) Encoder

Options
The following options are supported by FFmpeg's flac encoder.
compression_level 4

Sets the compression level, which chooses defaults for many other options
if they are not set explicitly. Valid values are from 0 to 12, 5 is the
default.
frame_size 4

Sets the size of the frames in samples per channel.
lpc_coeff_precision 4

Sets the LPC coefficient precision, valid values are from 1 to 15, 15 is the
default.
lpc_type 4

Sets the first stage LPC algorithm

none 4

LPC is not used
fixed 4

fixed LPC coefficients
levinson 4
cholesky 4
lpc_passes 4
Number of passes to use for Cholesky factorization during LPC analysis
min_partition_order 4

The minimum partition order
max_partition_order 4

The maximum partition order
prediction_order_method 4
estimation 4

2level 4

4level 4

8level 4

search 4
Bruteforce search
log 4
ch_mode 4
Channel mode

auto 4

The mode is chosen automatically for each frame
indep 4

Channels are independently coded
left_side 4
right_side 4

mid_side 4
exact_rice_parameters 4
Chooses if rice parameters are calculated exactly or approximately.
if set to 1 then they are chosen exactly, which slows the code down slightly and
improves compression slightly.
multi_dim_quant 4

Multi Dimensional Quantization. If set to 1 then a 2nd stage LPC algorithm is
applied after the first stage to finetune the coefficients. This is quite slow
and slightly improves compression.
opus

Opus encoder.

This is a native FFmpeg encoder for the Opus format. Currently its in development and
only implements the CELT part of the codec. Its quality is usually worse and at best
is equal to the libopus encoder.

Options

b 4

Set bit rate in bits/s. If unspecified it uses the number of channels and the layout
to make a good guess.
opus_delay 4

Sets the maximum delay in milliseconds. Lower delays than 20ms will very quickly
decrease quality.
libfdk_aac

libfdk aac AAC (Advanced Audio Coding) encoder wrapper.

The libfdk aac library is based on the Fraunhofer FDK AAC code from
the Android project.

Requires the presence of the libfdk aac headers and library during
configuration. You need to explicitly configure the build with
(  enable libfdk aac(fR. The library is also incompatible with GPL,
so if you allow the use of GPL, you should configure with
(  enable gpl   enable nonfree   enable libfdk aac(fR.

This encoder is considered to produce output on par or worse at 128kbps to the
the native FFmpeg AAC encoder but can often produce better
sounding audio at identical or lower bitrates and has support for the
AAC HE profiles.

VBR encoding, enabled through the vbr or flags
+qscale options, is experimental and only works with some
combinations of parameters.

Support for encoding 7.1 audio is only available with libfdk aac 0.1.3 or
higher.

For more information see the fdk aac project at
<http://sourceforge.net/p/opencore amr/fdk aac/>.

Options
The following options are mapped on the shared FFmpeg codec options.
b 4

Set bit rate in bits/s. If the bitrate is not explicitly specified, it
is automatically set to a suitable value depending on the selected
profile.

In case VBR mode is enabled the option is ignored.
ar 4

Set audio sampling rate (in Hz).
channels 4

Set the number of audio channels.
flags +qscale 4

Enable fixed quality, VBR (Variable Bit Rate) mode.
Note that VBR is implicitly enabled when the vbr value is
positive.
cutoff 4

Set cutoff frequency. If not specified (or explicitly set to 0) it
will use a value automatically computed by the library. Default value
is 0.
profile 4

Set audio profile.

The following profiles are recognized:

aac_low 4

Low Complexity AAC (LC)
aac_he 4

High Efficiency AAC (HE AAC)
aac_he_v2 4

High Efficiency AAC version 2 (HE AACv2)
aac_ld 4

Low Delay AAC (LD)
aac_eld 4

Enhanced Low Delay AAC (ELD)
If not specified it is set to aac_low.
The following are private options of the libfdk_aac encoder.
afterburner 4

Enable afterburner feature if set to 1, disabled if set to 0. This
improves the quality but also the required processing power.

Default value is 1.
eld_sbr 4

Enable SBR (Spectral Band Replication) for ELD if set to 1, disabled
if set to 0.

Default value is 0.
signaling 4

Set SBR/PS signaling style.

It can assume one of the following values:

default 4

choose signaling implicitly (explicit hierarchical by default,
implicit if global header is disabled)
implicit 4

implicit backwards compatible signaling
explicit_sbr 4

explicit SBR, implicit PS signaling
explicit_hierarchical 4

explicit hierarchical signaling
Default value is default.

latm 4

Output LATM/LOAS encapsulated data if set to 1, disabled if set to 0.

Default value is 0.
header_period 4

Set StreamMuxConfig and PCE repetition period (in frames) for sending
in band configuration buffers within LATM/LOAS transport layer.

Must be a 16 bits non negative integer.

Default value is 0.
vbr 4

Set VBR mode, from 1 to 5. 1 is lowest quality (though still pretty
good) and 5 is highest quality. A value of 0 will disable VBR, and CBR
(Constant Bit Rate) is enabled.

Currently only the aac_low profile supports VBR encoding.

VBR modes 1 5 correspond to roughly the following average bit rates:

1 4

32 kbps/channel
2 4

40 kbps/channel
3 4

48 56 kbps/channel
4 4

64 kbps/channel
5 4

about 80 96 kbps/channel
Default value is 0.
Examples

o 4
Use ffmpeg to convert an audio file to VBR AAC in an M4A (MP4)
container:
        ffmpeg  i input.wav  codec:a libfdk_aac  vbr 3 output.m4a

o 4
Use ffmpeg to convert an audio file to CBR 64k kbps AAC, using the
High Efficiency AAC profile:
        ffmpeg  i input.wav  c:a libfdk_aac  profile:a aac_he  b:a 64k output.m4a

libmp3lame

LAME (Lame Ain't an MP3 Encoder) MP3 encoder wrapper.

Requires the presence of the libmp3lame headers and library during
configuration. You need to explicitly configure the build with
(  enable libmp3lame(fR.

See libshine for a fixed point MP3 encoder, although with a
lower quality.

Options
The following options are supported by the libmp3lame wrapper. The
lame equivalent of the options are listed in parentheses.
b ( b) 4

Set bitrate expressed in bits/s for CBR or ABR. LAME bitrate(fR is
expressed in kilobits/s.
q ( V) 4

Set constant quality setting for VBR. This option is valid only
using the ffmpeg command line tool. For library interface
users, use global_quality.
compression_level ( q) 4

Set algorithm quality. Valid arguments are integers in the 0 9 range,
with 0 meaning highest quality but slowest, and 9 meaning fastest
while producing the worst quality.
cutoff (  lowpass) 4

Set lowpass cutoff frequency. If unspecified, the encoder dynamically
adjusts the cutoff.
reservoir 4

Enable use of bit reservoir when set to 1. Default value is 1. LAME
has this enabled by default, but can be overridden by use
  nores option.
joint_stereo ( m j) 4

Enable the encoder to use (on a frame by frame basis) either L/R
stereo or mid/side stereo. Default value is 1.
abr (  abr) 4

Enable the encoder to use ABR when set to 1. The lame
  abr sets the target bitrate, while this options only
tells FFmpeg to use ABR still relies on b to set bitrate.
libopencore amrnb

OpenCORE Adaptive Multi Rate Narrowband encoder.

Requires the presence of the libopencore amrnb headers and library during
configuration. You need to explicitly configure the build with
(  enable libopencore amrnb   enable version3(fR.

This is a mono only encoder. Officially it only supports 8000Hz sample rate,
but you can override it by setting strict to unofficial or
lower.

Options

b 4

Set bitrate in bits per second. Only the following bitrates are supported,
otherwise libavcodec will round to the nearest valid bitrate.

4750 4
5150 4

5900 4

6700 4

7400 4

7950 4

10200 4

12200 4
dtx 4
Allow discontinuous transmission (generate comfort noise) when set to 1. The
default value is 0 (disabled).
libopus

libopus Opus Interactive Audio Codec encoder wrapper.

Requires the presence of the libopus headers and library during
configuration. You need to explicitly configure the build with
(  enable libopus(fR.

Option Mapping
Most libopus options are modelled after the opusenc utility from
opus tools. The following is an option mapping chart describing options
supported by the libopus wrapper, and their opusenc equivalent
in parentheses.
b (bitrate) 4

Set the bit rate in bits/s.  FFmpeg's b option is
expressed in bits/s, while opusenc's bitrate in
kilobits/s.
vbr (vbr, hard cbr, and cvbr) 4

Set VBR mode. The FFmpeg vbr option has the following
valid arguments, with the opusenc equivalent options
in parentheses:

off (hard cbr) 4

Use constant bit rate encoding.
on (vbr) 4

Use variable bit rate encoding (the default).
constrained (cvbr) 4

Use constrained variable bit rate encoding.
compression_level (comp) 4

Set encoding algorithm complexity. Valid options are integers in
the 0 10 range. 0 gives the fastest encodes but lower quality, while 10
gives the highest quality but slowest encoding. The default is 10.
frame_duration (framesize) 4

Set maximum frame size, or duration of a frame in milliseconds. The
argument must be exactly the following: 2.5, 5, 10, 20, 40, 60. Smaller
frame sizes achieve lower latency but less quality at a given bitrate.
Sizes greater than 20ms are only interesting at fairly low bitrates.
The default is 20ms.
packet_loss (expect loss) 4

Set expected packet loss percentage. The default is 0.
application (N.A.) 4

Set intended application type. Valid options are listed below:

voip 4

Favor improved speech intelligibility.
audio 4

Favor faithfulness to the input (the default).
lowdelay 4

Restrict to only the lowest delay modes.
cutoff (N.A.) 4

Set cutoff bandwidth in Hz. The argument must be exactly one of the
following: 4000, 6000, 8000, 12000, or 20000, corresponding to
narrowband, mediumband, wideband, super wideband, and fullband
respectively. The default is 0 (cutoff disabled).
mapping_family (mapping_family) 4

Set channel mapping family to be used by the encoder. The default value of  1
uses mapping family 0 for mono and stereo inputs, and mapping family 1
otherwise. The default also disables the surround masking and LFE bandwidth
optimzations in libopus, and requires that the input contains 8 channels or
fewer.

Other values include 0 for mono and stereo, 1 for surround sound with masking
and LFE bandwidth optimizations, and 255 for independent streams with an
unspecified channel layout.
apply_phase_inv (N.A.) (requires libopus >= 1.2) 4

If set to 0, disables the use of phase inversion for intensity stereo,
improving the quality of mono downmixes, but slightly reducing normal stereo
quality. The default is 1 (phase inversion enabled).
libshine

Shine Fixed Point MP3 encoder wrapper.

Shine is a fixed point MP3 encoder. It has a far better performance on
platforms without an FPU, e.g. armel CPUs, and some phones and tablets.
However, as it is more targeted on performance than quality, it is not on par
with LAME and other production grade encoders quality wise. Also, according to
the project's homepage, this encoder may not be free of bugs as the code was
written a long time ago and the project was dead for at least 5 years.

This encoder only supports stereo and mono input. This is also CBR only.

The original project (last updated in early 2007) is at
<http://sourceforge.net/projects/libshine fxp/>. We only support the
updated fork by the Savonet/Liquidsoap project at <https://github.com/savonet/shine>.

Requires the presence of the libshine headers and library during
configuration. You need to explicitly configure the build with
(  enable libshine(fR.

See also libmp3lame.

Options
The following options are supported by the libshine wrapper. The
shineenc equivalent of the options are listed in parentheses.
b ( b) 4

Set bitrate expressed in bits/s for CBR. shineenc  b option
is expressed in kilobits/s.
libtwolame

TwoLAME MP2 encoder wrapper.

Requires the presence of the libtwolame headers and library during
configuration. You need to explicitly configure the build with
(  enable libtwolame(fR.

Options
The following options are supported by the libtwolame wrapper. The
twolame equivalent options follow the FFmpeg ones and are in
parentheses.
b ( b) 4

Set bitrate expressed in bits/s for CBR. twolame b
option is expressed in kilobits/s. Default value is 128k.
q ( V) 4

Set quality for experimental VBR support. Maximum value range is
from  50 to 50, useful range is from  10 to 10. The higher the
value, the better the quality. This option is valid only using the
ffmpeg command line tool. For library interface users,
use global_quality.
mode (  mode) 4

Set the mode of the resulting audio. Possible values:

auto 4

Choose mode automatically based on the input. This is the default.
stereo 4

Stereo
joint_stereo 4

Joint stereo
dual_channel 4

Dual channel
mono 4

Mono
psymodel (  psyc mode) 4

Set psychoacoustic model to use in encoding. The argument must be
an integer between  1 and 4, inclusive. The higher the value, the
better the quality. The default value is 3.
energy_levels (  energy) 4

Enable energy levels extensions when set to 1. The default value is
0 (disabled).
error_protection (  protect) 4

Enable CRC error protection when set to 1. The default value is 0
(disabled).
copyright (  copyright) 4

Set MPEG audio copyright flag when set to 1. The default value is 0
(disabled).
original (  original) 4

Set MPEG audio original flag when set to 1. The default value is 0
(disabled).
libvo amrwbenc

VisualOn Adaptive Multi Rate Wideband encoder.

Requires the presence of the libvo amrwbenc headers and library during
configuration. You need to explicitly configure the build with
(  enable libvo amrwbenc   enable version3(fR.

This is a mono only encoder. Officially it only supports 16000Hz sample
rate, but you can override it by setting strict to
unofficial or lower.

Options

b 4

Set bitrate in bits/s. Only the following bitrates are supported, otherwise
libavcodec will round to the nearest valid bitrate.

6600 4
8850 4

12650 4

14250 4

15850 4

18250 4

19850 4

23050 4

23850 4
dtx 4
Allow discontinuous transmission (generate comfort noise) when set to 1. The
default value is 0 (disabled).
libvorbis

libvorbis encoder wrapper.

Requires the presence of the libvorbisenc headers and library during
configuration. You need to explicitly configure the build with
(  enable libvorbis(fR.

Options
The following options are supported by the libvorbis wrapper. The
oggenc equivalent of the options are listed in parentheses.

To get a more accurate and extensive documentation of the libvorbis
options, consult the libvorbisenc's and oggenc's documentations.
See <http://xiph.org/vorbis/>,
<http://wiki.xiph.org/Vorbis tools>, and oggenc(1).
b ( b) 4

Set bitrate expressed in bits/s for ABR. oggenc  b is
expressed in kilobits/s.
q ( q) 4

Set constant quality setting for VBR. The value should be a float
number in the range of  1.0 to 10.0. The higher the value, the better
the quality. The default value is 3.0.

This option is valid only using the ffmpeg command line tool.
For library interface users, use global_quality.
cutoff (  advanced encode option lowpass_frequency=N) 4

Set cutoff bandwidth in Hz, a value of 0 disables cutoff. oggenc's
related option is expressed in kHz. The default value is 0 (cutoff
disabled).
minrate ( m) 4

Set minimum bitrate expressed in bits/s. oggenc  m is
expressed in kilobits/s.
maxrate ( M) 4

Set maximum bitrate expressed in bits/s. oggenc  M is
expressed in kilobits/s. This only has effect on ABR mode.
iblock (  advanced encode option impulse_noisetune=N) 4

Set noise floor bias for impulse blocks. The value is a float number from
 15.0 to 0.0. A negative bias instructs the encoder to pay special attention
to the crispness of transients in the encoded audio. The tradeoff for better
transient response is a higher bitrate.
libwavpack

A wrapper providing WavPack encoding through libwavpack.

Only lossless mode using 32 bit integer samples is supported currently.

Requires the presence of the libwavpack headers and library during
configuration. You need to explicitly configure the build with
(  enable libwavpack(fR.

Note that a libavcodec native encoder for the WavPack codec exists so users can
encode audios with this codec without using this encoder. See wavpackenc.

Options
wavpack command line utility's corresponding options are listed in
parentheses, if any.
frame_size (  blocksize) 4

Default is 32768.
compression_level 4

Set speed vs. compression tradeoff. Acceptable arguments are listed below:

0 ( f) 4

Fast mode.
1 4

Normal (default) settings.
2 ( h) 4

High quality.
3 ( hh) 4

Very high quality.
4 8 ( hh  xEXTRAPROC) 4

Same as 3, but with extra processing enabled.

4 is the same as  x2 and 8 is the same as  x6.
mjpeg

Motion JPEG encoder.

Options

huffman 4

Set the huffman encoding strategy. Possible values:

default 4

Use the default huffman tables. This is the default strategy.
optimal 4

Compute and use optimal huffman tables.
wavpack

WavPack lossless audio encoder.

This is a libavcodec native WavPack encoder. There is also an encoder based on
libwavpack, but there is virtually no reason to use that encoder.

See also libwavpack.

Options
The equivalent options for wavpack command line utility are listed in
parentheses.

Shared options
The following shared options are effective for this encoder. Only special notes
about this particular encoder will be documented here. For the general meaning
of the options, see the Codec Options chapter.
frame_size (  blocksize) 4

For this encoder, the range for this option is between 128 and 131072. Default
is automatically decided based on sample rate and number of channel.

For the complete formula of calculating default, see
libavcodec/wavpackenc.c.
compression_level ( f,  h,  hh, and  x) 4

This option's syntax is consistent with libwavpack's.

Private options

joint_stereo ( j) 4

Set whether to enable joint stereo. Valid values are:

on (1) 4

Force mid/side audio encoding.
off (0) 4

Force left/right audio encoding.
auto 4

Let the encoder decide automatically.
optimize_mono 4

Set whether to enable optimization for mono. This option is only effective for
non mono streams. Available values:

on 4

enabled
off 4

disabled
VIDEO ENCODERS

A description of some of the currently available video encoders
follows.
Hap

Vidvox Hap video encoder.

Options

format integer 4

Specifies the Hap format to encode.

hap 4
hap_alpha 4

hap_q 4
Default value is hap.

chunks integer 4

Specifies the number of chunks to split frames into, between 1 and 64. This
permits multithreaded decoding of large frames, potentially at the cost of
data rate. The encoder may modify this value to divide frames evenly.

Default value is 1.
compressor integer 4

Specifies the second stage compressor to use. If set to none,
chunks will be limited to 1, as chunked uncompressed frames offer no
benefit.

none 4
snappy 4
Default value is snappy.

jpeg2000

The native jpeg 2000 encoder is lossy by default, the ( q:v(fR
option can be used to set the encoding quality. Lossless encoding
can be selected with ( pred 1(fR.

Options

format 4

Can be set to either j2k(fR or jp2(fR (the default) that
makes it possible to store non rgb pix_fmts.
libkvazaar

Kvazaar H.265/HEVC encoder.

Requires the presence of the libkvazaar headers and library during
configuration. You need to explicitly configure the build with
  enable libkvazaar.

Options

b 4

Set target video bitrate in bit/s and enable rate control.
kvazaar params 4

Set kvazaar parameters as a list of name=value pairs separated
by commas (,). See kvazaar documentation for a list of options.
libopenh264

Cisco libopenh264 H.264/MPEG 4 AVC encoder wrapper.

This encoder requires the presence of the libopenh264 headers and
library during configuration. You need to explicitly configure the
build with (  enable libopenh264(fR. The library is detected using
pkg config.

For more information about the library see
<http://www.openh264.org>.

Options
The following FFmpeg global options affect the configurations of the
libopenh264 encoder.
b 4

Set the bitrate (as a number of bits per second).
g 4

Set the GOP size.
maxrate 4

Set the max bitrate (as a number of bits per second).
flags +global_header 4

Set global header in the bitstream.
slices 4

Set the number of slices, used in parallelized encoding. Default value
is 0. This is only used when slice_mode is set to
fixed.
slice_mode 4

Set slice mode. Can assume one of the following possible values:

fixed 4

a fixed number of slices
rowmb 4

one slice per row of macroblocks
auto 4

automatic number of slices according to number of threads
dyn 4

dynamic slicing
Default value is auto.

loopfilter 4

Enable loop filter, if set to 1 (automatically enabled). To disable
set a value of 0.
profile 4

Set profile restrictions. If set to the value of main enable
CABAC (set the SEncParamExt.iEntropyCodingModeFlag(fR flag to 1).
max_nal_size 4

Set maximum NAL size in bytes.
allow_skip_frames 4

Allow skipping frames to hit the target bitrate if set to 1.
libtheora

libtheora Theora encoder wrapper.

Requires the presence of the libtheora headers and library during
configuration. You need to explicitly configure the build with
(  enable libtheora(fR.

For more information about the libtheora project see
<http://www.theora.org/>.

Options
The following global options are mapped to internal libtheora options
which affect the quality and the bitrate of the encoded stream.
b 4

Set the video bitrate in bit/s for CBR (Constant Bit Rate) mode.  In
case VBR (Variable Bit Rate) mode is enabled this option is ignored.
flags 4

Used to enable constant quality mode (VBR) encoding through the
qscale flag, and to enable the pass1(fR and pass2(fR
modes.
g 4

Set the GOP size.
global_quality 4

Set the global quality as an integer in lambda units.

Only relevant when VBR mode is enabled with flags +qscale(fR. The
value is converted to QP units by dividing it by FF_QP2LAMBDA(fR,
clipped in the [0   10] range, and then multiplied by 6.3 to get a
value in the native libtheora range [0 63]. A higher value corresponds
to a higher quality.
q 4

Enable VBR mode when set to a non negative value, and set constant
quality value as a double floating point value in QP units.

The value is clipped in the [0 10] range, and then multiplied by 6.3
to get a value in the native libtheora range [0 63].

This option is valid only using the ffmpeg command line
tool. For library interface users, use global_quality.

Examples

o 4
Set maximum constant quality (VBR) encoding with ffmpeg:
        ffmpeg  i INPUT  codec:v libtheora  q:v 10 OUTPUT.ogg

o 4
Use ffmpeg to convert a CBR 1000 kbps Theora video stream:
        ffmpeg  i INPUT  codec:v libtheora  b:v 1000k OUTPUT.ogg

libvpx

VP8/VP9 format supported through libvpx.

Requires the presence of the libvpx headers and library during configuration.
You need to explicitly configure the build with (  enable libvpx(fR.

Options
The following options are supported by the libvpx wrapper. The
vpxenc equivalent options or values are listed in parentheses
for easy migration.

To reduce the duplication of documentation, only the private options
and some others requiring special attention are documented here. For
the documentation of the undocumented generic options, see
the Codec Options chapter.

To get more documentation of the libvpx options, invoke the command
ffmpeg  h encoder=libvpx, ffmpeg  h encoder=libvpx vp9 or
vpxenc   help. Further information is available in the libvpx API
documentation.
b (target bitrate) 4

Set bitrate in bits/s. Note that FFmpeg's b option is
expressed in bits/s, while vpxenc's target bitrate is in
kilobits/s.
g (kf max dist) 4
keyint_min (kf min dist) 4

qmin (min q) 4

qmax (max q) 4

bufsize (buf sz, buf optimal sz) 4
Set ratecontrol buffer size (in bits). Note vpxenc's options are
specified in milliseconds, the libvpx wrapper converts this value as follows:
buf sz = bufsize W 1000 / bitrate(fR,
buf optimal sz = bufsize W 1000 / bitrate W 5 / 6(fR.
rc_init_occupancy (buf initial sz) 4

Set number of bits which should be loaded into the rc buffer before decoding
starts. Note vpxenc's option is specified in milliseconds, the libvpx
wrapper converts this value as follows:
rc_init_occupancy W 1000 / bitrate(fR.
undershoot pct 4

Set datarate undershoot (min) percentage of the target bitrate.
overshoot pct 4

Set datarate overshoot (max) percentage of the target bitrate.
skip_threshold (drop frame) 4
qcomp (bias pct) 4

maxrate (maxsection pct) 4
Set GOP max bitrate in bits/s. Note vpxenc's option is specified as a
percentage of the target bitrate, the libvpx wrapper converts this value as
follows: (maxrate W 100 / bitrate)(fR.
minrate (minsection pct) 4

Set GOP min bitrate in bits/s. Note vpxenc's option is specified as a
percentage of the target bitrate, the libvpx wrapper converts this value as
follows: (minrate W 100 / bitrate)(fR.
minrate, maxrate, b end usage=cbr 4

(minrate == maxrate == bitrate)(fR.
crf (end usage=cq, cq level) 4
tune (tune) 4
psnr (psnr) 4

ssim (ssim) 4
quality, deadline (deadline) 4
best 4
Use best quality deadline. Poorly named and quite slow, this option should be
avoided as it may give worse quality output than good.
good 4

Use good quality deadline. This is a good trade off between speed and quality
when used with the cpu used option.
realtime 4

Use realtime quality deadline.
speed, cpu used (cpu used) 4

Set quality/speed ratio modifier. Higher values speed up the encode at the cost
of quality.
nr (noise sensitivity) 4
static thresh 4
Set a change threshold on blocks below which they will be skipped by the
encoder.
slices (token parts) 4

Note that FFmpeg's slices option gives the total number of partitions,
while vpxenc's token parts is given as
log2(partitions)(fR.
max intra rate 4

Set maximum I frame bitrate as a percentage of the target bitrate. A value of 0
means unlimited.
force_key_frames 4

VPX_EFLAG_FORCE_KF(fR
Alternate reference frame related 4
auto alt ref 4
Enable use of alternate reference frames (2 pass only).
arnr max frames 4

Set altref noise reduction max frame count.
arnr type 4

Set altref noise reduction filter type: backward, forward, centered.
arnr strength 4

Set altref noise reduction filter strength.
rc lookahead, lag in frames (lag in frames) 4

Set number of frames to look ahead for frametype and ratecontrol.
error resilient 4

Enable error resiliency features.
VP9 specific options 4
lossless 4
Enable lossless mode.
tile columns 4

Set number of tile columns to use. Note this is given as
log2(tile_columns)(fR. For example, 8 tile columns would be requested by
setting the tile columns option to 3.
tile rows 4

Set number of tile rows to use. Note this is given as log2(tile_rows)(fR.
For example, 4 tile rows would be requested by setting the tile rows
option to 2.
frame parallel 4

Enable frame parallel decodability features.
aq mode 4

Set adaptive quantization mode (0: off (default), 1: variance 2: complexity, 3:
cyclic refresh, 4: equator360).
colorspace color space 4

Set input color space. The VP9 bitstream supports signaling the following
colorspaces:

rgb sRGB 4
bt709 bt709 4

unspecified unknown 4

bt470bg bt601 4

smpte170m smpte170 4

smpte240m smpte240 4

bt2020_ncl bt2020 4
row mt boolean 4
Enable row based multi threading.
tune content 4

Set content type: default (0), screen (1), film (2).
corpus complexity 4

Corpus VBR mode is a variant of standard VBR where the complexity distribution
midpoint is passed in rather than calculated for a specific clip or chunk.

The valid range is [0, 10000]. 0 (default) uses standard VBR.
For more information about libvpx see:
<http://www.webmproject.org/>
libwebp

libwebp WebP Image encoder wrapper

libwebp is Google's official encoder for WebP images. It can encode in either
lossy or lossless mode. Lossy images are essentially a wrapper around a VP8
frame. Lossless images are a separate codec developed by Google.

Pixel Format
Currently, libwebp only supports YUV420 for lossy and RGB for lossless due
to limitations of the format and libwebp. Alpha is supported for either mode.
Because of API limitations, if RGB is passed in when encoding lossy or YUV is
passed in for encoding lossless, the pixel format will automatically be
converted using functions from libwebp. This is not ideal and is done only for
convenience.

Options

 lossless boolean 4

Enables/Disables use of lossless mode. Default is 0.
 compression_level integer 4

For lossy, this is a quality/speed tradeoff. Higher values give better quality
for a given size at the cost of increased encoding time. For lossless, this is
a size/speed tradeoff. Higher values give smaller size at the cost of increased
encoding time. More specifically, it controls the number of extra algorithms
and compression tools used, and varies the combination of these tools. This
maps to the method option in libwebp. The valid range is 0 to 6.
Default is 4.
 qscale float 4

For lossy encoding, this controls image quality, 0 to 100. For lossless
encoding, this controls the effort and time spent at compressing more. The
default value is 75. Note that for usage via libavcodec, this option is called
global_quality and must be multiplied by FF_QP2LAMBDA.
 preset type 4

Configuration preset. This does some automatic settings based on the general
type of the image.

none 4

Do not use a preset.
default 4

Use the encoder default.
picture 4

Digital picture, like portrait, inner shot
photo 4

Outdoor photograph, with natural lighting
drawing 4

Hand or line drawing, with high contrast details
icon 4

Small sized colorful images
text 4

Text like
libx264, libx264rgb

x264 H.264/MPEG 4 AVC encoder wrapper.

This encoder requires the presence of the libx264 headers and library
during configuration. You need to explicitly configure the build with
(  enable libx264(fR.

libx264 supports an impressive number of features, including 8x8 and
4x4 adaptive spatial transform, adaptive B frame placement, CAVLC/CABAC
entropy coding, interlacing (MBAFF), lossless mode, psy optimizations
for detail retention (adaptive quantization, psy RD, psy trellis).

Many libx264 encoder options are mapped to FFmpeg global codec
options, while unique encoder options are provided through private
options. Additionally the x264opts and x264 params
private options allows one to pass a list of key=value tuples as accepted
by the libx264 x264_param_parse(fR function.

The x264 project website is at
<http://www.videolan.org/developers/x264.html>.

The libx264rgb encoder is the same as libx264, except it accepts packed RGB
pixel formats as input instead of YUV.

Supported Pixel Formats
x264 supports 8  to 10 bit color spaces. The exact bit depth is controlled at
x264's configure time. FFmpeg only supports one bit depth in one particular
build. In other words, it is not possible to build one FFmpeg with multiple
versions of x264 with different bit depths.

Options
The following options are supported by the libx264 wrapper. The
x264 equivalent options or values are listed in parentheses
for easy migration.

To reduce the duplication of documentation, only the private options
and some others requiring special attention are documented here. For
the documentation of the undocumented generic options, see
the Codec Options chapter.

To get a more accurate and extensive documentation of the libx264
options, invoke the command x264   fullhelp or consult
the libx264 documentation.
b (bitrate) 4

Set bitrate in bits/s. Note that FFmpeg's b option is
expressed in bits/s, while x264's bitrate is in
kilobits/s.
bf (bframes) 4
g (keyint) 4

qmin (qpmin) 4
Minimum quantizer scale.
qmax (qpmax) 4

Maximum quantizer scale.
qdiff (qpstep) 4

Maximum difference between quantizer scales.
qblur (qblur) 4

Quantizer curve blur
qcomp (qcomp) 4

Quantizer curve compression factor
refs (ref) 4

Number of reference frames each P frame can use. The range is from 0 16.
sc_threshold (scenecut) 4

Sets the threshold for the scene change detection.
trellis (trellis) 4

Performs Trellis quantization to increase efficiency. Enabled by default.
nr  (nr) 4
me_range (merange) 4
Maximum range of the motion search in pixels.
me_method (me) 4

Set motion estimation method. Possible values in the decreasing order
of speed:

dia (dia) 4
epzs (dia) 4
Diamond search with radius 1 (fastest). epzs is an alias for
dia.
hex (hex) 4

Hexagonal search with radius 2.
umh (umh) 4

Uneven multi hexagon search.
esa (esa) 4

Exhaustive search.
tesa (tesa) 4

Hadamard exhaustive search (slowest).
forced idr 4

Normally, when forcing a I frame type, the encoder can select any type
of I frame. This option forces it to choose an IDR frame.
subq (subme) 4

Sub pixel motion estimation method.
b_strategy (b adapt) 4

Adaptive B frame placement decision algorithm. Use only on first pass.
keyint_min (min keyint) 4

Minimum GOP size.
coder 4

Set entropy encoder. Possible values:

ac 4

Enable CABAC.
vlc 4

Enable CAVLC and disable CABAC. It generates the same effect as
x264's   no cabac option.
cmp 4

Set full pixel motion estimation comparison algorithm. Possible values:

chroma 4

Enable chroma in motion estimation.
sad 4

Ignore chroma in motion estimation. It generates the same effect as
x264's   no chroma me option.
threads (threads) 4

Number of encoding threads.
thread_type 4

Set multithreading technique. Possible values:

slice 4

Slice based multithreading. It generates the same effect as
x264's   sliced threads option.
frame 4

Frame based multithreading.
flags 4

Set encoding flags. It can be used to disable closed GOP and enable
open GOP by setting it to ( cgop(fR. The result is similar to
the behavior of x264's   open gop option.
rc_init_occupancy (vbv init) 4
preset (preset) 4
Set the encoding preset.
tune (tune) 4

Set tuning of the encoding params.
profile (profile) 4

Set profile restrictions.
fastfirstpass 4

Enable fast settings when encoding first pass, when set to 1. When set
to 0, it has the same effect of x264's
  slow firstpass option.
crf (crf) 4

Set the quality for constant quality mode.
crf_max (crf max) 4

In CRF mode, prevents VBV from lowering quality beyond this point.
qp (qp) 4

Set constant quantization rate control method parameter.
aq mode (aq mode) 4

Set AQ method. Possible values:

none (0) 4

Disabled.
variance (1) 4

Variance AQ (complexity mask).
autovariance (2) 4

Auto variance AQ (experimental).
aq strength (aq strength) 4

Set AQ strength, reduce blocking and blurring in flat and textured areas.
psy 4

Use psychovisual optimizations when set to 1. When set to 0, it has the
same effect as x264's   no psy option.
psy rd  (psy rd) 4

Set strength of psychovisual optimization, in
psy rd:psy trellis format.
rc lookahead (rc lookahead) 4

Set number of frames to look ahead for frametype and ratecontrol.
weightb 4

Enable weighted prediction for B frames when set to 1. When set to 0,
it has the same effect as x264's   no weightb option.
weightp (weightp) 4

Set weighted prediction method for P frames. Possible values:

none (0) 4

Disabled
simple (1) 4

Enable only weighted refs
smart (2) 4

Enable both weighted refs and duplicates
ssim (ssim) 4

Enable calculation and printing SSIM stats after the encoding.
intra refresh (intra refresh) 4

Enable the use of Periodic Intra Refresh instead of IDR frames when set
to 1.
avcintra class (class) 4

Configure the encoder to generate AVC Intra.
Valid values are 50,100 and 200
bluray compat (bluray compat) 4

Configure the encoder to be compatible with the bluray standard.
It is a shorthand for setting bluray compat=1 force cfr=1.
b bias (b bias) 4

Set the influence on how often B frames are used.
b pyramid (b pyramid) 4

Set method for keeping of some B frames as references. Possible values:

none (none) 4

Disabled.
strict (strict) 4

Strictly hierarchical pyramid.
normal (normal) 4

Non strict (not Blu ray compatible).
mixed refs 4

Enable the use of one reference per partition, as opposed to one
reference per macroblock when set to 1. When set to 0, it has the
same effect as x264's   no mixed refs option.
8x8dct 4

Enable adaptive spatial transform (high profile 8x8 transform)
when set to 1. When set to 0, it has the same effect as
x264's   no 8x8dct option.
fast pskip 4

Enable early SKIP detection on P frames when set to 1. When set
to 0, it has the same effect as x264's
  no fast pskip option.
aud (aud) 4

Enable use of access unit delimiters when set to 1.
mbtree 4

Enable use macroblock tree ratecontrol when set to 1. When set
to 0, it has the same effect as x264's
  no mbtree option.
deblock (deblock) 4

Set loop filter parameters, in alpha:beta form.
cplxblur (cplxblur) 4

Set fluctuations reduction in QP (before curve compression).
partitions (partitions) 4

Set partitions to consider as a comma separated list of. Possible
values in the list:

p8x8 4

8x8 P frame partition.
p4x4 4

4x4 P frame partition.
b8x8 4

4x4 B frame partition.
i8x8 4

8x8 I frame partition.
i4x4 4

4x4 I frame partition.
(Enabling p4x4 requires p8x8 to be enabled. Enabling
i8x8 requires adaptive spatial transform (8x8dct
option) to be enabled.)
none (none) 4

Do not consider any partitions.
all (all) 4

Consider every partition.
direct pred (direct) 4

Set direct MV prediction mode. Possible values:

none (none) 4

Disable MV prediction.
spatial (spatial) 4

Enable spatial predicting.
temporal (temporal) 4

Enable temporal predicting.
auto (auto) 4

Automatically decided.
slice max size (slice max size) 4

Set the limit of the size of each slice in bytes. If not specified
but RTP payload size (ps) is specified, that is used.
stats (stats) 4

Set the file name for multi pass stats.
nal hrd (nal hrd) 4

Set signal HRD information (requires vbv bufsize to be set).
Possible values:

none (none) 4

Disable HRD information signaling.
vbr (vbr) 4

Variable bit rate.
cbr (cbr) 4

Constant bit rate (not allowed in MP4 container).
x264opts (N.A.) 4

Set any x264 option, see x264   fullhelp for a list.

Argument is a list of key=value couples separated by
:. In filter and psy rd options that use : as a separator
themselves, use , instead. They accept it as well since long ago but this
is kept undocumented for some reason.

For example to specify libx264 encoding options with ffmpeg:
        ffmpeg  i foo.mpg  c:v libx264  x264opts keyint=123:min keyint=20  an out.mkv

a53cc boolean 4

Import closed captions (which must be ATSC compatible format) into output.
Only the mpeg2 and h264 decoders provide these. Default is 1 (on).
x264 params (N.A.) 4

Override the x264 configuration using a : separated list of key=value
parameters.

This option is functionally the same as the x264opts, but is
duplicated for compatibility with the Libav fork.

For example to specify libx264 encoding options with ffmpeg:
        ffmpeg  i INPUT  c:v libx264  x264 params level=30:bframes=0:weightp=0:(
        cabac=0:ref=1:vbv maxrate=768:vbv bufsize=2000:analyse=all:me=umh:(
        no fast pskip=1:subq=6:8x8dct=0:trellis=0 OUTPUT
Encoding ffpresets for common usages are provided so they can be used with the
general presets system (e.g. passing the pre option).
libx265

x265 H.265/HEVC encoder wrapper.

This encoder requires the presence of the libx265 headers and library
during configuration. You need to explicitly configure the build with
  enable libx265.

Options

preset 4

Set the x265 preset.
tune 4

Set the x265 tune parameter.
profile 4

Set profile restrictions.
crf 4

Set the quality for constant quality mode.
forced idr 4

Normally, when forcing a I frame type, the encoder can select any type
of I frame. This option forces it to choose an IDR frame.
x265 params 4

Set x265 options using a list of key=value couples separated
by :. See x265   help for a list of options.

For example to specify libx265 encoding options with  x265 params:
        ffmpeg  i input  c:v libx265  x265 params crf=26:psy rd=1 output.mp4

libxvid

Xvid MPEG 4 Part 2 encoder wrapper.

This encoder requires the presence of the libxvidcore headers and library
during configuration. You need to explicitly configure the build with
(  enable libxvid   enable gpl(fR.

The native mpeg4(fR encoder supports the MPEG 4 Part 2 format, so
users can encode to this format without this library.

Options
The following options are supported by the libxvid wrapper. Some of
the following options are listed but are not documented, and
correspond to shared codec options. See the Codec
Options chapter for their documentation. The other shared options
which are not listed have no effect for the libxvid encoder.
b 4
g 4

qmin 4

qmax 4

mpeg_quant 4

threads 4

bf 4

b_qfactor 4

b_qoffset 4

flags 4
Set specific encoding flags. Possible values:

mv4 4

Use four motion vector by macroblock.
aic 4

Enable high quality AC prediction.
gray 4

Only encode grayscale.
gmc 4

Enable the use of global motion compensation (GMC).
qpel 4

Enable quarter pixel motion compensation.
cgop 4

Enable closed GOP.
global_header 4

Place global headers in extradata instead of every keyframe.
trellis 4
me_method 4
Set motion estimation method. Possible values in decreasing order of
speed and increasing order of quality:

zero 4

Use no motion estimation (default).
phods 4
x1 4

log 4
Enable advanced diamond zonal search for 16x16 blocks and half pixel
refinement for 16x16 blocks. x1 and log are aliases for
phods.
epzs 4

Enable all of the things described above, plus advanced diamond zonal
search for 8x8 blocks, half pixel refinement for 8x8 blocks, and motion
estimation on chroma planes.
full 4

Enable all of the things described above, plus extended 16x16 and 8x8
blocks search.
mbd 4

Set macroblock decision algorithm. Possible values in the increasing
order of quality:

simple 4

Use macroblock comparing function algorithm (default).
bits 4

Enable rate distortion based half pixel and quarter pixel refinement for
16x16 blocks.
rd 4

Enable all of the things described above, plus rate distortion based
half pixel and quarter pixel refinement for 8x8 blocks, and rate
distortion based search using square pattern.
lumi_aq 4

Enable lumi masking adaptive quantization when set to 1. Default is 0
(disabled).
variance_aq 4

Enable variance adaptive quantization when set to 1. Default is 0
(disabled).

When combined with lumi_aq, the resulting quality will not
be better than any of the two specified individually. In other
words, the resulting quality will be the worse one of the two
effects.
ssim 4

Set structural similarity (SSIM) displaying method. Possible values:

off 4

Disable displaying of SSIM information.
avg 4

Output average SSIM at the end of encoding to stdout. The format of
showing the average SSIM is:
        Average SSIM: %f
For users who are not familiar with C, %f means a float number, or
a decimal (e.g. 0.939232).
frame 4

Output both per frame SSIM data during encoding and average SSIM at
the end of encoding to stdout. The format of per frame information
is:
               SSIM: avg: %1.3f min: %1.3f max: %1.3f
For users who are not familiar with C, %1.3f means a float number
rounded to 3 digits after the dot (e.g. 0.932).
ssim_acc 4

Set SSIM accuracy. Valid options are integers within the range of
0 4, while 0 gives the most accurate result and 4 computes the
fastest.
mpeg2

MPEG 2 video encoder.

Options

seq_disp_ext integer 4

Specifies if the encoder should write a sequence_display_extension to the
output.

 1 4
auto 4
Decide automatically to write it or not (this is the default) by checking if
the data to be written is different from the default or unspecified values.
0 4
never 4
Never write it.
1 4
always 4
Always write it.
video_format integer 4

Specifies the video_format written into the sequence display extension
indicating the source of the video pictures. The default is unspecified,
can be component, pal, ntsc, secam or mac.
For maximum compatibility, use component.
png

PNG image encoder.

Private options

dpi integer 4

Set physical density of pixels, in dots per inch, unset by default
dpm integer 4

Set physical density of pixels, in dots per meter, unset by default
ProRes

Apple ProRes encoder.

FFmpeg contains 2 ProRes encoders, the prores aw and prores ks encoder.
The used encoder can be chosen with the ( vcodec(fR option.

Private Options for prores ks

profile integer 4

Select the ProRes profile to encode

proxy 4
lt 4

standard 4

hq 4

4444 4

4444xq 4
quant_mat integer 4
Select quantization matrix.

auto 4
default 4

proxy 4

lt 4

standard 4

hq 4
If set to auto, the matrix matching the profile will be picked.
If not set, the matrix providing the highest quality, default, will be
picked.

bits_per_mb integer 4

How many bits to allot for coding one macroblock. Different profiles use
between 200 and 2400 bits per macroblock, the maximum is 8000.
mbs_per_slice integer 4

Number of macroblocks in each slice (1 8); the default value (8)
should be good in almost all situations.
vendor string 4

Override the 4 byte vendor ID.
A custom vendor ID like apl0 would claim the stream was produced by
the Apple encoder.
alpha_bits integer 4

Specify number of bits for alpha component.
Possible values are 0, 8 and 16.
Use 0 to disable alpha plane coding.

Speed considerations
In the default mode of operation the encoder has to honor frame constraints
(i.e. not produce frames with size bigger than requested) while still making
output picture as good as possible.
A frame containing a lot of small details is harder to compress and the encoder
would spend more time searching for appropriate quantizers for each slice.

Setting a higher bits_per_mb limit will improve the speed.

For the fastest encoding speed set the qscale parameter (4 is the
recommended value) and do not set a size constraint.
QSV encoders

The family of Intel QuickSync Video encoders (MPEG 2, H.264 and HEVC)

The ratecontrol method is selected as follows:
o 4
When global_quality is specified, a quality based mode is used.
Specifically this means either

  4
CQP   constant quantizer scale, when the qscale codec flag is
also set (the  qscale ffmpeg option).
  4
LA_ICQ   intelligent constant quality with lookahead, when the
look_ahead option is also set.
  4
ICQ  intelligent constant quality otherwise.
o 4
Otherwise, a bitrate based mode is used. For all of those, you should specify at
least the desired average bitrate with the b option.

  4
LA   VBR with lookahead, when the look_ahead option is specified.
  4
VCM   video conferencing mode, when the vcm option is set.
  4
CBR   constant bitrate, when maxrate is specified and equal to
the average bitrate.
  4
VBR   variable bitrate, when maxrate is specified, but is higher
than the average bitrate.
  4
AVBR   average VBR mode, when maxrate is not specified. This mode
is further configured by the avbr_accuracy and
avbr_convergence options.
Note that depending on your system, a different mode than the one you specified
may be selected by the encoder. Set the verbosity level to verbose or
higher to see the actual settings used by the QSV runtime.

Additional libavcodec global options are mapped to MSDK options as follows:
o 4
g/gop_size  > GopPicSize
o 4
bf/max_b_frames+1  > GopRefDist
o 4
rc_init_occupancy/rc_initial_buffer_occupancy  >
InitialDelayInKB
o 4
slices  > NumSlice
o 4
refs  > NumRefFrame
o 4
b_strategy/b_frame_strategy  > BRefType
o 4
cgop/CLOSED_GOP codec flag  > GopOptFlag
o 4
For the CQP mode, the i_qfactor/i_qoffset and
b_qfactor/b_qoffset set the difference between QPP and QPI,
and QPP and QPB respectively.
o 4
Setting the coder option to the value vlc will make the H.264
encoder use CAVLC instead of CABAC.
snow

Options

iterative_dia_size 4

dia size for the iterative motion estimation
VAAPI encoders

Wrappers for hardware encoders accessible via VAAPI.

These encoders only accept input in VAAPI hardware surfaces.  If you have input
in software frames, use the hwupload filter to upload them to the GPU.

The following standard libavcodec options are used:
o 4
g / gop_size
o 4
bf / max_b_frames
o 4
profile

If not set, this will be determined automatically from the format of the input
frames and the profiles supported by the driver.
o 4
level
o 4
b / bit_rate
o 4
maxrate / rc_max_rate
o 4
bufsize / rc_buffer_size
o 4
rc_init_occupancy / rc_initial_buffer_occupancy
o 4
compression_level

Speed / quality tradeoff: higher values are faster / worse quality.
o 4
q / global_quality

Size / quality tradeoff: higher values are smaller / worse quality.
o 4
qmin
o 4
qmax
o 4
i_qfactor / i_quant_factor
o 4
i_qoffset / i_quant_offset
o 4
b_qfactor / b_quant_factor
o 4
b_qoffset / b_quant_offset
o 4
slices

All encoders support the following options:
o 4
low_power

Some drivers/platforms offer a second encoder for some codecs intended to use
less power than the default encoder; setting this option will attempt to use
that encoder.  Note that it may support a reduced feature set, so some other
options may not be available in this mode.

Each encoder also has its own specific options:
h264_vaapi 4

profile sets the value of profile_idc and the constraint_setW_flags.
level sets the value of level_idc.

coder 4

Set entropy encoder (default is cabac).  Possible values:

ac 4
cabac 4
Use CABAC.
vlc 4
cavlc 4
Use CAVLC.
aud 4

Include access unit delimiters in the stream (not included by default).
sei 4

Set SEI message types to include.
Some combination of the following values:

identifier 4

Include a user_data_unregistered message containing information about
the encoder.
timing 4

Include picture timing parameters (buffering_period and
pic_timing messages).
recovery_point 4

Include recovery points where appropriate (recovery_point messages).
hevc_vaapi 4

profile and level set the values of
general_profile_idc and general_level_idc respectively.

aud 4

Include access unit delimiters in the stream (not included by default).
tier 4

Set general_tier_flag.  This may affect the level chosen for the stream
if it is not explicitly specified.
sei 4

Set SEI message types to include.
Some combination of the following values:

hdr 4

Include HDR metadata if the input frames have it
(mastering_display_colour_volume and content_light_level
messages).
mjpeg_vaapi 4

Only baseline DCT encoding is supported.  The encoder always uses the standard
quantisation and huffman tables   global_quality scales the standard
quantisation table (range 1 100).

For YUV, 4:2:0, 4:2:2 and 4:4:4 subsampling modes are supported.  RGB is also
supported, and will create an RGB JPEG.

jfif 4

Include JFIF header in each frame (not included by default).
huffman 4

Include standard huffman tables (on by default).  Turning this off will save
a few hundred bytes in each output frame, but may lose compatibility with some
JPEG decoders which don't fully handle MJPEG.
mpeg2_vaapi 4

profile and level set the value of profile_and_level_indication.
vp8_vaapi 4

B frames are not supported.

global_quality sets the q_idx used for non key frames (range 0 127).

loop_filter_level 4
loop_filter_sharpness 4
Manually set the loop filter parameters.
vp9_vaapi 4

global_quality sets the q_idx used for P frames (range 0 255).

loop_filter_level 4
loop_filter_sharpness 4
Manually set the loop filter parameters.
B frames are supported, but the output stream is always in encode order rather than display
order.  If B frames are enabled, it may be necessary to use the vp9_raw_reorder
bitstream filter to modify the output stream to display frames in the correct order.

Only normal frames are produced   the vp9_superframe bitstream filter may be
required to produce a stream usable with all decoders.

vc2

SMPTE VC 2 (previously BBC Dirac Pro). This codec was primarily aimed at
professional broadcasting but since it supports yuv420, yuv422 and yuv444 at
8 (limited range or full range), 10 or 12 bits, this makes it suitable for
other tasks which require low overhead and low compression (like screen
recording).

Options

b 4

Sets target video bitrate. Usually that's around 1:6 of the uncompressed
video bitrate (e.g. for 1920x1080 50fps yuv422p10 that's around 400Mbps). Higher
values (close to the uncompressed bitrate) turn on lossless compression mode.
field_order 4

Enables field coding when set (e.g. to tt   top field first) for interlaced
inputs. Should increase compression with interlaced content as it splits the
fields and encodes each separately.
wavelet_depth 4

Sets the total amount of wavelet transforms to apply, between 1 and 5 (default).
Lower values reduce compression and quality. Less capable decoders may not be
able to handle values of wavelet_depth over 3.
wavelet_type 4

Sets the transform type. Currently only 5_3 (LeGall) and 9_7
(Deslauriers Dubuc)
are implemented, with 9_7 being the one with better compression and thus
is the default.
slice_width 4
slice_height 4
Sets the slice size for each slice. Larger values result in better compression.
For compatibility with other more limited decoders use slice_width of
32 and slice_height of 8.
tolerance 4

Sets the undershoot tolerance of the rate control system in percent. This is
to prevent an expensive search from being run.
qm 4

Sets the quantization matrix preset to use by default or when wavelet_depth
is set to 5

  4
default
Uses the default quantization matrix from the specifications, extended with
values for the fifth level. This provides a good balance between keeping detail
and omitting artifacts.
  4
flat
Use a completely zeroed out quantization matrix. This increases PSNR but might
reduce perception. Use in bogus benchmarks.
  4
color
Reduces detail but attempts to preserve color at extremely low bitrates.
libxavs2

xavs2 AVS2 P2/IEEE1857.4 encoder wrapper.

This encoder requires the presence of the libxavs2 headers and library
during configuration. You need to explicitly configure the build with
  enable libxavs2.

Options

lcu_row_threads 4

Set the number of parallel threads for rows from 1 to 8 (default 5).
initial_qp 4

Set the xavs2 quantization parameter from 1 to 63 (default 34). This is
used to set the initial qp for the first frame.
qp 4

Set the xavs2 quantization parameter from 1 to 63 (default 34). This is
used to set the qp value under constant QP mode.
max_qp 4

Set the max qp for rate control from 1 to 63 (default 55).
min_qp 4

Set the min qp for rate control from 1 to 63 (default 20).
speed_level 4

Set the Speed level from 0 to 9 (default 0). Higher is better but slower.
log_level 4

Set the log level from  1 to 3 (default 0).  1: none, 0: error,
1: warning, 2: info, 3: debug.
xavs2 params 4

Set xavs2 options using a list of key=value couples separated
by :.

For example to specify libxavs2 encoding options with  xavs2 params:
        ffmpeg  i input  c:v libxavs2  xavs2 params preset_level=5 output.avs2

SUBTITLES ENCODERS

dvdsub

This codec encodes the bitmap subtitle format that is used in DVDs.
Typically they are stored in VOBSUB file pairs (W.idx + W.sub),
and they can also be used in Matroska files.

Options

even_rows_fix 4

When set to 1, enable a work around that makes the number of pixel rows
even in all subtitles.  This fixes a problem with some players that
cut off the bottom row if the number is odd.  The work around just adds
a fully transparent row if needed.  The overhead is low, typically
one byte per subtitle on average.

By default, this work around is disabled.
SEE ALSO

ffmpeg(1), ffplay(1), ffprobe(1), libavcodec(3)
AUTHORS

The FFmpeg developers.

For details about the authorship, see the Git history of the project
(git://source.ffmpeg.org/ffmpeg), e.g. by typing the command
git log in the FFmpeg source directory, or browsing the
online repository at <http://source.ffmpeg.org>.

Maintainers for the specific components are listed in the file
MAINTAINERS in the source code tree.

