
{
NAME
perl5280delta   what is new for perl v5.28.0
DESCRIPTION

This document describes differences between the 5.26.0 release and the 5.28.0
release.

If you are upgrading from an earlier release such as 5.24.0, first read
perl5260delta, which describes differences between 5.24.0 and 5.26.0.
Core Enhancements

Unicode 10.0 is supported

A list of changes is at
<http://www.unicode.org/versions/Unicode10.0.0>.
delete(fR can now be used on
key/value hash slices,
returning the keys along with the deleted values.
[perl #131328] <https://rt.perl.org/Ticket/Display.html?id=131328>
Experimentally, there are now alphabetic synonyms for some regular expression assertions

If you find it difficult to remember how to write certain of the pattern
assertions, there are now alphabetic synonyms.
 CURRENT                NEW SYNONYMS
                                    
 (?=...)        (Wpla:...) or (Wpositive_lookahead:...)
 (?!...)        (Wnla:...) or (Wnegative_lookahead:...)
 (?<=...)       (Wplb:...) or (Wpositive_lookbehind:...)
 (?<!...)       (Wnlb:...) or (Wnegative_lookbehind:...)
 (?>...)        (Watomic:...)
These are considered experimental, so using any of these will raise
(unless turned off) a warning in the experimental::alpha_assertions(fR
category.
Mixed Unicode scripts are now detectable

A mixture of scripts, such as Cyrillic and Latin, in a string is often
the sign of a spoofing attack.  A new regular expression construct
now allows for easy detection of these.  For example, you can say
 qr/(Wscript_run: (d+ (b )/x
And the digits matched will all be from the same set of 10.  You won't
get a look alike digit from a different script that has a different
value than what it appears to be.

Or:
 qr/(Wsr: (b (w+ (b )/x
makes sure that all the characters come from the same script.

You can also combine script runs with (?>...)(fR (or
Watomic:...)(fR).

Instead of writing:
    (Wsr:(?<...))
you can now run:
    (Wasr:...)
    # or
    (Watomic_script_run:...)
This is considered experimental, so using it will raise (unless turned
off) a warning in the experimental::script_run(fR category.

See Script Runs in perlre.
Previously in place editing (perl  i(fR) would delete or rename the
input file as soon as you started working on a new file.

Without backups this would result in loss of data if there was an
error, such as a full disk, when writing to the output file.

This has changed so that the input file isn't replaced until the
output file has been completely written and successfully closed.

This works by creating a work file in the same directory, which is
renamed over the input file once the output file is complete.

Incompatibilities:
o 4
Since this renaming needs to only happen once, if you create a thread
or child process, that renaming will only happen in the original
thread or process.
o 4
If you change directories while processing a file, and your operating
system doesn't provide the unlinkat()(fR, renameat()(fR and fchmodat()(fR
functions, the final rename step may fail.

[perl #127663] <https://rt.perl.org/Public/Bug/Display.html?id=127663>
Initialisation of aggregate state variables

A persistent lexical array or hash variable can now be initialized,
by an expression such as state @a = qw(x y z)(fR.  Initialization of a
list of persistent lexical variables is still not possible.
Full size inode numbers

On platforms where inode numbers are of a type larger than perl's native
integer numerical types, stat will preserve the full
content of large inode numbers by returning them in the form of strings of
decimal digits.  Exact comparison of inode numbers can thus be achieved by
comparing with eq(fR rather than ==(fR.  Comparison with ==(fR, and other
numerical operations (which are usually meaningless on inode numbers),
work as well as they did before, which is to say they fall back to
floating point, and ultimately operate on a fairly useless rounded inode
number if the real inode number is too big for the floating point format.
The actual size used depends on the platform, so remains unportable.
Close on exec flag set atomically

When opening a file descriptor, perl now generally opens it with its
close on exec flag already set, on platforms that support doing so.
This improves thread safety, because it means that an exec(fR initiated
by one thread can no longer cause a file descriptor in the process
of being opened by another thread to be accidentally passed to the
executed program.

Additionally, perl now sets the close on exec flag more reliably, whether
it does so atomically or not.  Most file descriptors were getting the
flag set, but some were being missed.
String  and number specific bitwise ops are no longer experimental

The new string specific (&. |. ^. ~.(fR) and number specific (& | ^ ~(fR)
bitwise operators introduced in Perl 5.22 that are available within the
scope of use feature bitwise(W(C' are no longer experimental.
Because the number specific ops are spelled the same way as the existing
operators that choose their behaviour based on their operands, these
operators must still be enabled via the bitwise feature, in either of
these two ways:
    use feature "bitwise";

    use v5.28; # "bitwise" now included
They are also now enabled by the  E command line switch.

The bitwise feature no longer emits a warning.  Existing code that
disables the experimental::bitwise warning category that the feature
previously used will continue to work.

One caveat that module authors ought to be aware of is that the numeric
operators now pass a fifth TRUE argument to overload methods.  Any methods
that check the number of operands may croak if they do not expect so many.
XS authors in particular should be aware that this:
    SV W
    bitop_handler (lobj, robj, swap)
may need to be changed to this:
    SV W
    bitop_handler (lobj, robj, swap, ...)

Locales are now thread safe on systems that support them

These systems include Windows starting with Visual Studio 2005, and in
POSIX 2008 systems.

The implication is that you are now free to use locales and change them
in a threaded environment.  Your changes affect only your thread.
See Multi threaded operation in perllocale
This variable is 1 if the Perl interpreter is operating in an
environment where it is safe to use and change locales (see
perllocale.)  This variable is true when the perl is
unthreaded, or compiled in a platform that supports thread safe locale
operation (see previous item).
Security

[CVE 2017 12837] Heap buffer overflow in regular expression compiler

Compiling certain regular expression patterns with the case insensitive
modifier could cause a heap buffer overflow and crash perl.  This has now been
fixed.
[perl #131582] <https://rt.perl.org/Public/Bug/Display.html?id=131582>
[CVE 2017 12883] Buffer over read in regular expression parser

For certain types of syntax error in a regular expression pattern, the error
message could either contain the contents of a random, possibly large, chunk of
memory, or could crash perl.  This has now been fixed.
[perl #131598] <https://rt.perl.org/Public/Bug/Display.html?id=131598>
A possible stack buffer overflow in the %ENV code on Windows has been fixed
by removing the buffer completely since it was superfluous anyway.
[perl #131665] <https://rt.perl.org/Public/Bug/Display.html?id=131665>
Default Hash Function Change

Perl 5.28.0 retires various older hash functions which are not viewed as
sufficiently secure for use in Perl. We now support four general purpose
hash functions, Siphash (2 4 and 1 3 variants), and  Zaphod32, and StadtX
hash. In addition we support SBOX32 (a form of tabular hashing) for hashing
short strings, in conjunction with any of the other hash functions provided.

By default Perl is configured to support SBOX hashing of strings up to 24
characters, in conjunction with StadtX hashing on 64 bit builds, and
Zaphod32 hashing for 32 bit builds.

You may control these settings with the following options to Configure:
     DPERL_HASH_FUNC_SIPHASH
     DPERL_HASH_FUNC_SIPHASH13
     DPERL_HASH_FUNC_STADTX
     DPERL_HASH_FUNC_ZAPHOD32
To disable SBOX hashing you can use
     DPERL_HASH_USE_SBOX32_ALSO=0
And to set the maximum length to use SBOX32 hashing on with:
     DSBOX32_MAX_LEN=16
The maximum length allowed is 256. There probably isn't much point
in setting it higher than the default.
Incompatible Changes

Subroutine attribute and signature order

The experimental subroutine signatures feature has been changed so that
subroutine attributes must now come before the signature rather than
after. This is because attributes like :lvalue(fR can affect the
compilation of code within the signature, for example:
    sub f :lvalue ($a = do { $x = "abc"; return substr($x,0,1)}) { ...}
Note that this the second time they have been flipped:
    sub f :lvalue ($a, $b) { ... }; # 5.20; 5.28 onwards
    sub f ($a, $b) :lvalue { ... }; # 5.22   5.26

Comma less variable lists in formats are no longer allowed

Omitting the commas between variables passed to formats is no longer
allowed.  This has been deprecated since Perl 5.000.
These have been no ops and deprecated since Perl 5.12 and 5.10,
respectively.
This has been deprecated since Perl 5.24.
Opening the same symbol as both a file and directory handle is no longer allowed

Using open()(fR and opendir()(fR to associate both a filehandle and a dirhandle
to the same symbol (glob or scalar) has been deprecated since Perl 5.10.
Use of a bare terminator has been deprecated since Perl 5.000.
Setting $/ to a reference to a non positive integer no longer allowed

This used to work like setting it to undef(fR, but has been deprecated
since Perl 5.20.
This was deprecated since Perl 5.24.
Use B::Concise::b_terse(fR instead.
Use of inherited AUTOLOAD for non methods is no longer allowed

This was deprecated in Perl 5.004.
Use of strings with code points over 0xFF is not allowed for bitwise string operators

Code points over 0xFF do not make sense for bitwise operators and such
an operation will now croak, except for a few remaining cases. See
perldeprecation.

This was deprecated in Perl 5.24.
This has been deprecated since Perl 5.22 and a no op since Perl 5.26.
Previously the ( S(fR switch incorrectly treated backslash ((e) as an
escape for colon when traversing the PATH(fR environment variable.
[perl #129183] <https://rt.perl.org/Ticket/Display.html?id=129183>
the  DH (DEBUG_H) misfeature has been removed

On a perl built with debugging support, the H(fR flag to the ( D(fR
debugging option has been removed. This was supposed to dump hash values,
but has been broken for many years.
Yada yada is now strictly a statement

By the time of its initial stable release in Perl 5.12, the ...(fR
(yada yada) operator was explicitly intended to serve as a statement,
not an expression.  However, the original implementation was confused
on this point, leading to inconsistent parsing.  The operator was
accidentally accepted in a few situations where it did not serve as a
complete statement, such as
    ... . "foo";
    ... if $a < $b;
The parsing has now been made consistent, permitting yada yada only as
a statement.  Affected code can use do{...}(fR to put a yada yada into
an arbitrary expression context.
Sort algorithm can no longer be specified

Since Perl 5.8, the sort pragma has had subpragmata _mergesort(fR,
_quicksort(fR, and _qsort(fR that can be used to specify which algorithm
perl should use to implement the sort builtin.
This was always considered a dubious feature that might not last,
hence the underscore spellings, and they were documented as not being
portable beyond Perl 5.8.  These subpragmata have now been deleted,
and any attempt to use them is an error.  The sort pragma otherwise
remains, and the algorithm neutral stable(fR subpragma can be used to
control sorting behaviour.
[perl #119635] <https://rt.perl.org/Ticket/Display.html?id=119635>
Over radix digits in floating point literals

Octal and binary floating point literals used to permit any hexadecimal
digit to appear after the radix point.  The digits are now restricted
to those appropriate for the radix, as digits before the radix point
always were.
The return types of the C API functions unpackstring()(fR and
unpack_str()(fR have changed from I32(fR to SSize_t(fR, in order to
accommodate datasets of more than two billion items.
Deprecations
Such strings are represented internally in UTF 8, and vec(fR is a
bit oriented operation that will likely give unexpected results on those
strings.
Perl 5.26.0 fatalized some uses of an unescaped left brace, but an
exception was made at the last minute, specifically crafted to be a
minimal change to allow GNU Autoconf to work.  That tool is heavily
depended upon, and continues to use the deprecated usage.  Its use of an
unescaped left brace is one where we have no intention of repurposing
"{" to be something other than itself.

That exception is now generalized to include various other such cases
where the "{" will not be repurposed.

Note that these uses continue to raise a deprecation message.
Using unescaped left braces is officially deprecated everywhere, but it
is not enforced in contexts where their use does not interfere with
expected extensions to the language.  A deprecation is added in this
release when the brace appears immediately after an opening parenthesis.
Before this, even if the brace was part of a legal quantifier, it was
not interpreted as such, but as the literal characters, unlike other
quantifiers that follow a "(" which are considered errors.  Now,
their use will raise a deprecation message, unless turned off.
Assigning a non zero value to $[ has been deprecated
since Perl 5.12, but was never given a deadline for removal.  This has
now been scheduled for Perl 5.30.
hostname() won't accept arguments in Perl 5.32

Passing arguments to Sys::Hostname::hostname()(fR was already deprecated,
but didn't have a removal date.  This has now been scheduled for Perl
5.32.  [perl #124349] <https://rt.perl.org/Ticket/Display.html?id=124349>
Module removals

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue "deprecated" category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN capable Perl installation,
not usually on concerns over their design.
B::Debug 4
Locale::Codes and its associated Country, Currency and Language modules 4
Performance Enhancements

o 4
The start up overhead for creating regular expression patterns with
Unicode properties ((ep{...}(fR) has been greatly reduced in most cases.
o 4
Many string concatenation expressions are now considerably faster, due
to the introduction internally of a multiconcat(fR opcode which combines
multiple concatenations, and optionally a =(fR or .=(fR, into a single
action. For example, apart from retrieving $s, $a and $b, this
whole expression is now handled as a single op:
    $s .= "a=$a b=$b(n"
As a special case, if the LHS of an assignment is a lexical variable or
my $s(fR, the op itself handles retrieving the lexical variable, which
is faster.

In general, the more the expression includes a mix of constant strings and
variable expressions, the longer the expression, and the more it mixes
together non utf8 and utf8 strings, the more marked the performance
improvement. For example on a x86_64(fR system, this code has been
benchmarked running four times faster:
    my $s;
    my $a = "ab(x{100}cde";
    my $b = "fghij";
    my $c = "(x{101}klmn";

    for my $i (1..10_000_000) {
        $s = "(x{100}wxyz";
        $s .= "foo=$a bar=$b baz=$c";
    }
In addition, sprintf(fR expressions which have a constant format
containing only %s and %%(fR format elements, and which have a fixed
number of arguments, are now also optimised into a multiconcat(fR op.
o 4
The ref()(fR builtin is now much faster in boolean context, since it no
longer bothers to construct a temporary string like Foo=ARRAY(0x134af48)(fR.
o 4
keys()(fR in void and scalar contexts is now more efficient.
o 4
The common idiom of comparing the result of index() with  1 is now
specifically optimised,  e.g.
    if (index(...) !=  1) { ... }

o 4
for()(fR loops and similar constructs are now more efficient in most cases.
o 4
File::Glob has been modified to remove unnecessary backtracking and
recursion, thanks to Russ Cox. See <https://research.swtch.com/glob>
for more details.
o 4
The XS level SvTRUE()(fR API function is now more efficient.
o 4
Various integer returning ops are now more efficient in scalar/boolean context.
o 4
Slightly improved performance when parsing stash names.
[perl #129990] <https://rt.perl.org/Public/Bug/Display.html?id=129990>
o 4
Calls to require(fR for an already loaded module are now slightly faster.
[perl #132171] <https://rt.perl.org/Public/Bug/Display.html?id=132171>
o 4
The performance of pattern matching [[:ascii:]](fR and [[:^ascii:]](fR
has been improved significantly except on EBCDIC platforms.
o 4
Various optimizations have been applied to matching regular expression
patterns, so under the right circumstances, significant performance
gains may be noticed.  But in an application with many varied patterns,
little overall improvement likely will be seen.
o 4
Other optimizations have been applied to UTF 8 handling, but these are
not typically a major factor in most applications.
Modules and Pragmata

Key highlights in this release across several modules:
Removal of use vars

The usage of use vars(fR has been discouraged since the introduction of
our(fR in Perl 5.6.0. Where possible the usage of this pragma has now been
removed from the Perl source code.

This had a slight effect (for the better) on the output of WARNING_BITS in
B::Deparse.
Use of DynaLoader changed to XSLoader in many modules

XSLoader is more modern, and most modules already require perl 5.6 or
greater, so no functionality is lost by switching. In some cases, we have
also made changes to the local implementation that may not be reflected in
the version on CPAN due to a desire to maintain more backwards
compatibility.
Updated Modules and Pragmata

o 4
Archive::Tar has been upgraded from version 2.24 to 2.30.

This update also handled CVE 2018 12015: directory traversal
vulnerability.
[cpan #125523] <https://rt.cpan.org/Ticket/Display.html?id=125523>
o 4
arybase has been upgraded from version 0.12 to 0.15.
o 4
Attribute::Handlers has been upgraded from version 0.99 to 1.01.
o 4
attributes has been upgraded from version 0.29 to 0.33.
o 4
B has been upgraded from version 1.68 to 1.74.
o 4
B::Concise has been upgraded from version 0.999 to 1.003.
o 4
B::Debug has been upgraded from version 1.24 to 1.26.

NOTE: B::Debug is deprecated and may be removed from a future version
of Perl.
o 4
B::Deparse has been upgraded from version 1.40 to 1.48.

It includes many bug fixes, and in particular, it now deparses variable
attributes correctly:
    my $x :foo;  # used to deparse as
                 # attributes( >import(main, ($x, foo), my $x;

o 4
base has been upgraded from version 2.25 to 2.27.
o 4
bignum has been upgraded from version 0.47 to 0.49.
o 4
blib has been upgraded from version 1.06 to 1.07.
o 4
bytes has been upgraded from version 1.05 to 1.06.
o 4
Carp has been upgraded from version 1.42 to 1.50.

If a package on the call stack contains a constant named ISA(fR, Carp no
longer throws a Not a GLOB reference error.

Carp, when generating stack traces, now attempts to work around
longstanding bugs resulting from Perl's non reference counted stack.
[perl #52610] <https://rt.perl.org/Ticket/Display.html?id=52610>

Carp has been modified to avoid assuming that objects cannot be
overloaded without the overload module loaded (this can happen with
objects created by XS modules).  Previously, infinite recursion would
result if an XS defined overload method itself called Carp.
[perl #132828] <https://rt.perl.org/Ticket/Display.html?id=132828>

Carp now avoids using overload::StrVal(fR, partly because older versions
of overload (included with perl 5.14 and earlier) load Scalar::Util
at run time, which will fail if Carp has been invoked after a syntax error.
o 4
charnames has been upgraded from version 1.44 to 1.45.
o 4
Compress::Raw::Zlib has been upgraded from version 2.074 to 2.076.

This addresses a security vulnerability in older versions of the 'zlib' library
(which is bundled with Compress Raw Zlib).
o 4
Config::Extensions has been upgraded from version 0.01 to 0.02.
o 4
Config::Perl::V has been upgraded from version 0.28 to 0.29.
o 4
CPAN has been upgraded from version 2.18 to 2.20.
o 4
Data::Dumper has been upgraded from version 2.167 to 2.170.

Quoting of glob names now obeys the Useqq option
[perl #119831] <https://rt.perl.org/Ticket/Display.html?id=119831>.

Attempts to set an option to undef(fR through a combined getter/setter
method are no longer mistaken for getter calls
[perl #113090] <https://rt.perl.org/Ticket/Display.html?id=113090>.
o 4
Devel::Peek has been upgraded from version 1.26 to 1.27.
o 4
Devel::PPPort has been upgraded from version 3.35 to 3.40.

Devel::PPPort has moved from cpan first to perl first maintenance

Primary responsibility for the code in Devel::PPPort has moved into core perl.
In a practical sense there should be no change except that hopefully it will
stay more up to date with changes made to symbols in perl, rather than needing
to be updated after the fact.
o 4
Digest::SHA has been upgraded from version 5.96 to 6.01.
o 4
DirHandle has been upgraded from version 1.04 to 1.05.
o 4
DynaLoader has been upgraded from version 1.42 to 1.45.

Its documentation now shows the use of __PACKAGE__(fR and direct object
syntax
[perl #132247] <https://rt.perl.org/Ticket/Display.html?id=132247>.
o 4
Encode has been upgraded from version 2.88 to 2.97.
o 4
encoding has been upgraded from version 2.19 to 2.22.
o 4
Errno has been upgraded from version 1.28 to 1.29.
o 4
experimental has been upgraded from version 0.016 to 0.019.
o 4
Exporter has been upgraded from version 5.72 to 5.73.
o 4
ExtUtils::CBuilder has been upgraded from version 0.280225 to 0.280230.
o 4
ExtUtils::Constant has been upgraded from version 0.23 to 0.25.
o 4
ExtUtils::Embed has been upgraded from version 1.34 to 1.35.
o 4
ExtUtils::Install has been upgraded from version 2.04 to 2.14.
o 4
ExtUtils::MakeMaker has been upgraded from version 7.24 to 7.34.
o 4
ExtUtils::Miniperl has been upgraded from version 1.06 to 1.08.
o 4
ExtUtils::ParseXS has been upgraded from version 3.34 to 3.39.
o 4
ExtUtils::Typemaps has been upgraded from version 3.34 to 3.38.
o 4
ExtUtils::XSSymSet has been upgraded from version 1.3 to 1.4.
o 4
feature has been upgraded from version 1.47 to 1.52.
o 4
fields has been upgraded from version 2.23 to 2.24.
o 4
File::Copy has been upgraded from version 2.32 to 2.33.

It will now use the sub second precision variant of utime() supplied by
Time::HiRes where available.
[perl #132401] <https://rt.perl.org/Ticket/Display.html?id=132401>.
o 4
File::Fetch has been upgraded from version 0.52 to 0.56.
o 4
File::Glob has been upgraded from version 1.28 to 1.31.
o 4
File::Path has been upgraded from version 2.12_01 to 2.15.
o 4
File::Spec and Cwd have been upgraded from version 3.67 to 3.74.
o 4
File::stat has been upgraded from version 1.07 to 1.08.
o 4
FileCache has been upgraded from version 1.09 to 1.10.
o 4
Filter::Simple has been upgraded from version 0.93 to 0.95.
o 4
Filter::Util::Call has been upgraded from version 1.55 to 1.58.
o 4
GDBM_File has been upgraded from version 1.15 to 1.17.

Its documentation now explains that each(fR and delete(fR don't mix in
hashes tied to this module
[perl #117449] <https://rt.perl.org/Ticket/Display.html?id=117449>.

It will now retry opening with an acceptable block size if asking gdbm
to default the block size failed
[perl #119623] <https://rt.perl.org/Ticket/Display.html?id=119623>.
o 4
Getopt::Long has been upgraded from version 2.49 to 2.5.
o 4
Hash::Util::FieldHash has been upgraded from version 1.19 to 1.20.
o 4
I18N::Langinfo has been upgraded from version 0.13 to 0.17.

This module is now available on all platforms, emulating the system
nl_langinfo(3) on systems that lack it.  Some caveats apply, as
detailed in its documentation, the most severe being
that, except for MS Windows, the CODESET(fR item is not implemented on
those systems, always returning "".

It now sets the UTF 8 flag in its returned scalar if the string contains
legal non ASCII UTF 8, and the locale is UTF 8
[perl #127288] <https://rt.perl.org/Ticket/Display.html?id=127288>.

This update also fixes a bug in which the underlying locale was ignored
for the RADIXCHAR(fR (always was returned as a dot) and the THOUSEP(fR
(always empty).  Now the locale appropriate values are returned.
o 4
I18N::LangTags has been upgraded from version 0.42 to 0.43.
o 4
if has been upgraded from version 0.0606 to 0.0608.
o 4
IO has been upgraded from version 1.38 to 1.39.
o 4
IO::Socket::IP has been upgraded from version 0.38 to 0.39.
o 4
IPC::Cmd has been upgraded from version 0.96 to 1.00.
o 4
JSON::PP has been upgraded from version 2.27400_02 to 2.97001.
o 4
The libnet(fR distribution has been upgraded from version 3.10 to 3.11.
o 4
List::Util has been upgraded from version 1.46_02 to 1.49.
o 4
Locale::Codes has been upgraded from version 3.42 to 3.56.

NOTE: Locale::Codes scheduled to be removed from core in Perl 5.30.
o 4
Locale::Maketext has been upgraded from version 1.28 to 1.29.
o 4
Math::BigInt has been upgraded from version 1.999806 to 1.999811.
o 4
Math::BigInt::FastCalc has been upgraded from version 0.5005 to 0.5006.
o 4
Math::BigRat has been upgraded from version 0.2611 to 0.2613.
o 4
Module::CoreList has been upgraded from version 5.20170530 to 5.20180622.
o 4
mro has been upgraded from version 1.20 to 1.22.
o 4
Net::Ping has been upgraded from version 2.55 to 2.62.
o 4
NEXT has been upgraded from version 0.67 to 0.67_01.
o 4
ODBM_File has been upgraded from version 1.14 to 1.15.
o 4
Opcode has been upgraded from version 1.39 to 1.43.
o 4
overload has been upgraded from version 1.28 to 1.30.
o 4
PerlIO::encoding has been upgraded from version 0.25 to 0.26.
o 4
PerlIO::scalar has been upgraded from version 0.26 to 0.29.
o 4
PerlIO::via has been upgraded from version 0.16 to 0.17.
o 4
Pod::Functions has been upgraded from version 1.11 to 1.13.
o 4
Pod::Html has been upgraded from version 1.2202 to 1.24.

A title for the HTML document will now be automatically generated by
default from a (s 1NAME(s0 section in the POD document, as it used to be
before the module was rewritten to use Pod::Simple::XHTML to do the
core of its job
[perl #110520] <https://rt.perl.org/Ticket/Display.html?id=110520>.
o 4
Pod::Perldoc has been upgraded from version 3.28 to 3.2801.
o 4
The podlators(fR distribution has been upgraded from version 4.09 to 4.10.

Man page references and function names now follow the Linux man page
formatting standards, instead of the Solaris standard.
o 4
POSIX has been upgraded from version 1.76 to 1.84.

Some more cautions were added about using locale specific functions in
threaded applications.
o 4
re has been upgraded from version 0.34 to 0.36.
o 4
Scalar::Util has been upgraded from version 1.46_02 to 1.50.
o 4
SelfLoader has been upgraded from version 1.23 to 1.25.
o 4
Socket has been upgraded from version 2.020_03 to 2.027.
o 4
sort has been upgraded from version 2.02 to 2.04.
o 4
Storable has been upgraded from version 2.62 to 3.08.
o 4
Sub::Util has been upgraded from version 1.48 to 1.49.
o 4
subs has been upgraded from version 1.02 to 1.03.
o 4
Sys::Hostname has been upgraded from version 1.20 to 1.22.
o 4
Term::ReadLine has been upgraded from version 1.16 to 1.17.
o 4
Test has been upgraded from version 1.30 to 1.31.
o 4
Test::Harness has been upgraded from version 3.38 to 3.42.
o 4
Test::Simple has been upgraded from version 1.302073 to 1.302133.
o 4
threads has been upgraded from version 2.15 to 2.22.

The documentation now better describes the problems that arise when
returning values from threads, and no longer warns about creating threads
in BEGIN(fR blocks.
[perl #96538] <https://rt.perl.org/Ticket/Display.html?id=96538>
o 4
threads::shared has been upgraded from version 1.56 to 1.58.
o 4
Tie::Array has been upgraded from version 1.06 to 1.07.
o 4
Tie::StdHandle has been upgraded from version 4.4 to 4.5.
o 4
Time::gmtime has been upgraded from version 1.03 to 1.04.
o 4
Time::HiRes has been upgraded from version 1.9741 to 1.9759.
o 4
Time::localtime has been upgraded from version 1.02 to 1.03.
o 4
Time::Piece has been upgraded from version 1.31 to 1.3204.
o 4
Unicode::Collate has been upgraded from version 1.19 to 1.25.
o 4
Unicode::Normalize has been upgraded from version 1.25 to 1.26.
o 4
Unicode::UCD has been upgraded from version 0.68 to 0.70.

The function num(fR now accepts an optional parameter to help in
diagnosing error returns.
o 4
User::grent has been upgraded from version 1.01 to 1.02.
o 4
User::pwent has been upgraded from version 1.00 to 1.01.
o 4
utf8 has been upgraded from version 1.19 to 1.21.
o 4
vars has been upgraded from version 1.03 to 1.04.
o 4
version has been upgraded from version 0.9917 to 0.9923.
o 4
VMS::DCLsym has been upgraded from version 1.08 to 1.09.
o 4
VMS::Stdio has been upgraded from version 2.41 to 2.44.
o 4
warnings has been upgraded from version 1.37 to 1.42.

It now includes new functions with names ending in _at_level(fR, allowing
callers to specify the exact call frame.
[perl #132468] <https://rt.perl.org/Ticket/Display.html?id=132468>
o 4
XS::Typemap has been upgraded from version 0.15 to 0.16.
o 4
XSLoader has been upgraded from version 0.27 to 0.30.

Its documentation now shows the use of __PACKAGE__(fR, and direct object
syntax for example DynaLoader(fR usage
[perl #132247] <https://rt.perl.org/Ticket/Display.html?id=132247>.

Platforms that use mod2fname(fR to edit the names of loadable
libraries now look for bootstrap (.bs) files under the correct,
non edited name.
Removed Modules and Pragmata

o 4
The VMS::stdio(fR compatibility shim has been removed.
Documentation

Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to perlbug@perl.org <mailto:perlbug@perl.org>.

Additionally, the following selected changes have been made:

perlapi

o 4
The API functions perl_parse()(fR, perl_run()(fR, and perl_destruct()(fR
are now documented comprehensively, where previously the only
documentation was a reference to the perlembed tutorial.
o 4
The documentation of newGIVENOP()(fR has been belatedly updated to
account for the removal of lexical $_.
o 4
The API functions newCONSTSUB()(fR and newCONSTSUB_flags()(fR are
documented much more comprehensively than before.

perldata

o 4
The section Truth and Falsehood in perlsyn has been moved into
perldata.

perldebguts

o 4
The description of the conditions under which DB::sub()(fR will be called
has been clarified.
[perl #131672] <https://rt.perl.org/Ticket/Display.html?id=131672>

perldiag

o 4
Variable length lookbehind not implemented in regex m/%s/ in perldiag

This now gives more ideas as to workarounds to the issue that was
introduced in Perl 5.18 (but not documented explicitly in its perldelta)
for the fact that some Unicode /i(fR rules cause a few sequences such as
 (?<!st)
to be considered variable length, and hence disallowed.
o 4
Use of state $_ is experimental in perldiag

This entry has been removed, as the experimental support of this construct was
removed in perl 5.24.0.
o 4
The diagnostic Initialization of state variables in list context
currently forbidden(fR has changed to Initialization of state variables
in list currently forbidden(fR, because list context initialization of
single aggregate state variables is now permitted.

perlembed

o 4
The examples in perlembed have been made more portable in the way
they exit, and the example that gets an exit code from the embedded Perl
interpreter now gets it from the right place.  The examples that pass
a constructed argv to Perl now show the mandatory null argv[argc](fR.
o 4
An example in perlembed used the string value of ERRSV(fR as a
format string when calling croak().  If that string contains format
codes such as %s this could crash the program.

This has been changed to a call to croak_sv().

An alternative could have been to supply a trivial format string:
  croak("%s", SvPV_nolen(ERRSV));
or as a special case for ERRSV(fR simply:
  croak(NULL);
perlfunc

o 4
There is now a note that warnings generated by built in functions are
documented in perldiag and warnings.
[perl #116080] <https://rt.perl.org/Ticket/Display.html?id=116080>
o 4
The documentation for the exists(fR operator no longer says that
autovivification behaviour may be fixed in a future release.
We've determined that we're not going to change the default behaviour.
[perl #127712] <https://rt.perl.org/Ticket/Display.html?id=127712>
o 4
A couple of small details in the documentation for the bless(fR operator
have been clarified.
[perl #124428] <https://rt.perl.org/Ticket/Display.html?id=124428>
o 4
The description of @INC hooks in the documentation for require(fR
has been corrected to say that filter subroutines receive a useless
first argument.
[perl #115754] <https://rt.perl.org/Ticket/Display.html?id=115754>
o 4
The documentation of ref(fR has been rewritten for clarity.
o 4
The documentation of use(fR now explains what syntactically qualifies
as a version number for its module version checking feature.
o 4
The documentation of warn(fR has been updated to reflect that since Perl
5.14 it has treated complex exception objects in a manner equivalent
to die(fR.
[perl #121372] <https://rt.perl.org/Ticket/Display.html?id=121372>
o 4
The documentation of die(fR and warn(fR has been revised for clarity.
o 4
The documentation of each(fR has been improved, with a slightly more
explicit description of the sharing of iterator state, and with
caveats regarding the fragility of while each loops.
[perl #132644] <https://rt.perl.org/Ticket/Display.html?id=132644>
o 4
Clarification to require(fR was added to explain the differences between
    require Foo::Bar;
    require "Foo/Bar.pm";
perlgit

o 4
The precise rules for identifying smoke me(fR branches are now stated.

perlguts

o 4
The section on reference counting in perlguts has been heavily revised,
to describe references in the way a programmer needs to think about them
rather than in terms of the physical data structures.
o 4
Improve documentation related to UTF 8 multibytes.

perlintern

o 4
The internal functions newXS_len_flags()(fR and newATTRSUB_x()(fR are
now documented.

perlobj

o 4
The documentation about DESTROY(fR methods has been corrected, updated,
and revised, especially in regard to how they interact with exceptions.
[perl #122753] <https://rt.perl.org/Ticket/Display.html?id=122753>

perlop

o 4
The description of the x(fR operator in perlop has been clarified.
[perl #132460] <https://rt.perl.org/Ticket/Display.html?id=132460>
o 4
perlop has been updated to note that qw(fR's whitespace rules differ
from that of split(fR's in that only ASCII whitespace is used.
o 4
The general explanation of operator precedence and associativity has
been corrected and clarified.
[perl #127391] <https://rt.perl.org/Ticket/Display.html?id=127391>
o 4
The documentation for the (e(fR referencing operator now explains the
unusual context that it supplies to its operand.
[perl #131061] <https://rt.perl.org/Ticket/Display.html?id=131061>

perlrequick

o 4
Clarifications on metacharacters and character classes

perlretut

o 4
Clarify metacharacters.

perlrun

o 4
Clarify the differences between  M and  m.
[perl #131518] <https://rt.perl.org/Ticket/Display.html?id=131518>

perlsec

o 4
The documentation about set id scripts has been updated and revised.
[perl #74142] <https://rt.perl.org/Ticket/Display.html?id=74142>
o 4
A section about using sudo(fR to run Perl scripts has been added.

perlsyn

o 4
The section Truth and Falsehood in perlsyn has been removed from
that document, where it didn't belong, and merged into the existing
paragraph on the same topic in perldata.
o 4
The means to disambiguate between code blocks and hash constructors,
already documented in perlref, are now documented in perlsyn too.
[perl #130958] <https://rt.perl.org/Ticket/Display.html?id=130958>

perluniprops

o 4
perluniprops has been updated to note that (ep{Word}(fR now includes
code points matching the (ep{Join_Control}(fR property.  The change to
the property was made in Perl 5.18, but not documented until now.  There
are currently only two code points that match this property U+200C (ZERO
WIDTH NON JOINER) and U+200D (ZERO WIDTH JOINER).
o 4
For each binary table or property, the documentation now includes which
characters in the range (ex00 (xFF(fR it matches, as well as a list of
the first few ranges of code points matched above that.

perlvar

o 4
The entry for $+ in perlvar has been expanded upon to describe handling of
multiply named capturing groups.

perlfunc, perlop, perlsyn

o 4
In various places, improve the documentation of the special cases
in the condition expression of a while loop, such as implicit defined(fR
and assignment to $_.
[perl #132644] <https://rt.perl.org/Ticket/Display.html?id=132644>
Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
New Diagnostics

New Errors

o 4
Can't goto into a given block

(F) A goto statement was executed to jump into the middle of a given(fR
block.  You can't get there from here.  See goto in perlfunc.
o 4
Can't goto into a binary or list expression

Use of goto(fR to jump into the parameter of a binary or list operator has
been prohibited, to prevent crashes and stack corruption.
[perl #130936] <https://rt.perl.org/Ticket/Display.html?id=130936>

You may only enter the first argument of an operator that takes a fixed
number of arguments, since this is a case that will not cause stack
corruption.
[perl #132854] <https://rt.perl.org/Ticket/Display.html?id=132854>

New Warnings

o 4
Old package separator used in string

(W syntax) You used the old package separator, ', in a variable
named inside a double quoted string; e.g., "In $names house".  This
is equivalent to "In $name::s house".  If you meant the former, put
a backslash before the apostrophe ("In $name(s house").
o 4
Locale '%s' contains (at least) the following characters which
have unexpected meanings: %s  The Perl program will use the expected
meanings in perldiag
Changes to Existing Diagnostics

o 4
A false positive warning that was issued when using a
numerically quantified sub pattern in a recursive regex has been
silenced. [perl #131868] <https://rt.perl.org/Public/Bug/Display.html?id=131868>
o 4
The warning about useless use of a concatenation operator in void context
is now generated for expressions with multiple concatenations, such as
$a.$b.$c(fR, which used to mistakenly not warn.
[perl #6997] <https://rt.perl.org/Ticket/Display.html?id=6997>
o 4
Warnings that a variable or subroutine masks earlier declaration in same
..., or that an our(fR variable has been redeclared, have been moved to a
new warnings category shadow.  Previously they were in category misc.
o 4
The deprecation warning from Sys::Hostname::hostname()(fR saying that
it doesn't accept arguments now states the Perl version in which the
warning will be upgraded to an error.
[perl #124349] <https://rt.perl.org/Ticket/Display.html?id=124349>
o 4
The perldiag entry for the error regarding a set id script has been
expanded to make clear that the error is reporting a specific security
vulnerability, and to advise how to fix it.
o 4
The Unable to flush stdout(fR error message was missing a trailing
newline. [debian #875361]
Utility Changes

perlbug

o 4
(  help(fR and (  version(fR options have been added.
Configuration and Compilation

o 4
C89 requirement

Perl has been documented as requiring a C89 compiler to build since October
1998.  A variety of simplifications have now been made to Perl's internals to
rely on the features specified by the C89 standard. We believe that this
internal change hasn't altered the set of platforms that Perl builds on, but
please report a bug if Perl now has new problems building on your platform.
o 4
On GCC, ( Werror=pointer arith(fR is now enabled by default,
disallowing arithmetic on void and function pointers.
o 4
Where an HTML version of the documentation is installed, the HTML
documents now use relative links to refer to each other.  Links from
the index page of perlipc to the individual section documents are
now correct.
[perl #110056] <https://rt.perl.org/Ticket/Display.html?id=110056>
o 4
lib/unicore/mktables now correctly canonicalizes the names of the
dependencies stored in the files it generates.

regen/mk_invlists.pl, unlike the other regen/W.pl scripts, used
$0 to name itself in the dependencies stored in the files it
generates.  It now uses a literal so that the path stored in the
generated files doesn't depend on how regen/mk_invlists.pl is
invoked.

This lack of canonical names could cause test failures in t/porting/regen.t.
[perl #132925] <https://rt.perl.org/Ticket/Display.html?id=132925>
o 4
New probes

HAS_BUILTIN_ADD_OVERFLOW 2
HAS_BUILTIN_MUL_OVERFLOW 2

HAS_BUILTIN_SUB_OVERFLOW 2

HAS_THREAD_SAFE_NL_LANGINFO_L 2

HAS_LOCALECONV_L 2

HAS_MBRLEN 2

HAS_MBRTOWC 2

HAS_MEMRCHR 2

HAS_NANOSLEEP 2

HAS_STRNLEN 2

HAS_STRTOLD_L 2

I_WCHAR 2
Testing

o 4
Testing of the XS APItest directory is now done in parallel, where
applicable.
o 4
Perl now includes a default .travis.yml file for Travis CI testing
on github mirrors.
[perl #123981] <https://rt.perl.org/Ticket/Display.html?id=123981>
o 4
The watchdog timer count in re/pat_psycho.t can now be overridden.

This test can take a long time to run, so there is a timer to keep
this in check (currently, 5 minutes). This commit adds checking
the environment variable PERL_TEST_TIME_OUT_FACTOR(fR; if set,
the time out setting is multiplied by its value.
o 4
harness no longer waits for 30 seconds when running t/io/openpid.t.
[perl #121028] <https://rt.perl.org/Ticket/Display.html?id=121028>
[perl #132867] <https://rt.perl.org/Ticket/Display.html?id=132867>
Packaging

For the past few years we have released perl using three different archive
formats: bzip (.bz2(fR), LZMA2 (.xz(fR) and gzip (.gz(fR). Since xz compresses
better and decompresses faster, and gzip is more compatible and uses less
memory, we have dropped the .bz2(fR archive format with this release.
(If this poses a problem, do let us know; see Reporting Bugs, below.)
Platform Support

Discontinued Platforms

PowerUX / Power MAX OS 4

Compiler hints and other support for these apparently long defunct
platforms has been removed.
Platform Specific Notes

CentOS 4

Compilation on CentOS 5 is now fixed.
Cygwin 4

A build with the quadmath library can now be done on Cygwin.
Darwin 4

Perl now correctly uses reentrant functions, like asctime_r(fR, on
versions of Darwin that have support for them.
FreeBSD 4

FreeBSD's /usr/share/mk/sys.mk specifies ( O2(fR for
architectures other than ARM and MIPS. By default, perl is now compiled
with the same optimization levels.
VMS 4

Several fix ups for configure.com, marking function VMS has
(or doesn't have).

CRTL features can now be set by embedders before invoking Perl by using
the decc$feature_set(fR and decc$feature_set_value(fR functions.
Previously any attempt to set features after image initialization were
ignored.
Windows 4
o 4

Support for compiling perl on Windows using Microsoft Visual Studio 2017
(containing Visual C .1v'++.1v'o 4
Visual C .1v'++.1v'language systems.
o 4
We now set $Config{libpth} correctly for 64 bit builds using Visual C .1v'++.1v'versions earlier than 14.1.
Internal Changes

o 4
A new optimisation phase has been added to the compiler,
optimize_optree()(fR, which does a top down scan of a complete optree
just before the peephole optimiser is run. This phase is not currently
hookable.
o 4
An OP_MULTICONCAT(fR op has been added. At optimize_optree()(fR time, a
chain of OP_CONCAT(fR and OP_CONST(fR ops, together optionally with an
OP_STRINGIFY(fR and/or OP_SASSIGN(fR, are combined into a single
OP_MULTICONCAT(fR op. The op is of type UNOP_AUX(fR, and the aux array
contains the argument count, plus a pointer to a constant string and a set
of segment lengths. For example with
    my $x = "foo=$foo, bar=$bar(n";
the constant string would be "foo=, bar=(n" and the segment lengths
would be (4,6,1). If the string contains characters such as (ex80(fR, whose
representation changes under utf8, two sets of strings plus lengths are
precomputed and stored.
o 4
Direct access to PL_keyword_plugin(fR is not
safe in the presence of multithreading. A new
wrap_keyword_plugin(fR function has been
added to allow XS modules to safely define custom keywords even when
loaded from a thread, analogous to PL_check(fR /
wrap_op_checker(fR.
o 4
The PL_statbuf(fR interpreter variable has been removed.
o 4
The deprecated function to_utf8_case()(fR, accessible from XS code, has
been removed.
o 4
A new function
is_utf8_invariant_string_loc()(fR
has been added that is like
is_utf8_invariant_string()(fR
but takes an extra pointer parameter into which is stored the location
of the first variant character, if any are found.
o 4
A new function, Perl_langinfo()(fR has been
added.  It is an (almost) drop in replacement for the system
nl_langinfo(3), but works on platforms that lack that; as well as
being more thread safe, and hiding some gotchas with locale handling
from the caller.  Code that uses this, needn't use localeconv(3)
(and be affected by the gotchas) to find the decimal point, thousands
separator, or currency symbol.  See Perl_langinfo in perlapi.
o 4
A new API function sv_rvunweaken()(fR has
been added to complement sv_rvweaken()(fR.
The implementation was taken from unweaken in Scalar::Util.
o 4
A new flag, SORTf_UNSTABLE(fR, has been added. This will allow a
future commit to make mergesort unstable when the user specifies Xno
sort stableX, since it has been decided that mergesort should remain
stable by default.
o 4
XS modules can now automatically get reentrant versions of system
functions on threaded perls.

By adding
    #define PERL_REENTRANT
near the beginning of an XS(fR file, it will be compiled so that
whatever reentrant functions perl knows about on that system will
automatically and invisibly be used instead of the plain, non reentrant
versions.  For example, if you write getpwnam()(fR in your code, on a
system that has getpwnam_r()(fR all calls to the former will be translated
invisibly into the latter.  This does not happen except on threaded
perls, as they aren't needed otherwise.  Be aware that which functions
have reentrant versions varies from system to system.
o 4
The PERL_NO_OP_PARENT(fR build define is no longer supported, which means
that perl is now always built with PERL_OP_PARENT(fR enabled.
o 4
The format and content of the non utf8 transliteration table attached to
the op_pv(fR field of OP_TRANS(fR/OP_TRANSR(fR ops has changed. It's now a
struct OPtrans_map(fR.
o 4
A new compiler #define(fR, dTHX_DEBUGGING(fR. has been added.  This is
useful for XS or C code that only need the thread context because their
debugging statements that get compiled only under ( DDEBUGGING(fR need
one.
o 4
A new API function Perl_setlocale in perlapi has been added.
o 4
sync_locale in perlapi has been revised to return a boolean as to
whether the system was using the global locale or not.
o 4
A new kind of magic scalar, called a nonelem scalar, has been introduced.
It is stored in an array to denote a non existent element, whenever such an
element is accessed in a potential lvalue context.  It replaces the
existing defelem (deferred element) magic wherever this is possible,
being significantly more efficient.  This means that
some_sub($sparse_array[$nonelem])(fR no longer has to create a new magic
defelem scalar each time, as long as the element is within the array.

It partially fixes the rare bug of deferred elements getting out of synch
with their arrays when the array is shifted or unshifted.
[perl #132729] <https://rt.perl.org/Ticket/Display.html?id=132729>
Selected Bug Fixes

o 4
List assignment (aassign(fR) could in some rare cases allocate an
entry on the mortals stack and leave the entry uninitialized, leading to
possible crashes.
[perl #131570] <https://rt.perl.org/Ticket/Display.html?id=131570>
o 4
Attempting to apply an attribute to an our(fR variable where a
function of that name already exists could result in a NULL pointer
being supplied where an SV was expected, crashing perl.
[perl #131597] <https://rt.perl.org/Ticket/Display.html?id=131597>
o 4
split  (W(C' now correctly handles the argument being split when in the
scope of the unicode_strings(fR feature. Previously, when a string using the single byte internal
representation contained characters that are whitespace by Unicode rules but
not by ASCII rules, it treated those characters as part of fields rather
than as field separators.
[perl #130907] <https://rt.perl.org/Ticket/Display.html?id=130907>
o 4
Several built in functions previously had bugs that could cause them to
write to the internal stack without allocating room for the item being
written. In rare situations, this could have led to a crash. These bugs have
now been fixed, and if any similar bugs are introduced in future, they will
be detected automatically in debugging builds.

These internal stack usage checks introduced are also done
by the entersub(fR operator when calling XSUBs.  This means we can
report which XSUB failed to allocate enough stack space.
[perl #131975] <https://rt.perl.org/Public/Bug/Display.html?id=131975>
o 4
Using a symbolic ref with postderef syntax as the key in a hash lookup was
yielding an assertion failure on debugging builds.
[perl #131627] <https://rt.perl.org/Ticket/Display.html?id=131627>
o 4
Array and hash variables whose names begin with a caret now admit indexing
inside their curlies when interpolated into strings, as in "${^CAPTURE[0]}" to index @{^CAPTURE}(fR.
[perl #131664] <https://rt.perl.org/Ticket/Display.html?id=131664>
o 4
Fetching the name of a glob that was previously UTF 8 but wasn't any
longer would return that name flagged as UTF 8.
[perl #131263] <https://rt.perl.org/Ticket/Display.html?id=131263>
o 4
The perl sprintf()(fR function (via the underlying C function
Perl_sv_vcatpvfn_flags()(fR) has been heavily reworked to fix many minor
bugs, including the integer wrapping of large width and precision
specifiers and potential buffer overruns. It has also been made faster in
many cases.
o 4
Exiting from an eval(fR, whether normally or via an exception, now always
frees temporary values (possibly calling destructors) before setting
$@. For example:
    sub DESTROY { eval { die "died in DESTROY"; } }
    eval { bless []; };
    # $@ used to be equal to "died in DESTROY" here; its now "".

o 4
Fixed a duplicate symbol failure with ( flto  mieee fp(fR builds.
pp.c defined _LIB_VERSION(fR which ( lieee(fR already defines.
[perl #131786] <https://rt.perl.org/Ticket/Display.html?id=131786>
o 4
The tokenizer no longer consumes the exponent part of a floating
point number if it's incomplete.
[perl #131725] <https://rt.perl.org/Ticket/Display.html?id=131725>
o 4
On non threaded builds, for m/$null/(fR where $null is an empty
string is no longer treated as if the /o(fR flag was present when the
previous matching match operator included the /o(fR flag.  The
rewriting used to implement this behavior could confuse the
interpreter.  This matches the behaviour of threaded builds.
[perl #124368] <https://rt.perl.org/Ticket/Display.html?id=124368>
o 4
Parsing a sub(fR definition could cause a use after free if the sub(fR
keyword was followed by whitespace including newlines (and comments.)
[perl #131836] <https://rt.perl.org/Public/Bug/Display.html?id=131836>
o 4
The tokenizer now correctly adjusts a parse pointer when skipping
whitespace in a ${identifier}(fR construct.
[perl #131949] <https://rt.perl.org/Public/Bug/Display.html?id=131949>
o 4
Accesses to ${^LAST_FH}(fR no longer assert after using any of a
variety of I/O operations on a non glob.
[perl #128263] <https://rt.perl.org/Public/Bug/Display.html?id=128263>
o 4
The XS level Copy()(fR, Move()(fR, Zero()(fR macros and their variants now
assert if the pointers supplied are NULL(fR.  ISO C considers
supplying NULL pointers to the functions these macros are built upon
as undefined behaviour even when their count parameters are zero.
Based on these assertions and the original bug report three macro
calls were made conditional.
[perl #131746] <https://rt.perl.org/Public/Bug/Display.html?id=131746>
[perl #131892] <https://rt.perl.org/Public/Bug/Display.html?id=131892>
o 4
Only the =(fR operator is permitted for defining defaults for
parameters in subroutine signatures.  Previously other assignment
operators, e.g. +=(fR, were also accidentally permitted.
[perl #131777] <https://rt.perl.org/Public/Bug/Display.html?id=131777>
o 4
Package names are now always included in :prototype(fR warnings
[perl #131833] <https://rt.perl.org/Public/Bug/Display.html?id=131833>
o 4
The je_old_stack_hwm(fR field, previously only found in the jmpenv(fR
structure on debugging builds, has been added to non debug builds as
well. This fixes an issue with some CPAN modules caused by the size of
this structure varying between debugging and non debugging builds.
[perl #131942] <https://rt.perl.org/Public/Bug/Display.html?id=131942>
o 4
The arguments to the ninstr()(fR macro are now correctly parenthesized.
o 4
A NULL pointer dereference in the S_regmatch()(fR function has been
fixed.
[perl #132017] <https://rt.perl.org/Public/Bug/Display.html?id=132017>
o 4
Calling exec PROGRAM LIST with an empty LIST(fR
has been fixed.  This should call execvp()(fR with an empty argv(fR array
(containing only the terminating NULL(fR pointer), but was instead just
returning false (and not setting $!).
[perl #131730] <https://rt.perl.org/Public/Bug/Display.html?id=131730>
o 4
The gv_fetchmeth_sv(fR C function stopped working properly in Perl 5.22 when
fetching a constant with a UTF 8 name if that constant subroutine was stored in
the stash as a simple scalar reference, rather than a full typeglob.  This has
been corrected.
o 4
Single letter debugger commands followed by an argument which starts with
punctuation  (e.g. p$^V(fR and x@ARGV(fR) now work again.  They had been
wrongly requiring a space between the command and the argument.
[perl #120174] <https://rt.perl.org/Public/Bug/Display.html?id=120174>
o 4
splice now throws an exception
(Modification of a read only value attempted) when modifying a read only
array.  Until now it had been silently modifying the array.  The new behaviour
is consistent with the behaviour of push and
unshift.
[perl #131000] <https://rt.perl.org/Public/Bug/Display.html?id=131000>
o 4
stat()(fR, lstat()(fR, and file test operators now fail if given a
filename containing a nul character, in the same way that open()(fR
already fails.
o 4
stat()(fR, lstat()(fR, and file test operators now reliably set $! when
failing due to being applied to a closed or otherwise invalid file handle.
o 4
File test operators for Unix permission bits that don't exist on a
particular platform, such as ( k(fR (sticky bit) on Windows, now check that
the file being tested exists before returning the blanket false result,
and yield the appropriate errors if the argument doesn't refer to a file.
o 4
Fixed a 'read before buffer' overrun when parsing a range starting with
(eN{}(fR at the beginning of the character set for the transliteration
operator.
[perl #132245] <https://rt.perl.org/Ticket/Display.html?id=132245>
o 4
Fixed a leaked scalar when parsing an empty (eN{}(fR at compile time.
[perl #132245] <https://rt.perl.org/Ticket/Display.html?id=132245>
o 4
Calling do $path(fR on a directory or block device now yields a meaningful
error code in $!.
[perl #125774] <https://rt.perl.org/Ticket/Display.html?id=125774>
o 4
Regexp substitution using an overloaded replacement value that provides
a tainted stringification now correctly taints the resulting string.
[perl #115266] <https://rt.perl.org/Ticket/Display.html?id=115266>
o 4
Lexical sub declarations in do(fR blocks such as do { my sub lex; 123 }(fR
could corrupt the stack, erasing items already on the stack in the
enclosing statement.  This has been fixed.
[perl #132442] <https://rt.perl.org/Ticket/Display.html?id=132442>
o 4
pack(fR and unpack(fR can now handle repeat counts and lengths that
exceed two billion.
[perl #119367] <https://rt.perl.org/Ticket/Display.html?id=119367>
o 4
Digits past the radix point in octal and binary floating point literals
now have the correct weight on platforms where a floating point
significand doesn't fit into an integer type.
o 4
The canonical truth value no longer has a spurious special meaning as a
callable subroutine.  It used to be a magic placeholder for a missing
import(fR or unimport(fR method, but is now treated like any other string
1.
[perl #126042] <https://rt.perl.org/Ticket/Display.html?id=126042>
o 4
system(fR now reduces its arguments to strings in the parent process, so
any effects of stringifying them (such as overload methods being called
or warnings being emitted) are visible in the way the program expects.
[perl #121105] <https://rt.perl.org/Ticket/Display.html?id=121105>
o 4
The readpipe()(fR built in function now checks at compile time that
it has only one parameter expression, and puts it in scalar context,
thus ensuring that it doesn't corrupt the stack at runtime.
[perl #4574] <https://rt.perl.org/Ticket/Display.html?id=4574>
o 4
sort(fR now performs correct reference counting when aliasing $a and
$b, thus avoiding premature destruction and leakage of scalars if they
are re aliased during execution of the sort comparator.
[perl #92264] <https://rt.perl.org/Ticket/Display.html?id=92264>
o 4
reverse(fR with no operand, reversing $_ by default, is no longer in
danger of corrupting the stack.
[perl #132544] <https://rt.perl.org/Ticket/Display.html?id=132544>
o 4
exec(fR, system(fR, et al are no longer liable to have their argument
lists corrupted by reentrant calls and by magic such as tied scalars.
[perl #129888] <https://rt.perl.org/Ticket/Display.html?id=129888>
o 4
Perl's own malloc(fR no longer gets confused by attempts to allocate
more than a gigabyte on a 64 bit platform.
[perl #119829] <https://rt.perl.org/Ticket/Display.html?id=119829>
o 4
Stacked file test operators in a sort comparator expression no longer
cause a crash.
[perl #129347] <https://rt.perl.org/Ticket/Display.html?id=129347>
o 4
An identity tr///(fR transformation on a reference is no longer mistaken
for that reference for the purposes of deciding whether it can be
assigned to.
[perl #130578] <https://rt.perl.org/Ticket/Display.html?id=130578>
o 4
Lengthy hexadecimal, octal, or binary floating point literals no
longer cause undefined behaviour when parsing digits that are of such
low significance that they can't affect the floating point value.
[perl #131894] <https://rt.perl.org/Ticket/Display.html?id=131894>
o 4
open $$scalarref...(fR and similar invocations no longer leak the file
handle.
[perl #115814] <https://rt.perl.org/Ticket/Display.html?id=115814>
o 4
Some convoluted kinds of regexp no longer cause an arithmetic overflow
when compiled.
[perl #131893] <https://rt.perl.org/Ticket/Display.html?id=131893>
o 4
The default typemap, by avoiding newGVgen(fR, now no longer leaks when
XSUBs return file handles (PerlIO W(fR or FILE W(fR).
[perl #115814] <https://rt.perl.org/Ticket/Display.html?id=115814>
o 4
Creating a BEGIN(fR block as an XS subroutine with a prototype no longer
crashes because of the early freeing of the subroutine.
o 4
The printf(fR format specifier %.0f(fR no longer rounds incorrectly
[perl #47602] <https://rt.perl.org/Ticket/Display.html?id=47602>,
and now shows the correct sign for a negative zero.
o 4
Fixed an issue where the error Scalar value @arrayname[0] better
written as $arrayname(fR would give an error Cannot printf Inf with c(W(C'
when arrayname starts with Inf(fR.
[perl #132645] <https://rt.perl.org/Ticket/Display.html?id=132645>
o 4
The Perl implementation of getcwd()(fR in Cwd(fR in the PathTools
distribution now behaves the same as XS implementation on errors: it
returns an error, and sets $!.
[perl #132648] <https://rt.perl.org/Ticket/Display.html?id=132648>
o 4
Vivify array elements when putting them on the stack.
Fixes [perl #8910] <https://rt.perl.org/Ticket/Display.html?id=8910>
(reported in April 2002).
o 4
Fixed parsing of braced subscript after parens. Fixes
[perl #8045] <https://rt.perl.org/Ticket/Display.html?id=8045>
(reported in December 2001).
o 4
tr/non_utf8/long_non_utf8/c(fR could give the wrong results when the
length of the replacement character list was greater than 0x7fff.
o 4
tr/non_utf8/non_utf8/cd(fR failed to add the implied
(ex{100} (x{7fffffff}(fR to the search character list.
o 4
Compilation failures within perl within perl constructs, such as with
string interpolation and the right part of s///e(fR, now cause
compilation to abort earlier.

Previously compilation could continue in order to report other errors,
but the failed sub parse could leave partly parsed constructs on the
parser shift reduce stack, confusing the parser, leading to perl
crashes.
[perl #125351] <https://rt.perl.org/Ticket/Display.html?id=125351>
o 4
On threaded perls where the decimal point (radix) character is not a
dot, it has been possible for a race to occur between threads when one
needs to use the real radix character (such as with sprintf(fR).  This has
now been fixed by use of a mutex on systems without thread safe locales,
and the problem just doesn't come up on those with thread safe locales.
o 4
Errors while compiling a regex character class could sometime trigger an
assertion failure.
[perl #132163] <https://rt.perl.org/Ticket/Display.html?id=132163>
Acknowledgements

Perl 5.28.0 represents approximately 13 months of development since Perl
5.26.0 and contains approximately 730,000 lines of changes across 2,200
files from 77 authors.

Excluding auto generated files, documentation and release tools, there were
approximately 580,000 lines of changes to 1,300 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.28.0:

Aaron Crane, Abigail, A (uW4/10)'ESavca, Andrew Fresh, Andy Dougherty, Andy Lester, Aristotle Pagaltzis, Ask
Bjorn Hansen, Chris 'BinGOs' Williams, Craig A. Berry, Dagfinn Ilmari
Mannsa(k: ((n(.wu+u )/2u' .3n'(z°.3n'|(n:u'Dmitry Ulanov, Dominic Hargreaves, E. Choroba, Eric Herman, Eugen Konkov,
Father Chrysostomos, Gene Sullivan, George Hartzell, Graham Knop, Harald
Jo(k: ((n(.wuW8/10 +.1m+)' 'z..2m+'.|(n:u'Keenan, Jarkko Hietaniemi, Jerry D. Hedden, J. Nick Koston, John Lightsey,
John Peacock, John P. Linderman, John SJ Anderson, Karen Etheridge, Karl
Williamson, Ken Brown, Ken Cotterill, Leon Timmermans, Lukas Mai, Marco
Fontani, Marc Philip Werner, Matthew Horsfall, Neil Bowers, Nicholas Clark,
Nicolas R., Niko Tyni, Pali, Paul Marquess, Peter John Acklam, Reini Urban,
Renee Baecker, Ricardo Signes, Robin Barker, Sawyer X, Scott Lanning, Sergey
Aleynikov, Shirakata Kentaro, Shoichi Kaji, Slaven Rezic, Smylers, Steffen
Mu(k: ((n(.wuW8/10 +.1m+)' 'z..2m+'.|(n:u'Konojacki, Tom Hukins, Tom Wyant, Tony Cook, Vitali Peil, Yves Orton,
Zefram.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the AUTHORS file in the Perl source distribution.
Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at <https://rt.perl.org/> .  There may also be information at
<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of perl  V(fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
(s 1SECURITY VULNERABILITY CONTACT INFORMATION(s0 in perlsec
for details of how to report the issue.
Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the perlthanks(fR program:
    perlthanks
This will send an email to the Perl 5 Porters list with your show of thanks.
SEE ALSO

The Changes file for an explanation of how to view exhaustive details on
what changed.

The INSTALL file for how to build Perl.

The README file for general stuff.

The Artistic and Copying files for copyright information.

