
{
NAME
perlapi   autogenerated documentation for the perl public API
DESCRIPTION
This file contains the documentation of the perl public API generated by
embed.pl, specifically a listing of functions, macros, flags, and variables
that may be used by extension writers.  At the end
is a list of functions which have yet to be documented.  The interfaces of
those are subject to change without notice.  Anything not listed here is
not part of the public API, and should not be used by extension writers at
all.  For these reasons, blindly using functions listed in proto.h is to be
avoided when writing extensions.

In Perl, unlike C, a string of characters may generally contain embedded
NUL(fR characters.  Sometimes in the documentation a Perl string is referred
to as a buffer to distinguish it from a C string, but sometimes they are
both just referred to as strings.

Note that all Perl API global variables must be referenced with the PL_(fR
prefix.  Again, those not listed here are not to be used by extension writers,
and can be changed or removed without notice; same with macros.
Some macros are provided for compatibility with the older,
unadorned names, but this support may be disabled in a future release.

Perl was originally written to handle US ASCII only (that is characters
whose ordinal numbers are in the range 0   127).
And documentation and comments may still use the term ASCII, when
sometimes in fact the entire range from 0   255 is meant.

The non ASCII characters below 256 can have various meanings, depending on
various things.  (See, most notably, perllocale.)  But usually the whole
range can be referred to as ISO 8859 1.  Often, the term Latin 1 (or
Latin1) is used as an equivalent for ISO 8859 1.  But some people treat
Latin1 as referring just to the characters in the range 128 through 255, or
somethimes from 160 through 255.
This documentation uses Latin1 and Latin 1 to refer to all 256 characters.

Note that Perl can be compiled and run under either ASCII or EBCDIC (See
perlebcdic).  Most of the documentation (and even comments in the code)
ignore the EBCDIC possibility.  
For almost all purposes the differences are transparent.
As an example, under EBCDIC,
instead of UTF 8, UTF EBCDIC is used to encode Unicode strings, and so
whenever this documentation refers to utf8(fR
(and variants of that name, including in function names),
it also (essentially transparently) means UTF EBCDIC(fR.
But the ordinals of characters differ between ASCII, EBCDIC, and
the UTF  encodings, and a string encoded in UTF EBCDIC may occupy a different
number of bytes than in UTF 8.

The listing below is alphabetical, case insensitive.
Array Manipulation Functions

av_clear 8
Frees the all the elements of an array, leaving it empty.
The XS equivalent of @array = ()(fR.  See also av_undef.

Note that it is possible that the actions of a destructor called directly
or indirectly by freeing an element of the array could cause the reference
count of the array itself to be reduced (e.g. by deleting an entry in the
symbol table). So it is a possibility that the AV could have been freed
(or even reallocated) on return from the call unless you hold a reference
to it.
        void    av_clear(AV Wav)

av_create_and_push 8
NOTE: this function is experimental and may change or be
removed without notice.

Push an SV onto the end of the array, creating the array if necessary.
A small internal helper function to remove a commonly duplicated idiom.
        void    av_create_and_push(AV WWconst avp,
                                   SV Wconst val)

av_create_and_unshift_one 8
NOTE: this function is experimental and may change or be
removed without notice.

Unshifts an SV onto the beginning of the array, creating the array if
necessary.
A small internal helper function to remove a commonly duplicated idiom.
        SVWW    av_create_and_unshift_one(AV WWconst avp,
                                          SV Wconst val)

av_delete 8
Deletes the element indexed by key(fR from the array, makes the element
mortal, and returns it.  If flags(fR equals G_DISCARD(fR, the element is
freed and NULL is returned. NULL is also returned if key(fR is out of
range.

Perl equivalent: splice(@myarray, $key, 1, undef)(fR (with the
splice(fR in void context if G_DISCARD(fR is present).
        SVW     av_delete(AV Wav, SSize_t key, I32 flags)

av_exists 8
Returns true if the element indexed by key(fR has been initialized.

This relies on the fact that uninitialized array elements are set to
NULL(fR.

Perl equivalent: exists($myarray[$key])(fR.
        bool    av_exists(AV Wav, SSize_t key)

av_extend 8
Pre extend an array.  The key(fR is the index to which the array should be
extended.
        void    av_extend(AV Wav, SSize_t key)

av_fetch 8
Returns the SV at the specified index in the array.  The key(fR is the
index.  If lval is true, you are guaranteed to get a real SV back (in case
it wasn't real before), which you can then modify.  Check that the return
value is non null before dereferencing it to a SVW(fR.

See Understanding the Magic of Tied Hashes and Arrays in perlguts for
more information on how to use this function on tied arrays.

The rough perl equivalent is $myarray[$key].
        SVWW    av_fetch(AV Wav, SSize_t key, I32 lval)

AvFILL 8
Same as av_top_index()(fR.  Deprecated, use av_top_index()(fR instead.
        int     AvFILL(AVW av)

av_fill 8
Set the highest index in the array to the given number, equivalent to
Perl's $#array = $fill;(fR.

The number of elements in the array will be fill + 1(fR after
av_fill()(fR returns.  If the array was previously shorter, then the
additional elements appended are set to NULL.  If the array
was longer, then the excess elements are freed.  av_fill(av,  1)(fR is
the same as av_clear(av)(fR.
        void    av_fill(AV Wav, SSize_t fill)

av_len 8
Same as av_top_index.  Note that, unlike what the name implies, it returns
the highest index in the array, so to get the size of the array you need to use
av_len(av) + 1(fR.  This is unlike sv_len, which returns what you would
expect.
        SSize_t av_len(AV Wav)

av_make 8
Creates a new AV and populates it with a list of SVs.  The SVs are copied
into the array, so they may be freed after the call to av_make(fR.  The new AV
will have a reference count of 1.

Perl equivalent: my @new_array = ($scalar1, $scalar2, $scalar3...);(fR
        AVW     av_make(SSize_t size, SV WWstrp)

av_pop 8
Removes one SV from the end of the array, reducing its size by one and
returning the SV (transferring control of one reference count) to the
caller.  Returns &PL_sv_undef if the array is empty.

Perl equivalent: pop(@myarray);(fR
        SVW     av_pop(AV Wav)

av_push 8
Pushes an SV (transferring control of one reference count) onto the end of the
array.  The array will grow automatically to accommodate the addition.

Perl equivalent: push @myarray, $val;(fR.
        void    av_push(AV Wav, SV Wval)

av_shift 8
Removes one SV from the start of the array, reducing its size by one and
returning the SV (transferring control of one reference count) to the
caller.  Returns &PL_sv_undef if the array is empty.

Perl equivalent: shift(@myarray);(fR
        SVW     av_shift(AV Wav)

av_store 8
Stores an SV in an array.  The array index is specified as key(fR.  The
return value will be NULL(fR if the operation failed or if the value did not
need to be actually stored within the array (as in the case of tied
arrays).  Otherwise, it can be dereferenced
to get the SVW(fR that was stored
there (= val(fR)).

Note that the caller is responsible for suitably incrementing the reference
count of val(fR before the call, and decrementing it if the function
returned NULL(fR.

Approximate Perl equivalent: splice(@myarray, $key, 1, $val)(fR.

See Understanding the Magic of Tied Hashes and Arrays in perlguts for
more information on how to use this function on tied arrays.
        SVWW    av_store(AV Wav, SSize_t key, SV Wval)

av_tindex 8
Same as av_top_index()(fR.
        int     av_tindex(AVW av)

av_top_index 8
Returns the highest index in the array.  The number of elements in the
array is av_top_index(av) + 1(fR.  Returns  1 if the array is empty.

The Perl equivalent for this is $#myarray.

(A slightly shorter form is av_tindex(fR.)
        SSize_t av_top_index(AV Wav)

av_undef 8
Undefines the array. The XS equivalent of undef(@array)(fR.

As well as freeing all the elements of the array (like av_clear()(fR), this
also frees the memory used by the av to store its list of scalars.

See av_clear for a note about the array possibly being invalid on
return.
        void    av_undef(AV Wav)

av_unshift 8
Unshift the given number of undef(fR values onto the beginning of the
array.  The array will grow automatically to accommodate the addition.

Perl equivalent: unshift @myarray, ((undef) x $num);(fR
        void    av_unshift(AV Wav, SSize_t num)

get_av 8
Returns the AV of the specified Perl global or package array with the given
name (so it won't work on lexical variables).  flags(fR are passed 
to gv_fetchpv(fR.  If GV_ADD(fR is set and the
Perl variable does not exist then it will be created.  If flags(fR is zero
and the variable does not exist then NULL is returned.

Perl equivalent: @{"$name"}(fR.

NOTE: the perl_ form of this function is deprecated.
        AVW     get_av(const char Wname, I32 flags)

newAV 8
Creates a new AV.  The reference count is set to 1.

Perl equivalent: my @array;(fR.
        AVW     newAV()

sortsv 8
In place sort an array of SV pointers with the given comparison routine.

Currently this always uses mergesort.  See "sortsv_flags" for a more
flexible routine.
        void    sortsv(SVWW array, size_t num_elts,
                       SVCOMPARE_t cmp)

Callback Functions

call_argv 8
Performs a callback to the specified named and package scoped Perl subroutine 
with argv(fR (a NULL(fR terminated array of strings) as arguments.  See
perlcall.

Approximate Perl equivalent: &{"$sub_name"}(@$argv)(fR.

NOTE: the perl_ form of this function is deprecated.
        I32     call_argv(const charW sub_name, I32 flags,
                          charWW argv)

call_method 8
Performs a callback to the specified Perl method.  The blessed object must
be on the stack.  See perlcall.

NOTE: the perl_ form of this function is deprecated.
        I32     call_method(const charW methname, I32 flags)

call_pv 8
Performs a callback to the specified Perl sub.  See perlcall.

NOTE: the perl_ form of this function is deprecated.
        I32     call_pv(const charW sub_name, I32 flags)

call_sv 8
Performs a callback to the Perl sub specified by the SV.

If neither the G_METHOD(fR nor G_METHOD_NAMED(fR flag is supplied, the
SV may be any of a CV, a GV, a reference to a CV, a reference to a GV
or SvPV(sv)(fR will be used as the name of the sub to call.

If the G_METHOD(fR flag is supplied, the SV may be a reference to a CV or
SvPV(sv)(fR will be used as the name of the method to call.

If the G_METHOD_NAMED(fR flag is supplied, SvPV(sv)(fR will be used as
the name of the method to call.

Some other values are treated specially for internal use and should
not be depended on.

See perlcall.

NOTE: the perl_ form of this function is deprecated.
        I32     call_sv(SVW sv, volatile I32 flags)

ENTER 8
Opening bracket on a callback.  See "LEAVE" and perlcall.
                ENTER;

ENTER_with_name(name) 8
Same as "ENTER", but when debugging is enabled it also associates the
given literal string with the new scope.
                ENTER_with_name(name);

eval_pv 8
Tells Perl to eval(fR the given string in scalar context and return an SVW result.

NOTE: the perl_ form of this function is deprecated.
        SVW     eval_pv(const charW p, I32 croak_on_error)

eval_sv 8
Tells Perl to eval(fR the string in the SV.  It supports the same flags
as call_sv(fR, with the obvious exception of G_EVAL(fR.  See perlcall.

NOTE: the perl_ form of this function is deprecated.
        I32     eval_sv(SVW sv, I32 flags)

FREETMPS 8
Closing bracket for temporaries on a callback.  See "SAVETMPS" and
perlcall.
                FREETMPS;

LEAVE 8
Closing bracket on a callback.  See "ENTER" and perlcall.
                LEAVE;

LEAVE_with_name(name) 8
Same as "LEAVE", but when debugging is enabled it first checks that the
scope has the given name. name(fR must be a literal string.
                LEAVE_with_name(name);

SAVETMPS 8
Opening bracket for temporaries on a callback.  See "FREETMPS" and
perlcall.
                SAVETMPS;

Character case changing

Perl uses full Unicode case mappings.  This means that converting a single
character to another case may result in a sequence of more than one character.
For example, the uppercase of (W8(fR (LATIN SMALL LETTER SHARP S) is the two
character sequence SS(fR.  This presents some complications   The lowercase of
all characters in the range 0..255 is a single character, and thus
"toLOWER_L1" is furnished.  But, toUPPER_L1(fR can't exist, as it couldn't
return a valid result for all legal inputs.  Instead "toUPPER_uvchr" has
an API that does allow every possible legal result to be returned.)  Likewise
no other function that is crippled by not being able to give the correct
results for the full range of possible inputs has been implemented here.
toFOLD 8
Converts the specified character to foldcase.  If the input is anything but an
ASCII uppercase character, that input character itself is returned.  Variant
toFOLD_A(fR is equivalent.  (There is no equivalent to_FOLD_L1(fR for the full
Latin1 range, as the full generality of toFOLD_uvchr is needed there.)
        U8      toFOLD(U8 ch)

toFOLD_utf8 8
This is like "toFOLD_utf8_safe", but doesn't have the e(fR
parameter  The function therefore can't check if it is reading
beyond the end of the string.  Starting in Perl v5.30, it will take the e(fR
parameter, becoming a synonym for toFOLD_utf8_safe(fR.  At that time every
program that uses it will have to be changed to successfully compile.  In the
meantime, the first runtime call to toFOLD_utf8(fR from each call point in the
program will raise a deprecation warning, enabled by default.  You can convert
your program now to use toFOLD_utf8_safe(fR, and avoid the warnings, and get an
extra measure of protection, or you can wait until v5.30, when you'll be forced
to add the e(fR parameter.
        UV      toFOLD_utf8(U8W p, U8W s, STRLENW lenp)

toFOLD_utf8_safe 8
Converts the first UTF 8 encoded character in the sequence starting at p(fR and
extending no further than e   1(fR to its foldcase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the foldcase version may be longer than the original character.

The first code point of the foldcased version is returned
(but note, as explained at the top of this section, that there may be more).

The suffix _safe(fR in the function's name indicates that it will not attempt
to read beyond e   1(fR, provided that the constraint s < e(fR is
true (this is asserted for in ( DDEBUGGING(fR builds).  If the UTF 8 for the
input character is malformed in some way, the program may croak, or the
function may return the REPLACEMENT CHARACTER, at the discretion of the
implementation, and subject to change in future releases.
        UV      toFOLD_utf8_safe(U8W p, U8W e, U8W s,
                                 STRLENW lenp)

toFOLD_uvchr 8
Converts the code point cp(fR to its foldcase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the foldcase version may be longer than the original character.

The first code point of the foldcased version is returned
(but note, as explained at the top of this section, that there may be more).
        UV      toFOLD_uvchr(UV cp, U8W s, STRLENW lenp)

toLOWER 8
Converts the specified character to lowercase.  If the input is anything but an
ASCII uppercase character, that input character itself is returned.  Variant
toLOWER_A(fR is equivalent.
        U8      toLOWER(U8 ch)

toLOWER_L1 8
Converts the specified Latin1 character to lowercase.  The results are
undefined if the input doesn't fit in a byte.
        U8      toLOWER_L1(U8 ch)

toLOWER_LC 8
Converts the specified character to lowercase using the current locale's rules,
if possible; otherwise returns the input character itself.
        U8      toLOWER_LC(U8 ch)

toLOWER_utf8 8
This is like "toLOWER_utf8_safe", but doesn't have the e(fR
parameter  The function therefore can't check if it is reading
beyond the end of the string.  Starting in Perl v5.30, it will take the e(fR
parameter, becoming a synonym for toLOWER_utf8_safe(fR.  At that time every
program that uses it will have to be changed to successfully compile.  In the
meantime, the first runtime call to toLOWER_utf8(fR from each call point in the
program will raise a deprecation warning, enabled by default.  You can convert
your program now to use toLOWER_utf8_safe(fR, and avoid the warnings, and get an
extra measure of protection, or you can wait until v5.30, when you'll be forced
to add the e(fR parameter.
        UV      toLOWER_utf8(U8W p, U8W s, STRLENW lenp)

toLOWER_utf8_safe 8
Converts the first UTF 8 encoded character in the sequence starting at p(fR and
extending no further than e   1(fR to its lowercase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the lowercase version may be longer than the original character.

The first code point of the lowercased version is returned
(but note, as explained at the top of this section, that there may be more).

The suffix _safe(fR in the function's name indicates that it will not attempt
to read beyond e   1(fR, provided that the constraint s < e(fR is
true (this is asserted for in ( DDEBUGGING(fR builds).  If the UTF 8 for the
input character is malformed in some way, the program may croak, or the
function may return the REPLACEMENT CHARACTER, at the discretion of the
implementation, and subject to change in future releases.
        UV      toLOWER_utf8_safe(U8W p, U8W e, U8W s,
                                  STRLENW lenp)

toLOWER_uvchr 8
Converts the code point cp(fR to its lowercase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the lowercase version may be longer than the original character.

The first code point of the lowercased version is returned
(but note, as explained at the top of this section, that there may be more).
        UV      toLOWER_uvchr(UV cp, U8W s, STRLENW lenp)

toTITLE 8
Converts the specified character to titlecase.  If the input is anything but an
ASCII lowercase character, that input character itself is returned.  Variant
toTITLE_A(fR is equivalent.  (There is no toTITLE_L1(fR for the full Latin1
range, as the full generality of toTITLE_uvchr is needed there.  Titlecase is
not a concept used in locale handling, so there is no functionality for that.)
        U8      toTITLE(U8 ch)

toTITLE_utf8 8
This is like "toLOWER_utf8_safe", but doesn't have the e(fR
parameter  The function therefore can't check if it is reading
beyond the end of the string.  Starting in Perl v5.30, it will take the e(fR
parameter, becoming a synonym for toTITLE_utf8_safe(fR.  At that time every
program that uses it will have to be changed to successfully compile.  In the
meantime, the first runtime call to toTITLE_utf8(fR from each call point in the
program will raise a deprecation warning, enabled by default.  You can convert
your program now to use toTITLE_utf8_safe(fR, and avoid the warnings, and get an
extra measure of protection, or you can wait until v5.30, when you'll be forced
to add the e(fR parameter.
        UV      toTITLE_utf8(U8W p, U8W s, STRLENW lenp)

toTITLE_utf8_safe 8
Converts the first UTF 8 encoded character in the sequence starting at p(fR and
extending no further than e   1(fR to its titlecase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the titlecase version may be longer than the original character.

The first code point of the titlecased version is returned
(but note, as explained at the top of this section, that there may be more).

The suffix _safe(fR in the function's name indicates that it will not attempt
to read beyond e   1(fR, provided that the constraint s < e(fR is
true (this is asserted for in ( DDEBUGGING(fR builds).  If the UTF 8 for the
input character is malformed in some way, the program may croak, or the
function may return the REPLACEMENT CHARACTER, at the discretion of the
implementation, and subject to change in future releases.
        UV      toTITLE_utf8_safe(U8W p, U8W e, U8W s,
                                  STRLENW lenp)

toTITLE_uvchr 8
Converts the code point cp(fR to its titlecase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the titlecase version may be longer than the original character.

The first code point of the titlecased version is returned
(but note, as explained at the top of this section, that there may be more).
        UV      toTITLE_uvchr(UV cp, U8W s, STRLENW lenp)

toUPPER 8
Converts the specified character to uppercase.  If the input is anything but an
ASCII lowercase character, that input character itself is returned.  Variant
toUPPER_A(fR is equivalent.
        U8      toUPPER(U8 ch)

toUPPER_utf8 8
This is like "toUPPER_utf8_safe", but doesn't have the e(fR
parameter  The function therefore can't check if it is reading
beyond the end of the string.  Starting in Perl v5.30, it will take the e(fR
parameter, becoming a synonym for toUPPER_utf8_safe(fR.  At that time every
program that uses it will have to be changed to successfully compile.  In the
meantime, the first runtime call to toUPPER_utf8(fR from each call point in the
program will raise a deprecation warning, enabled by default.  You can convert
your program now to use toUPPER_utf8_safe(fR, and avoid the warnings, and get an
extra measure of protection, or you can wait until v5.30, when you'll be forced
to add the e(fR parameter.
        UV      toUPPER_utf8(U8W p, U8W s, STRLENW lenp)

toUPPER_utf8_safe 8
Converts the first UTF 8 encoded character in the sequence starting at p(fR and
extending no further than e   1(fR to its uppercase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the uppercase version may be longer than the original character.

The first code point of the uppercased version is returned
(but note, as explained at the top of this section, that there may be more).

The suffix _safe(fR in the function's name indicates that it will not attempt
to read beyond e   1(fR, provided that the constraint s < e(fR is
true (this is asserted for in ( DDEBUGGING(fR builds).  If the UTF 8 for the
input character is malformed in some way, the program may croak, or the
function may return the REPLACEMENT CHARACTER, at the discretion of the
implementation, and subject to change in future releases.
        UV      toUPPER_utf8_safe(U8W p, U8W e, U8W s,
                                  STRLENW lenp)

toUPPER_uvchr 8
Converts the code point cp(fR to its uppercase version, and
stores that in UTF 8 in s(fR, and its length in bytes in lenp(fR.  The code
point is interpreted as native if less than 256; otherwise as Unicode.  Note
that the buffer pointed to by s(fR needs to be at least UTF8_MAXBYTES_CASE+1(fR
bytes since the uppercase version may be longer than the original character.

The first code point of the uppercased version is returned
(but note, as explained at the top of this section, that there may be more.)
        UV      toUPPER_uvchr(UV cp, U8W s, STRLENW lenp)

Character classification

This section is about functions (really macros) that classify characters
into types, such as punctuation versus alphabetic, etc.  Most of these are
analogous to regular expression character classes.  (See
(s 1POSIX Character Classes in perlrecharclass.)  There are several variants for
each class.  (Not all macros have all variants; each item below lists the
ones valid for it.)  None are affected by use bytes(fR, and only the ones
with LC(fR in the name are affected by the current locale.

The base function, e.g., isALPHA()(fR, takes an octet (either a char(fR or a
U8(fR) as input and returns a boolean as to whether or not the character
represented by that octet is (or on non ASCII platforms, corresponds to) an
ASCII character in the named class based on platform, Unicode, and Perl rules.
If the input is a number that doesn't fit in an octet, FALSE is returned.

Variant isFOO_A(fR (e.g., isALPHA_A()(fR) is identical to the base function
with no suffix "_A".  This variant is used to emphasize by its name that
only ASCII range characters can return TRUE.

Variant isFOO_L1(fR imposes the Latin 1 (or EBCDIC equivalent) character set
onto the platform.  That is, the code points that are ASCII are unaffected,
since ASCII is a subset of Latin 1.  But the non ASCII code points are treated
as if they are Latin 1 characters.  For example, isWORDCHAR_L1()(fR will return
true when called with the code point 0xDF, which is a word character in both
ASCII and EBCDIC (though it represents different characters in each).

Variant isFOO_uvchr(fR is like the isFOO_L1(fR variant, but accepts any UV code
point as input.  If the code point is larger than 255, Unicode rules are used
to determine if it is in the character class.  For example,
isWORDCHAR_uvchr(0x100)(fR returns TRUE, since 0x100 is LATIN CAPITAL LETTER A
WITH MACRON in Unicode, and is a word character.

Variant isFOO_utf8_safe(fR is like isFOO_uvchr(fR, but is used for UTF 8
encoded strings.  Each call classifies one character, even if the string
contains many.  This variant takes two parameters.  The first, p(fR, is a
pointer to the first byte of the character to be classified.  (Recall that it
may take more than one byte to represent a character in UTF 8 strings.)  The
second parameter, e(fR, points to anywhere in the string beyond the first
character, up to one byte past the end of the entire string.  The suffix
_safe(fR in the function's name indicates that it will not attempt to read
beyond e   1(fR, provided that the constraint s < e(fR is true (this
is asserted for in ( DDEBUGGING(fR builds).  If the UTF 8 for the input
character is malformed in some way, the program may croak, or the function may
return FALSE, at the discretion of the implementation, and subject to change in
future releases.

Variant isFOO_utf8(fR is like isFOO_utf8_safe(fR, but takes just a single
parameter, p(fR, which has the same meaning as the corresponding parameter does
in isFOO_utf8_safe(fR.  The function therefore can't check if it is reading
beyond the end of the string.  Starting in Perl v5.30, it will take a second
parameter, becoming a synonym for isFOO_utf8_safe(fR.  At that time every
program that uses it will have to be changed to successfully compile.  In the
meantime, the first runtime call to isFOO_utf8(fR from each call point in the
program will raise a deprecation warning, enabled by default.  You can convert
your program now to use isFOO_utf8_safe(fR, and avoid the warnings, and get an
extra measure of protection, or you can wait until v5.30, when you'll be forced
to add the e(fR parameter.

Variant isFOO_LC(fR is like the isFOO_A(fR and isFOO_L1(fR variants, but the
result is based on the current locale, which is what LC(fR in the name stands
for.  If Perl can determine that the current locale is a UTF 8 locale, it uses
the published Unicode rules; otherwise, it uses the C library function that
gives the named classification.  For example, isDIGIT_LC()(fR when not in a
UTF 8 locale returns the result of calling isdigit()(fR.  FALSE is always
returned if the input won't fit into an octet.  On some platforms where the C
library function is known to be defective, Perl changes its result to follow
the POSIX standard's rules.

Variant isFOO_LC_uvchr(fR is like isFOO_LC(fR, but is defined on any UV.  It
returns the same as isFOO_LC(fR for input code points less than 256, and
returns the hard coded, not affected by locale, Unicode results for larger ones.

Variant isFOO_LC_utf8_safe(fR is like isFOO_LC_uvchr(fR, but is used for UTF 8
encoded strings.  Each call classifies one character, even if the string
contains many.  This variant takes two parameters.  The first, p(fR, is a
pointer to the first byte of the character to be classified.  (Recall that it
may take more than one byte to represent a character in UTF 8 strings.) The
second parameter, e(fR, points to anywhere in the string beyond the first
character, up to one byte past the end of the entire string.  The suffix
_safe(fR in the function's name indicates that it will not attempt to read
beyond e   1(fR, provided that the constraint s < e(fR is true (this
is asserted for in ( DDEBUGGING(fR builds).  If the UTF 8 for the input
character is malformed in some way, the program may croak, or the function may
return FALSE, at the discretion of the implementation, and subject to change in
future releases.

Variant isFOO_LC_utf8(fR is like isFOO_LC_utf8_safe(fR, but takes just a single
parameter, p(fR, which has the same meaning as the corresponding parameter does
in isFOO_LC_utf8_safe(fR.  The function therefore can't check if it is reading
beyond the end of the string.  Starting in Perl v5.30, it will take a second
parameter, becoming a synonym for isFOO_LC_utf8_safe(fR.  At that time every
program that uses it will have to be changed to successfully compile.  In the
meantime, the first runtime call to isFOO_LC_utf8(fR from each call point in
the program will raise a deprecation warning, enabled by default.  You can
convert your program now to use isFOO_LC_utf8_safe(fR, and avoid the warnings,
and get an extra measure of protection, or you can wait until v5.30, when
you'll be forced to add the e(fR parameter.
isALPHA 8
Returns a boolean indicating whether the specified character is an
alphabetic character, analogous to m/[[:alpha:]]/(fR.
See the top of this section for an explanation of
variants
isALPHA_A(fR, isALPHA_L1(fR, isALPHA_uvchr(fR, isALPHA_utf8_safe(fR,
isALPHA_LC(fR, isALPHA_LC_uvchr(fR, and isALPHA_LC_utf8_safe(fR.
        bool    isALPHA(char ch)

isALPHANUMERIC 8
Returns a boolean indicating whether the specified character is a either an
alphabetic character or decimal digit, analogous to m/[[:alnum:]]/(fR.
See the top of this section for an explanation of
variants
isALPHANUMERIC_A(fR, isALPHANUMERIC_L1(fR, isALPHANUMERIC_uvchr(fR,
isALPHANUMERIC_utf8_safe(fR, isALPHANUMERIC_LC(fR, isALPHANUMERIC_LC_uvchr(fR,
and isALPHANUMERIC_LC_utf8_safe(fR.
        bool    isALPHANUMERIC(char ch)

isASCII 8
Returns a boolean indicating whether the specified character is one of the 128
characters in the ASCII character set, analogous to m/[[:ascii:]]/(fR.
On non ASCII platforms, it returns TRUE iff this
character corresponds to an ASCII character.  Variants isASCII_A()(fR and
isASCII_L1()(fR are identical to isASCII()(fR.
See the top of this section for an explanation of
variants
isASCII_uvchr(fR, isASCII_utf8_safe(fR, isASCII_LC(fR, isASCII_LC_uvchr(fR, and
isASCII_LC_utf8_safe(fR.  Note, however, that some platforms do not have the C
library routine isascii()(fR.  In these cases, the variants whose names contain
LC(fR are the same as the corresponding ones without.

Also note, that because all ASCII characters are UTF 8 invariant (meaning they
have the exact same representation (always a single byte) whether encoded in
UTF 8 or not), isASCII(fR will give the correct results when called with any
byte in any string encoded or not in UTF 8.  And similarly isASCII_utf8_safe(fR
will work properly on any string encoded or not in UTF 8.
        bool    isASCII(char ch)

isBLANK 8
Returns a boolean indicating whether the specified character is a
character considered to be a blank, analogous to m/[[:blank:]]/(fR.
See the top of this section for an explanation of
variants
isBLANK_A(fR, isBLANK_L1(fR, isBLANK_uvchr(fR, isBLANK_utf8_safe(fR,
isBLANK_LC(fR, isBLANK_LC_uvchr(fR, and isBLANK_LC_utf8_safe(fR.  Note,
however, that some platforms do not have the C library routine
isblank()(fR.  In these cases, the variants whose names contain LC(fR are
the same as the corresponding ones without.
        bool    isBLANK(char ch)

isCNTRL 8
Returns a boolean indicating whether the specified character is a
control character, analogous to m/[[:cntrl:]]/(fR.
See the top of this section for an explanation of
variants
isCNTRL_A(fR, isCNTRL_L1(fR, isCNTRL_uvchr(fR, isCNTRL_utf8_safe(fR,
isCNTRL_LC(fR, isCNTRL_LC_uvchr(fR, and isCNTRL_LC_utf8_safe(fR On EBCDIC
platforms, you almost always want to use the isCNTRL_L1(fR variant.
        bool    isCNTRL(char ch)

isDIGIT 8
Returns a boolean indicating whether the specified character is a
digit, analogous to m/[[:digit:]]/(fR.
Variants isDIGIT_A(fR and isDIGIT_L1(fR are identical to isDIGIT(fR.
See the top of this section for an explanation of
variants
isDIGIT_uvchr(fR, isDIGIT_utf8_safe(fR, isDIGIT_LC(fR, isDIGIT_LC_uvchr(fR, and
isDIGIT_LC_utf8_safe(fR.
        bool    isDIGIT(char ch)

isGRAPH 8
Returns a boolean indicating whether the specified character is a
graphic character, analogous to m/[[:graph:]]/(fR.
See the top of this section for an explanation of
variants isGRAPH_A(fR, isGRAPH_L1(fR, isGRAPH_uvchr(fR, isGRAPH_utf8_safe(fR,
isGRAPH_LC(fR, isGRAPH_LC_uvchr(fR, and isGRAPH_LC_utf8_safe(fR.
        bool    isGRAPH(char ch)

isIDCONT 8
Returns a boolean indicating whether the specified character can be the
second or succeeding character of an identifier.  This is very close to, but
not quite the same as the official Unicode property XID_Continue(fR.  The
difference is that this returns true only if the input character also matches
isWORDCHAR.  See the top of this section for
an
explanation of variants isIDCONT_A(fR, isIDCONT_L1(fR, isIDCONT_uvchr(fR,
isIDCONT_utf8_safe(fR, isIDCONT_LC(fR, isIDCONT_LC_uvchr(fR, and
isIDCONT_LC_utf8_safe(fR.
        bool    isIDCONT(char ch)

isIDFIRST 8
Returns a boolean indicating whether the specified character can be the first
character of an identifier.  This is very close to, but not quite the same as
the official Unicode property XID_Start(fR.  The difference is that this
returns true only if the input character also matches isWORDCHAR.
See the top of this section for an explanation of
variants
isIDFIRST_A(fR, isIDFIRST_L1(fR, isIDFIRST_uvchr(fR, isIDFIRST_utf8_safe(fR,
isIDFIRST_LC(fR, isIDFIRST_LC_uvchr(fR, and isIDFIRST_LC_utf8_safe(fR.
        bool    isIDFIRST(char ch)

isLOWER 8
Returns a boolean indicating whether the specified character is a
lowercase character, analogous to m/[[:lower:]]/(fR.
See the top of this section for an explanation of
variants
isLOWER_A(fR, isLOWER_L1(fR, isLOWER_uvchr(fR, isLOWER_utf8_safe(fR,
isLOWER_LC(fR, isLOWER_LC_uvchr(fR, and isLOWER_LC_utf8_safe(fR.
        bool    isLOWER(char ch)

isOCTAL 8
Returns a boolean indicating whether the specified character is an
octal digit, [0 7].
The only two variants are isOCTAL_A(fR and isOCTAL_L1(fR; each is identical to
isOCTAL(fR.
        bool    isOCTAL(char ch)

isPRINT 8
Returns a boolean indicating whether the specified character is a
printable character, analogous to m/[[:print:]]/(fR.
See the top of this section for an explanation of
variants
isPRINT_A(fR, isPRINT_L1(fR, isPRINT_uvchr(fR, isPRINT_utf8_safe(fR,
isPRINT_LC(fR, isPRINT_LC_uvchr(fR, and isPRINT_LC_utf8_safe(fR.
        bool    isPRINT(char ch)

isPSXSPC 8
(short for Posix Space)
Starting in 5.18, this is identical in all its forms to the
corresponding isSPACE()(fR macros.
The locale forms of this macro are identical to their corresponding
isSPACE()(fR forms in all Perl releases.  In releases prior to 5.18, the
non locale forms differ from their isSPACE()(fR forms only in that the
isSPACE()(fR forms don't match a Vertical Tab, and the isPSXSPC()(fR forms do.
Otherwise they are identical.  Thus this macro is analogous to what
m/[[:space:]]/(fR matches in a regular expression.
See the top of this section for an explanation of
variants isPSXSPC_A(fR, isPSXSPC_L1(fR, isPSXSPC_uvchr(fR, isPSXSPC_utf8_safe(fR,
isPSXSPC_LC(fR, isPSXSPC_LC_uvchr(fR, and isPSXSPC_LC_utf8_safe(fR.
        bool    isPSXSPC(char ch)

isPUNCT 8
Returns a boolean indicating whether the specified character is a
punctuation character, analogous to m/[[:punct:]]/(fR.
Note that the definition of what is punctuation isn't as
straightforward as one might desire.  See (s 1POSIX Character
Classes in perlrecharclass for details.
See the top of this section for an explanation of
variants isPUNCT_A(fR, isPUNCT_L1(fR, isPUNCT_uvchr(fR, isPUNCT_utf8_safe(fR,
isPUNCT_LC(fR, isPUNCT_LC_uvchr(fR, and isPUNCT_LC_utf8_safe(fR.
        bool    isPUNCT(char ch)

isSPACE 8
Returns a boolean indicating whether the specified character is a
whitespace character.  This is analogous
to what m/(s/(fR matches in a regular expression.  Starting in Perl 5.18
this also matches what m/[[:space:]]/(fR does.  Prior to 5.18, only the
locale forms of this macro (the ones with LC(fR in their names) matched
precisely what m/[[:space:]]/(fR does.  In those releases, the only difference,
in the non locale variants, was that isSPACE()(fR did not match a vertical tab.
(See isPSXSPC for a macro that matches a vertical tab in all releases.)
See the top of this section for an explanation of
variants
isSPACE_A(fR, isSPACE_L1(fR, isSPACE_uvchr(fR, isSPACE_utf8_safe(fR,
isSPACE_LC(fR, isSPACE_LC_uvchr(fR, and isSPACE_LC_utf8_safe(fR.
        bool    isSPACE(char ch)

isUPPER 8
Returns a boolean indicating whether the specified character is an
uppercase character, analogous to m/[[:upper:]]/(fR.
See the top of this section for an explanation of
variants isUPPER_A(fR, isUPPER_L1(fR, isUPPER_uvchr(fR, isUPPER_utf8_safe(fR,
isUPPER_LC(fR, isUPPER_LC_uvchr(fR, and isUPPER_LC_utf8_safe(fR.
        bool    isUPPER(char ch)

isWORDCHAR 8
Returns a boolean indicating whether the specified character is a character
that is a word character, analogous to what m/(w/(fR and m/[[:word:]]/(fR match
in a regular expression.  A word character is an alphabetic character, a
decimal digit, a connecting punctuation character (such as an underscore), or
a mark character that attaches to one of those (like some sort of accent).
isALNUM()(fR is a synonym provided for backward compatibility, even though a
word character includes more than the standard C language meaning of
alphanumeric.
See the top of this section for an explanation of
variants isWORDCHAR_A(fR, isWORDCHAR_L1(fR, isWORDCHAR_uvchr(fR, and
isWORDCHAR_utf8_safe(fR.  isWORDCHAR_LC(fR, isWORDCHAR_LC_uvchr(fR, and
isWORDCHAR_LC_utf8_safe(fR are also as described there, but additionally
include the platform's native underscore.
        bool    isWORDCHAR(char ch)

isXDIGIT 8
Returns a boolean indicating whether the specified character is a hexadecimal
digit.  In the ASCII range these are [0 9A Fa f](fR.  Variants isXDIGIT_A()(fR
and isXDIGIT_L1()(fR are identical to isXDIGIT()(fR.
See the top of this section for an explanation of
variants
isXDIGIT_uvchr(fR, isXDIGIT_utf8_safe(fR, isXDIGIT_LC(fR, isXDIGIT_LC_uvchr(fR,
and isXDIGIT_LC_utf8_safe(fR.
        bool    isXDIGIT(char ch)

Cloning an interpreter

perl_clone 8
Create and return a new interpreter by cloning the current one.

perl_clone(fR takes these flags as parameters:

CLONEf_COPY_STACKS(fR   is used to, well, copy the stacks also,
without it we only clone the data and zero the stacks,
with it we copy the stacks and the new perl interpreter is
ready to run at the exact same point as the previous one.
The pseudo fork code uses COPY_STACKS(fR while the
threads >create doesn't.

CLONEf_KEEP_PTR_TABLE(fR  
perl_clone(fR keeps a ptr_table with the pointer of the old
variable as a key and the new variable as a value,
this allows it to check if something has been cloned and not
clone it again but rather just use the value and increase the
refcount.  If KEEP_PTR_TABLE(fR is not set then perl_clone(fR will kill
the ptr_table using the function
ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;(fR,
reason to keep it around is if you want to dup some of your own
variable who are outside the graph perl scans, an example of this
code is in threads.xs create.

CLONEf_CLONE_HOST(fR  
This is a win32 thing, it is ignored on unix, it tells perls
win32host code (which is c++) to clone itself, this is needed on
win32 if you want to run two threads at the same time,
if you just want to do some stuff in a separate perl interpreter
and then throw it away and return to the original one,
you don't need to do anything.
        PerlInterpreterW perl_clone(
                             PerlInterpreter Wproto_perl,
                             UV flags
                         )

Compile time scope hooks

BhkDISABLE 8
NOTE: this function is experimental and may change or be
removed without notice.

Temporarily disable an entry in this BHK structure, by clearing the
appropriate flag.  which(fR is a preprocessor token indicating which
entry to disable.
        void    BhkDISABLE(BHK Whk, which)

BhkENABLE 8
NOTE: this function is experimental and may change or be
removed without notice.

Re enable an entry in this BHK structure, by setting the appropriate
flag.  which(fR is a preprocessor token indicating which entry to enable.
This will assert (under  DDEBUGGING) if the entry doesn't contain a valid
pointer.
        void    BhkENABLE(BHK Whk, which)

BhkENTRY_set 8
NOTE: this function is experimental and may change or be
removed without notice.

Set an entry in the BHK structure, and set the flags to indicate it is
valid.  which(fR is a preprocessing token indicating which entry to set.
The type of ptr(fR depends on the entry.
        void    BhkENTRY_set(BHK Whk, which, void Wptr)

blockhook_register 8
NOTE: this function is experimental and may change or be
removed without notice.

Register a set of hooks to be called when the Perl lexical scope changes
at compile time.  See Compile time scope hooks in perlguts.

NOTE: this function must be explicitly called as Perl_blockhook_register with an aTHX_ parameter.
        void    Perl_blockhook_register(pTHX_ BHK Whk)

COP Hint Hashes

cophh_2hv 8
NOTE: this function is experimental and may change or be
removed without notice.

Generates and returns a standard Perl hash representing the full set of
key/value pairs in the cop hints hash cophh(fR.  flags(fR is currently
unused and must be zero.
        HV W    cophh_2hv(const COPHH Wcophh, U32 flags)

cophh_copy 8
NOTE: this function is experimental and may change or be
removed without notice.

Make and return a complete copy of the cop hints hash cophh(fR.
        COPHH W cophh_copy(COPHH Wcophh)

cophh_delete_pv 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_delete_pvn, but takes a nul terminated string instead of
a string/length pair.
        COPHH W cophh_delete_pv(const COPHH Wcophh,
                                const char Wkey, U32 hash,
                                U32 flags)

cophh_delete_pvn 8
NOTE: this function is experimental and may change or be
removed without notice.

Delete a key and its associated value from the cop hints hash cophh(fR,
and returns the modified hash.  The returned hash pointer is in general
not the same as the hash pointer that was passed in.  The input hash is
consumed by the function, and the pointer to it must not be subsequently
used.  Use cophh_copy if you need both hashes.

The key is specified by keypv(fR and keylen(fR.  If flags(fR has the
COPHH_KEY_UTF8(fR bit set, the key octets are interpreted as UTF 8,
otherwise they are interpreted as Latin 1.  hash(fR is a precomputed
hash of the key string, or zero if it has not been precomputed.
        COPHH W cophh_delete_pvn(COPHH Wcophh,
                                 const char Wkeypv,
                                 STRLEN keylen, U32 hash,
                                 U32 flags)

cophh_delete_pvs 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_delete_pvn, but takes a literal string instead
of a string/length pair, and no precomputed hash.
        COPHH W cophh_delete_pvs(const COPHH Wcophh,
                                 "literal string" key,
                                 U32 flags)

cophh_delete_sv 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_delete_pvn, but takes a Perl scalar instead of a
string/length pair.
        COPHH W cophh_delete_sv(const COPHH Wcophh, SV Wkey,
                                U32 hash, U32 flags)

cophh_fetch_pv 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_fetch_pvn, but takes a nul terminated string instead of
a string/length pair.
        SV W    cophh_fetch_pv(const COPHH Wcophh,
                               const char Wkey, U32 hash,
                               U32 flags)

cophh_fetch_pvn 8
NOTE: this function is experimental and may change or be
removed without notice.

Look up the entry in the cop hints hash cophh(fR with the key specified by
keypv(fR and keylen(fR.  If flags(fR has the COPHH_KEY_UTF8(fR bit set,
the key octets are interpreted as UTF 8, otherwise they are interpreted
as Latin 1.  hash(fR is a precomputed hash of the key string, or zero if
it has not been precomputed.  Returns a mortal scalar copy of the value
associated with the key, or &PL_sv_placeholder if there is no value
associated with the key.
        SV W    cophh_fetch_pvn(const COPHH Wcophh,
                                const char Wkeypv,
                                STRLEN keylen, U32 hash,
                                U32 flags)

cophh_fetch_pvs 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_fetch_pvn, but takes a literal string instead
of a string/length pair, and no precomputed hash.
        SV W    cophh_fetch_pvs(const COPHH Wcophh,
                                "literal string" key, U32 flags)

cophh_fetch_sv 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_fetch_pvn, but takes a Perl scalar instead of a
string/length pair.
        SV W    cophh_fetch_sv(const COPHH Wcophh, SV Wkey,
                               U32 hash, U32 flags)

cophh_free 8
NOTE: this function is experimental and may change or be
removed without notice.

Discard the cop hints hash cophh(fR, freeing all resources associated
with it.
        void    cophh_free(COPHH Wcophh)

cophh_new_empty 8
NOTE: this function is experimental and may change or be
removed without notice.

Generate and return a fresh cop hints hash containing no entries.
        COPHH W cophh_new_empty()

cophh_store_pv 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_store_pvn, but takes a nul terminated string instead of
a string/length pair.
        COPHH W cophh_store_pv(const COPHH Wcophh,
                               const char Wkey, U32 hash,
                               SV Wvalue, U32 flags)

cophh_store_pvn 8
NOTE: this function is experimental and may change or be
removed without notice.

Stores a value, associated with a key, in the cop hints hash cophh(fR,
and returns the modified hash.  The returned hash pointer is in general
not the same as the hash pointer that was passed in.  The input hash is
consumed by the function, and the pointer to it must not be subsequently
used.  Use cophh_copy if you need both hashes.

The key is specified by keypv(fR and keylen(fR.  If flags(fR has the
COPHH_KEY_UTF8(fR bit set, the key octets are interpreted as UTF 8,
otherwise they are interpreted as Latin 1.  hash(fR is a precomputed
hash of the key string, or zero if it has not been precomputed.

value(fR is the scalar value to store for this key.  value(fR is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the cop hints hash.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.
        COPHH W cophh_store_pvn(COPHH Wcophh, const char Wkeypv,
                                STRLEN keylen, U32 hash,
                                SV Wvalue, U32 flags)

cophh_store_pvs 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_store_pvn, but takes a literal string instead
of a string/length pair, and no precomputed hash.
        COPHH W cophh_store_pvs(const COPHH Wcophh,
                                "literal string" key, SV Wvalue,
                                U32 flags)

cophh_store_sv 8
NOTE: this function is experimental and may change or be
removed without notice.

Like cophh_store_pvn, but takes a Perl scalar instead of a
string/length pair.
        COPHH W cophh_store_sv(const COPHH Wcophh, SV Wkey,
                               U32 hash, SV Wvalue, U32 flags)

COP Hint Reading

cop_hints_2hv 8
Generates and returns a standard Perl hash representing the full set of
hint entries in the cop cop(fR.  flags(fR is currently unused and must
be zero.
        HV W    cop_hints_2hv(const COP Wcop, U32 flags)

cop_hints_fetch_pv 8
Like cop_hints_fetch_pvn, but takes a nul terminated string instead
of a string/length pair.
        SV W    cop_hints_fetch_pv(const COP Wcop,
                                   const char Wkey, U32 hash,
                                   U32 flags)

cop_hints_fetch_pvn 8
Look up the hint entry in the cop cop(fR with the key specified by
keypv(fR and keylen(fR.  If flags(fR has the COPHH_KEY_UTF8(fR bit set,
the key octets are interpreted as UTF 8, otherwise they are interpreted
as Latin 1.  hash(fR is a precomputed hash of the key string, or zero if
it has not been precomputed.  Returns a mortal scalar copy of the value
associated with the key, or &PL_sv_placeholder if there is no value
associated with the key.
        SV W    cop_hints_fetch_pvn(const COP Wcop,
                                    const char Wkeypv,
                                    STRLEN keylen, U32 hash,
                                    U32 flags)

cop_hints_fetch_pvs 8
Like cop_hints_fetch_pvn, but takes a literal string
instead of a string/length pair, and no precomputed hash.
        SV W    cop_hints_fetch_pvs(const COP Wcop,
                                    "literal string" key,
                                    U32 flags)

cop_hints_fetch_sv 8
Like cop_hints_fetch_pvn, but takes a Perl scalar instead of a
string/length pair.
        SV W    cop_hints_fetch_sv(const COP Wcop, SV Wkey,
                                   U32 hash, U32 flags)

Custom Operators

custom_op_register 8
Register a custom op.  See Custom Operators in perlguts.

NOTE: this function must be explicitly called as Perl_custom_op_register with an aTHX_ parameter.
        void    Perl_custom_op_register(pTHX_ 
                                        Perl_ppaddr_t ppaddr,
                                        const XOP Wxop)

custom_op_xop 8
Return the XOP structure for a given custom op.  This macro should be
considered internal to OP_NAME(fR and the other access macros: use them instead.
This macro does call a function.  Prior
to 5.19.6, this was implemented as a
function.

NOTE: this function must be explicitly called as Perl_custom_op_xop with an aTHX_ parameter.
        const XOP W Perl_custom_op_xop(pTHX_ const OP Wo)

XopDISABLE 8
Temporarily disable a member of the XOP, by clearing the appropriate flag.
        void    XopDISABLE(XOP Wxop, which)

XopENABLE 8
Reenable a member of the XOP which has been disabled.
        void    XopENABLE(XOP Wxop, which)

XopENTRY 8
Return a member of the XOP structure.  which(fR is a cpp token
indicating which entry to return.  If the member is not set
this will return a default value.  The return type depends
on which(fR.  This macro evaluates its arguments more than
once.  If you are using Perl_custom_op_xop(fR to retreive a
XOP W(fR from a OP W(fR, use the more efficient XopENTRYCUSTOM instead.
                XopENTRY(XOP Wxop, which)

XopENTRYCUSTOM 8
Exactly like XopENTRY(XopENTRY(Perl_custom_op_xop(aTHX_ o), which)(fR but more
efficient.  The which(fR parameter is identical to XopENTRY.
                XopENTRYCUSTOM(const OP Wo, which)

XopENTRY_set 8
Set a member of the XOP structure.  which(fR is a cpp token
indicating which entry to set.  See Custom Operators in perlguts
for details about the available members and how
they are used.  This macro evaluates its argument
more than once.
        void    XopENTRY_set(XOP Wxop, which, value)

XopFLAGS 8
Return the XOP's flags.
        U32     XopFLAGS(XOP Wxop)

CV Manipulation Functions

This section documents functions to manipulate CVs which are code values,
or subroutines.  For more information, see perlguts.
caller_cx 8
The XSUB writer's equivalent of caller().  The
returned PERL_CONTEXT(fR structure can be interrogated to find all the
information returned to Perl by caller(fR.  Note that XSUBs don't get a
stack frame, so caller_cx(0, NULL)(fR will return information for the
immediately surrounding Perl code.

This function skips over the automatic calls to &DB::sub made on the
behalf of the debugger.  If the stack frame requested was a sub called by
DB::sub(fR, the return value will be the frame for the call to
DB::sub(fR, since that has the correct line number/etc. for the call
site.  If dbcxp is non NULL(fR, it will be set to a pointer to the
frame for the sub call itself.
        const PERL_CONTEXT W caller_cx(
                                 I32 level,
                                 const PERL_CONTEXT WWdbcxp
                             )

CvSTASH 8
Returns the stash of the CV.  A stash is the symbol table hash, containing
the package scoped variables in the package where the subroutine was defined.
For more information, see perlguts.

This also has a special use with XS AUTOLOAD subs.
See Autoloading with XSUBs in perlguts.
        HVW     CvSTASH(CVW cv)

find_runcv 8
Locate the CV corresponding to the currently executing sub or eval.
If db_seqp(fR is non_null, skip CVs that are in the DB package and populate
Wdb_seqp with the cop sequence number at the point that the DB:: code was
entered.  (This allows debuggers to eval in the scope of the breakpoint
rather than in the scope of the debugger itself.)
        CVW     find_runcv(U32 Wdb_seqp)

get_cv 8
Uses strlen(fR to get the length of name(fR, then calls get_cvn_flags(fR.

NOTE: the perl_ form of this function is deprecated.
        CVW     get_cv(const charW name, I32 flags)

get_cvn_flags 8
Returns the CV of the specified Perl subroutine.  flags(fR are passed to
gv_fetchpvn_flags(fR.  If GV_ADD(fR is set and the Perl subroutine does not
exist then it will be declared (which has the same effect as saying
sub name;(fR).  If GV_ADD(fR is not set and the subroutine does not exist
then NULL is returned.

NOTE: the perl_ form of this function is deprecated.
        CVW     get_cvn_flags(const charW name, STRLEN len,
                              I32 flags)
ax 8
Variable which is setup by xsubpp(fR to indicate the stack base offset,
used by the ST(fR, XSprePUSH(fR and XSRETURN(fR macros.  The dMARK(fR macro
must be called prior to setup the MARK(fR variable.
        I32     ax

CLASS 8
Variable which is setup by xsubpp(fR to indicate the 
class name for a C .1v'++.1v'"THIS".
        charW   CLASS

dAX 8
Sets up the ax(fR variable.
This is usually handled automatically by xsubpp(fR by calling dXSARGS(fR.
                dAX;

dAXMARK 8
Sets up the ax(fR variable and stack marker variable mark(fR.
This is usually handled automatically by xsubpp(fR by calling dXSARGS(fR.
                dAXMARK;

dITEMS 8
Sets up the items(fR variable.
This is usually handled automatically by xsubpp(fR by calling dXSARGS(fR.
                dITEMS;

dUNDERBAR 8
Sets up any variable needed by the UNDERBAR(fR macro.  It used to define
padoff_du(fR, but it is currently a noop.  However, it is strongly advised
to still use it for ensuring past and future compatibility.
                dUNDERBAR;

dXSARGS 8
Sets up stack and mark pointers for an XSUB, calling dSP(fR and dMARK(fR.
Sets up the ax(fR and items(fR variables by calling dAX(fR and dITEMS(fR.
This is usually handled automatically by xsubpp(fR.
                dXSARGS;

dXSI32 8
Sets up the ix(fR variable for an XSUB which has aliases.  This is usually
handled automatically by xsubpp(fR.
                dXSI32;

items 8
Variable which is setup by xsubpp(fR to indicate the number of 
items on the stack.  See Variable length Parameter Lists in perlxs.
        I32     items

ix 8
Variable which is setup by xsubpp(fR to indicate which of an 
XSUB's aliases was used to invoke it.  See The ALIAS: Keyword in perlxs.
        I32     ix

RETVAL 8
Variable which is setup by xsubpp(fR to hold the return value for an 
XSUB.  This is always the proper type for the XSUB.  See 
The RETVAL Variable in perlxs.
        (whatever)      RETVAL

ST 8
Used to access elements on the XSUB's stack.
        SVW     ST(int ix)

THIS 8
Variable which is setup by xsubpp(fR to designate the object in a C .1v'++.1v'XSUB.  This is always the proper type for the C .1v'++.1v'Using XS With C .1v'++.1v'

        (whatever)      THIS

UNDERBAR 8
The SVW corresponding to the $_ variable.  Works even if there
is a lexical $_ in scope.
XS 8
Macro to declare an XSUB and its C parameter list.  This is handled by
xsubpp(fR.  It is the same as using the more explicit XS_EXTERNAL(fR macro.
XS_EXTERNAL 8
Macro to declare an XSUB and its C parameter list explicitly exporting the symbols.
XS_INTERNAL 8
Macro to declare an XSUB and its C parameter list without exporting the symbols.
This is handled by xsubpp(fR and generally preferable over exporting the XSUB
symbols unnecessarily.
Debugging Utilities

dump_all 8
Dumps the entire optree of the current program starting at PL_main_root(fR to 
STDERR(fR.  Also dumps the optrees for all visible subroutines in
PL_defstash(fR.
        void    dump_all()

dump_packsubs 8
Dumps the optrees for all visible subroutines in stash(fR.
        void    dump_packsubs(const HVW stash)

op_class 8
Given an op, determine what type of struct it has been allocated as.
Returns one of the OPclass enums, such as OPclass_LISTOP.
        OPclass op_class(const OP Wo)

op_dump 8
Dumps the optree starting at OP o(fR to STDERR(fR.
        void    op_dump(const OP Wo)

sv_dump 8
Dumps the contents of an SV to the STDERR(fR filehandle.

For an example of its output, see Devel::Peek.
        void    sv_dump(SVW sv)

Display and Dump functions

pv_display 8
Similar to
  pv_escape(dsv,pv,cur,pvlim,PERL_PV_ESCAPE_QUOTE);
except that an additional (e0 will be appended to the string when
len > cur and pv[cur] is (e0.

Note that the final string may be up to 7 chars longer than pvlim.
        charW   pv_display(SV Wdsv, const char Wpv, STRLEN cur,
                           STRLEN len, STRLEN pvlim)

pv_escape 8
Escapes at most the first count(fR chars of pv(fR and puts the results into
dsv(fR such that the size of the escaped string will not exceed max(fR chars
and will not contain any incomplete escape sequences.  The number of bytes
escaped will be returned in the STRLEN Wescaped(fR parameter if it is not null.
When the dsv(fR parameter is null no escaping actually occurs, but the number
of bytes that would be escaped were it not null will be calculated.

If flags contains PERL_PV_ESCAPE_QUOTE(fR then any double quotes in the string
will also be escaped.

Normally the SV will be cleared before the escaped string is prepared,
but when PERL_PV_ESCAPE_NOCLEAR(fR is set this will not occur.

If PERL_PV_ESCAPE_UNI(fR is set then the input string is treated as UTF 8
if PERL_PV_ESCAPE_UNI_DETECT(fR is set then the input string is scanned
using is_utf8_string()(fR to determine if it is UTF 8.

If PERL_PV_ESCAPE_ALL(fR is set then all input chars will be output
using (ex01F1(fR style escapes, otherwise if PERL_PV_ESCAPE_NONASCII(fR is set, only
non ASCII chars will be escaped using this style; otherwise, only chars above
255 will be so escaped; other non printable chars will use octal or
common escaped patterns like (en(fR.
Otherwise, if PERL_PV_ESCAPE_NOBACKSLASH(fR
then all chars below 255 will be treated as printable and
will be output as literals.

If PERL_PV_ESCAPE_FIRSTCHAR(fR is set then only the first char of the
string will be escaped, regardless of max.  If the output is to be in hex,
then it will be returned as a plain hex
sequence.  Thus the output will either be a single char,
an octal escape sequence, a special escape like (en(fR or a hex value.

If PERL_PV_ESCAPE_RE(fR is set then the escape char used will be a "%" and
not a "((".  This is because regexes very often contain backslashed
sequences, whereas "%" is not a particularly common character in patterns.

Returns a pointer to the escaped text as held by dsv(fR.
        charW   pv_escape(SV Wdsv, char const W const str,
                          const STRLEN count, const STRLEN max,
                          STRLEN W const escaped,
                          const U32 flags)

pv_pretty 8
Converts a string into something presentable, handling escaping via
pv_escape()(fR and supporting quoting and ellipses.

If the PERL_PV_PRETTY_QUOTE(fR flag is set then the result will be
double quoted with any double quotes in the string escaped.  Otherwise
if the PERL_PV_PRETTY_LTGT(fR flag is set then the result be wrapped in
angle brackets.

If the PERL_PV_PRETTY_ELLIPSES(fR flag is set and not all characters in
string were output then an ellipsis ...(fR will be appended to the
string.  Note that this happens AFTER it has been quoted.

If start_color(fR is non null then it will be inserted after the opening
quote (if there is one) but before the escaped text.  If end_color(fR
is non null then it will be inserted after the escaped text but before
any quotes or ellipses.

Returns a pointer to the prettified text as held by dsv(fR.
        charW   pv_pretty(SV Wdsv, char const W const str,
                          const STRLEN count, const STRLEN max,
                          char const W const start_color,
                          char const W const end_color,
                          const U32 flags)

Embedding Functions

cv_clone 8
Clone a CV, making a lexical closure.  proto(fR supplies the prototype
of the function: its code, pad structure, and other attributes.
The prototype is combined with a capture of outer lexicals to which the
code refers, which are taken from the currently executing instance of
the immediately surrounding code.
        CV W    cv_clone(CV Wproto)

cv_name 8
Returns an SV containing the name of the CV, mainly for use in error
reporting.  The CV may actually be a GV instead, in which case the returned
SV holds the GV's name.  Anything other than a GV or CV is treated as a
string already holding the sub name, but this could change in the future.

An SV may be passed as a second argument.  If so, the name will be assigned
to it and it will be returned.  Otherwise the returned SV will be a new
mortal.

If flags(fR has the CV_NAME_NOTQUAL(fR bit set, then the package name will not be
included.  If the first argument is neither a CV nor a GV, this flag is
ignored (subject to change).
        SV W    cv_name(CV Wcv, SV Wsv, U32 flags)

cv_undef 8
Clear out all the active components of a CV.  This can happen either
by an explicit undef &foo(fR, or by the reference count going to zero.
In the former case, we keep the CvOUTSIDE(fR pointer, so that any anonymous
children can still follow the full lexical scope chain.
        void    cv_undef(CVW cv)

find_rundefsv 8
Returns the global variable $_.
        SV W    find_rundefsv()

find_rundefsvoffset 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Until the lexical $_ feature was removed, this function would
find the position of the lexical $_ in the pad of the
currently executing function and return the offset in the current pad,
or NOT_IN_PAD(fR.

Now it always returns NOT_IN_PAD(fR.

NOTE: the perl_ form of this function is deprecated.
        PADOFFSET find_rundefsvoffset()

intro_my 8
Introduce my(fR variables to visible status.  This is called during parsing
at the end of each statement to make lexical variables visible to subsequent
statements.
        U32     intro_my()

load_module 8
Loads the module whose name is pointed to by the string part of name(fR.
Note that the actual module name, not its filename, should be given.
Eg, Foo::Bar instead of Foo/Bar.pm. ver, if specified and not NULL,
provides version semantics similar to use Foo::Bar VERSION(fR. The optional
trailing arguments can be used to specify arguments to the module's import()(fR
method, similar to use Foo::Bar VERSION LIST(fR; their precise handling depends
on the flags. The flags argument is a bitwise ORed collection of any of
PERL_LOADMOD_DENY(fR, PERL_LOADMOD_NOIMPORT(fR, or PERL_LOADMOD_IMPORT_OPS(fR
(or 0 for no flags).

If PERL_LOADMOD_NOIMPORT(fR is set, the module is loaded as if with an empty
import list, as in use Foo::Bar ()(fR; this is the only circumstance in which
the trailing optional arguments may be omitted entirely. Otherwise, if
PERL_LOADMOD_IMPORT_OPS(fR is set, the trailing arguments must consist of
exactly one OPW(fR, containing the op tree that produces the relevant import
arguments. Otherwise, the trailing arguments must all be SVW(fR values that
will be used as import arguments; and the list must be terminated with (SVW)
NULL(fR. If neither PERL_LOADMOD_NOIMPORT(fR nor PERL_LOADMOD_IMPORT_OPS(fR is
set, the trailing NULL(fR pointer is needed even if no import arguments are
desired. The reference count for each specified SVW(fR argument is
decremented. In addition, the name(fR argument is modified.

If PERL_LOADMOD_DENY(fR is set, the module is loaded as if with no(fR rather
than use(fR.
        void    load_module(U32 flags, SVW name, SVW ver, ...)

newPADNAMELIST 8
NOTE: this function is experimental and may change or be
removed without notice.

Creates a new pad name list.  max(fR is the highest index for which space
is allocated.
        PADNAMELIST W newPADNAMELIST(size_t max)

newPADNAMEouter 8
NOTE: this function is experimental and may change or be
removed without notice.

Constructs and returns a new pad name.  Only use this function for names
that refer to outer lexicals.  (See also newPADNAMEpvn.)  outer(fR is
the outer pad name that this one mirrors.  The returned pad name has the
PADNAMEt_OUTER(fR flag already set.
        PADNAME W newPADNAMEouter(PADNAME Wouter)

newPADNAMEpvn 8
NOTE: this function is experimental and may change or be
removed without notice.

Constructs and returns a new pad name.  s(fR must be a UTF 8 string.  Do not
use this for pad names that point to outer lexicals.  See
"newPADNAMEouter".
        PADNAME W newPADNAMEpvn(const char Ws, STRLEN len)

nothreadhook 8
Stub that provides thread hook for perl_destruct when there are
no threads.
        int     nothreadhook()

pad_add_anon 8
Allocates a place in the currently compiling pad (via pad_alloc)
for an anonymous function that is lexically scoped inside the
currently compiling function.
The function func(fR is linked into the pad, and its CvOUTSIDE(fR link
to the outer scope is weakened to avoid a reference loop.

One reference count is stolen, so you may need to do SvREFCNT_inc(func)(fR.

optype(fR should be an opcode indicating the type of operation that the
pad entry is to support.  This doesn't affect operational semantics,
but is used for debugging.
        PADOFFSET pad_add_anon(CV Wfunc, I32 optype)

pad_add_name_pv 8
Exactly like pad_add_name_pvn, but takes a nul terminated string
instead of a string/length pair.
        PADOFFSET pad_add_name_pv(const char Wname, U32 flags,
                                  HV Wtypestash, HV Wourstash)

pad_add_name_pvn 8
Allocates a place in the currently compiling pad for a named lexical
variable.  Stores the name and other metadata in the name part of the
pad, and makes preparations to manage the variable's lexical scoping.
Returns the offset of the allocated pad slot.

namepv(fR/namelen(fR specify the variable's name, including leading sigil.
If typestash(fR is non null, the name is for a typed lexical, and this
identifies the type.  If ourstash(fR is non null, it's a lexical reference
to a package variable, and this identifies the package.  The following
flags can be OR'ed together:
 padadd_OUR          redundantly specifies if its a package var
 padadd_STATE        variable will retain value persistently
 padadd_NO_DUP_CHECK skip check for lexical shadowing

        PADOFFSET pad_add_name_pvn(const char Wnamepv,
                                   STRLEN namelen, U32 flags,
                                   HV Wtypestash, HV Wourstash)

pad_add_name_sv 8
Exactly like pad_add_name_pvn, but takes the name string in the form
of an SV instead of a string/length pair.
        PADOFFSET pad_add_name_sv(SV Wname, U32 flags,
                                  HV Wtypestash, HV Wourstash)

pad_alloc 8
NOTE: this function is experimental and may change or be
removed without notice.

Allocates a place in the currently compiling pad,
returning the offset of the allocated pad slot.
No name is initially attached to the pad slot.
tmptype(fR is a set of flags indicating the kind of pad entry required,
which will be set in the value SV for the allocated pad entry:
    SVs_PADMY    named lexical variable ("my", "our", "state")
    SVs_PADTMP   unnamed temporary store
    SVf_READONLY constant shared between recursion levels
SVf_READONLY(fR has been supported here only since perl 5.20.  To work with
earlier versions as well, use SVf_READONLY|SVs_PADTMP(fR.  SVf_READONLY(fR
does not cause the SV in the pad slot to be marked read only, but simply
tells pad_alloc(fR that it will be made read only (by the caller), or at
least should be treated as such.

optype(fR should be an opcode indicating the type of operation that the
pad entry is to support.  This doesn't affect operational semantics,
but is used for debugging.
        PADOFFSET pad_alloc(I32 optype, U32 tmptype)

pad_findmy_pv 8
Exactly like pad_findmy_pvn, but takes a nul terminated string
instead of a string/length pair.
        PADOFFSET pad_findmy_pv(const char Wname, U32 flags)

pad_findmy_pvn 8
Given the name of a lexical variable, find its position in the
currently compiling pad.
namepv(fR/namelen(fR specify the variable's name, including leading sigil.
flags(fR is reserved and must be zero.
If it is not in the current pad but appears in the pad of any lexically
enclosing scope, then a pseudo entry for it is added in the current pad.
Returns the offset in the current pad,
or NOT_IN_PAD(fR if no such lexical is in scope.
        PADOFFSET pad_findmy_pvn(const char Wnamepv,
                                 STRLEN namelen, U32 flags)

pad_findmy_sv 8
Exactly like pad_findmy_pvn, but takes the name string in the form
of an SV instead of a string/length pair.
        PADOFFSET pad_findmy_sv(SV Wname, U32 flags)

padnamelist_fetch 8
NOTE: this function is experimental and may change or be
removed without notice.

Fetches the pad name from the given index.
        PADNAME W padnamelist_fetch(PADNAMELIST Wpnl,
                                    SSize_t key)

padnamelist_store 8
NOTE: this function is experimental and may change or be
removed without notice.

Stores the pad name (which may be null) at the given index, freeing any
existing pad name in that slot.
        PADNAME WW padnamelist_store(PADNAMELIST Wpnl,
                                     SSize_t key, PADNAME Wval)

pad_setsv 8
Set the value at offset po(fR in the current (compiling or executing) pad.
Use the macro PAD_SETSV()(fR rather than calling this function directly.
        void    pad_setsv(PADOFFSET po, SV Wsv)

pad_sv 8
Get the value at offset po(fR in the current (compiling or executing) pad.
Use macro PAD_SV(fR instead of calling this function directly.
        SV W    pad_sv(PADOFFSET po)

pad_tidy 8
NOTE: this function is experimental and may change or be
removed without notice.

Tidy up a pad at the end of compilation of the code to which it belongs.
Jobs performed here are: remove most stuff from the pads of anonsub
prototypes; give it a @_; mark temporaries as such.  type(fR indicates
the kind of subroutine:
    padtidy_SUB        ordinary subroutine
    padtidy_SUBCLONE   prototype for lexical closure
    padtidy_FORMAT     format

        void    pad_tidy(padtidy_type type)

perl_alloc 8
Allocates a new Perl interpreter.  See perlembed.
        PerlInterpreterW perl_alloc()

perl_construct 8
Initializes a new Perl interpreter.  See perlembed.
        void    perl_construct(PerlInterpreter Wmy_perl)

perl_destruct 8
Shuts down a Perl interpreter.  See perlembed for a tutorial.

my_perl(fR points to the Perl interpreter.  It must have been previously
created through the use of perl_alloc and perl_construct.  It may
have been initialised through perl_parse, and may have been used
through perl_run and other means.  This function should be called for
any Perl interpreter that has been constructed with perl_construct,
even if subsequent operations on it failed, for example if perl_parse
returned a non zero value.

If the interpreter's PL_exit_flags(fR word has the
PERL_EXIT_DESTRUCT_END(fR flag set, then this function will execute code
in END(fR blocks before performing the rest of destruction.  If it is
desired to make any use of the interpreter between perl_parse and
perl_destruct other than just calling perl_run, then this flag
should be set early on.  This matters if perl_run will not be called,
or if anything else will be done in addition to calling perl_run.

Returns a value be a suitable value to pass to the C library function
exit(fR (or to return from main(fR), to serve as an exit code indicating
the nature of the way the interpreter terminated.  This takes into account
any failure of perl_parse and any early exit from perl_run.
The exit code is of the type required by the host operating system,
so because of differing exit code conventions it is not portable to
interpret specific numeric values as having specific meanings.
        int     perl_destruct(PerlInterpreter Wmy_perl)

perl_free 8
Releases a Perl interpreter.  See perlembed.
        void    perl_free(PerlInterpreter Wmy_perl)

perl_parse 8
Tells a Perl interpreter to parse a Perl script.  This performs most
of the initialisation of a Perl interpreter.  See perlembed for
a tutorial.

my_perl(fR points to the Perl interpreter that is to parse the script.
It must have been previously created through the use of perl_alloc
and perl_construct.  xsinit(fR points to a callback function that
will be called to set up the ability for this Perl interpreter to load
XS extensions, or may be null to perform no such setup.

argc(fR and argv(fR supply a set of command line arguments to the Perl
interpreter, as would normally be passed to the main(fR function of
a C program.  argv[argc](fR must be null.  These arguments are where
the script to parse is specified, either by naming a script file or by
providing a script in a ( e(fR option.
If $0 will be written to in the Perl interpreter, then
the argument strings must be in writable memory, and so mustn't just be
string constants.

env(fR specifies a set of environment variables that will be used by
this Perl interpreter.  If non null, it must point to a null terminated
array of environment strings.  If null, the Perl interpreter will use
the environment supplied by the environ(fR global variable.

This function initialises the interpreter, and parses and compiles the
script specified by the command line arguments.  This includes executing
code in BEGIN(fR, UNITCHECK(fR, and CHECK(fR blocks.  It does not execute
INIT(fR blocks or the main program.

Returns an integer of slightly tricky interpretation.  The correct
use of the return value is as a truth value indicating whether there
was a failure in initialisation.  If zero is returned, this indicates
that initialisation was successful, and it is safe to proceed to call
perl_run and make other use of it.  If a non zero value is returned,
this indicates some problem that means the interpreter wants to terminate.
The interpreter should not be just abandoned upon such failure; the caller
should proceed to shut the interpreter down cleanly with perl_destruct
and free it with perl_free.

For historical reasons, the non zero return value also attempts to
be a suitable value to pass to the C library function exit(fR (or to
return from main(fR), to serve as an exit code indicating the nature
of the way initialisation terminated.  However, this isn't portable,
due to differing exit code conventions.  A historical bug is preserved
for the time being: if the Perl built in exit(fR is called during this
function's execution, with a type of exit entailing a zero exit code
under the host operating system's conventions, then this function
returns zero rather than a non zero value.  This bug, [perl #2754],
leads to perl_run(fR being called (and therefore INIT(fR blocks and the
main program running) despite a call to exit(fR.  It has been preserved
because a popular module installing module has come to rely on it and
needs time to be fixed.  This issue is [perl #132577], and the original
bug is due to be fixed in Perl 5.30.
        int     perl_parse(PerlInterpreter Wmy_perl,
                           XSINIT_t xsinit, int argc,
                           char WWargv, char WWenv)

perl_run 8
Tells a Perl interpreter to run its main program.  See perlembed
for a tutorial.

my_perl(fR points to the Perl interpreter.  It must have been previously
created through the use of perl_alloc and perl_construct, and
initialised through perl_parse.  This function should not be called
if perl_parse returned a non zero value, indicating a failure in
initialisation or compilation.

This function executes code in INIT(fR blocks, and then executes the
main program.  The code to be executed is that established by the prior
call to perl_parse.  If the interpreter's PL_exit_flags(fR word
does not have the PERL_EXIT_DESTRUCT_END(fR flag set, then this function
will also execute code in END(fR blocks.  If it is desired to make any
further use of the interpreter after calling this function, then END(fR
blocks should be postponed to perl_destruct time by setting that flag.

Returns an integer of slightly tricky interpretation.  The correct use
of the return value is as a truth value indicating whether the program
terminated non locally.  If zero is returned, this indicates that
the program ran to completion, and it is safe to make other use of the
interpreter (provided that the PERL_EXIT_DESTRUCT_END(fR flag was set as
described above).  If a non zero value is returned, this indicates that
the interpreter wants to terminate early.  The interpreter should not be
just abandoned because of this desire to terminate; the caller should
proceed to shut the interpreter down cleanly with perl_destruct
and free it with perl_free.

For historical reasons, the non zero return value also attempts to
be a suitable value to pass to the C library function exit(fR (or to
return from main(fR), to serve as an exit code indicating the nature of
the way the program terminated.  However, this isn't portable, due to
differing exit code conventions.  An attempt is made to return an exit
code of the type required by the host operating system, but because
it is constrained to be non zero, it is not necessarily possible to
indicate every type of exit.  It is only reliable on Unix, where a zero
exit code can be augmented with a set bit that will be ignored.  In any
case, this function is not the correct place to acquire an exit code:
one should get that from perl_destruct.
        int     perl_run(PerlInterpreter Wmy_perl)

require_pv 8
Tells Perl to require(fR the file named by the string argument.  It is
analogous to the Perl code eval "require $file"(fR.  It's even
implemented that way; consider using load_module instead.

NOTE: the perl_ form of this function is deprecated.
        void    require_pv(const charW pv)

Exception Handling (simple) Macros

dXCPT 8
Set up necessary local variables for exception handling.
See Exception Handling in perlguts.
                dXCPT;

XCPT_CATCH 8
Introduces a catch block.  See Exception Handling in perlguts.
XCPT_RETHROW 8
Rethrows a previously caught exception.  See Exception Handling in perlguts.
                XCPT_RETHROW;

XCPT_TRY_END 8
Ends a try block.  See Exception Handling in perlguts.
XCPT_TRY_START 8
Starts a try block.  See Exception Handling in perlguts.
Functions in file pp_sort.c

sortsv_flags 8
In place sort an array of SV pointers with the given comparison routine,
with various SORTf_W flag options.
        void    sortsv_flags(SVWW array, size_t num_elts,
                             SVCOMPARE_t cmp, U32 flags)

Functions in file scope.c

save_gp 8
Saves the current GP of gv on the save stack to be restored on scope exit.

If empty is true, replace the GP with a new GP.

If empty is false, mark gv with GVf_INTRO so the next reference
assigned is localized, which is how  local Wfoo = $someref; (fR works.
        void    save_gp(GVW gv, I32 empty)

Functions in file vutil.c

new_version 8
Returns a new version object based on the passed in SV:
    SV Wsv = new_version(SV Wver);
Does not alter the passed in ver SV.  See upg_version if you
want to upgrade the SV.
        SVW     new_version(SV Wver)

prescan_version 8
Validate that a given string can be parsed as a version object, but doesn't
actually perform the parsing.  Can use either strict or lax validation rules.
Can optionally set a number of hint variables to save the parsing code
some time when tokenizing.
        const charW prescan_version(const char Ws, bool strict,
                                    const charWW errstr,
                                    bool Wsqv,
                                    int Wssaw_decimal,
                                    int Wswidth, bool Wsalpha)

scan_version 8
Returns a pointer to the next character after the parsed
version string, as well as upgrading the passed in SV to
an RV.

Function must be called with an already existing SV like
    sv = newSV(0);
    s = scan_version(s, SV Wsv, bool qv);
Performs some preprocessing to the string to ensure that
it has the correct characteristics of a version.  Flags the
object if it contains an underscore (which denotes this
is an alpha version).  The boolean qv denotes that the version
should be interpreted as if it had multiple decimals, even if
it doesn't.
        const charW scan_version(const char Ws, SV Wrv, bool qv)

upg_version 8
In place upgrade of the supplied SV to a version object.
    SV Wsv = upg_version(SV Wsv, bool qv);
Returns a pointer to the upgraded SV.  Set the boolean qv if you want
to force this SV to be interpreted as an extended version.
        SVW     upg_version(SV Wver, bool qv)

vcmp 8
Version object aware cmp.  Both operands must already have been 
converted into version objects.
        int     vcmp(SV Wlhv, SV Wrhv)

vnormal 8
Accepts a version object and returns the normalized string
representation.  Call like:
    sv = vnormal(rv);
NOTE: you can pass either the object directly or the SV
contained within the RV.

The SV returned has a refcount of 1.
        SVW     vnormal(SV Wvs)

vnumify 8
Accepts a version object and returns the normalized floating
point representation.  Call like:
    sv = vnumify(rv);
NOTE: you can pass either the object directly or the SV
contained within the RV.

The SV returned has a refcount of 1.
        SVW     vnumify(SV Wvs)

vstringify 8
In order to maintain maximum compatibility with earlier versions
of Perl, this function will return either the floating point
notation or the multiple dotted notation, depending on whether
the original version contained 1 or more dots, respectively.

The SV returned has a refcount of 1.
        SVW     vstringify(SV Wvs)

vverify 8
Validates that the SV contains valid internal structure for a version object.
It may be passed either the version object (RV) or the hash itself (HV).  If
the structure is valid, it returns the HV.  If the structure is invalid,
it returns NULL.
    SV Whv = vverify(sv);
Note that it only confirms the bare minimum structure (so as not to get
confused by derived classes which may contain additional hash entries):

o 4
The SV is an HV or a reference to an HV
o 4
The hash contains a version key
o 4
The version key has a reference to an AV as its value
        SVW     vverify(SV Wvs)
G_ARRAY 8
Used to indicate list context.  See "GIMME_V", "GIMME" and
perlcall.
G_DISCARD 8
Indicates that arguments returned from a callback should be discarded.  See
perlcall.
G_EVAL 8
Used to force a Perl eval(fR wrapper around a callback.  See
perlcall.
GIMME 8
A backward compatible version of GIMME_V(fR which can only return
G_SCALAR(fR or G_ARRAY(fR; in a void context, it returns G_SCALAR(fR.
Deprecated.  Use GIMME_V(fR instead.
        U32     GIMME

GIMME_V 8
The XSUB writer's equivalent to Perl's wantarray(fR.  Returns G_VOID(fR,
G_SCALAR(fR or G_ARRAY(fR for void, scalar or list context,
respectively.  See perlcall for a usage example.
        U32     GIMME_V

G_NOARGS 8
Indicates that no arguments are being sent to a callback.  See
perlcall.
G_SCALAR 8
Used to indicate scalar context.  See "GIMME_V", "GIMME", and
perlcall.
G_VOID 8
Used to indicate void context.  See "GIMME_V" and perlcall.
Global Variables

These variables are global to an entire process.  They are shared between
all interpreters and all threads in a process.  Any variables not documented
here may be changed or removed without notice, so don't use them!
If you feel you really do need to use an unlisted variable, first send email to
perl5 porters@perl.org <mailto:perl5 porters@perl.org>.  It may be that
someone there will point out a way to accomplish what you need without using an
internal variable.  But if not, you should get a go ahead to document and then
use the variable.
PL_check 8
Array, indexed by opcode, of functions that will be called for the check
phase of optree building during compilation of Perl code.  For most (but
not all) types of op, once the op has been initially built and populated
with child ops it will be filtered through the check function referenced
by the appropriate element of this array.  The new op is passed in as the
sole argument to the check function, and the check function returns the
completed op.  The check function may (as the name suggests) check the op
for validity and signal errors.  It may also initialise or modify parts of
the ops, or perform more radical surgery such as adding or removing child
ops, or even throw the op away and return a different op in its place.

This array of function pointers is a convenient place to hook into the
compilation process.  An XS module can put its own custom check function
in place of any of the standard ones, to influence the compilation of a
particular type of op.  However, a custom check function must never fully
replace a standard check function (or even a custom check function from
another module).  A module modifying checking must instead wrap the
preexisting check function.  A custom check function must be selective
about when to apply its custom behaviour.  In the usual case where
it decides not to do anything special with an op, it must chain the
preexisting op function.  Check functions are thus linked in a chain,
with the core's base checker at the end.

For thread safety, modules should not write directly to this array.
Instead, use the function wrap_op_checker.
PL_keyword_plugin 8
NOTE: this function is experimental and may change or be
removed without notice.

Function pointer, pointing at a function used to handle extended keywords.
The function should be declared as
        int keyword_plugin_function(pTHX_
                char Wkeyword_ptr, STRLEN keyword_len,
                OP WWop_ptr)
The function is called from the tokeniser, whenever a possible keyword
is seen.  keyword_ptr(fR points at the word in the parser's input
buffer, and keyword_len(fR gives its length; it is not null terminated.
The function is expected to examine the word, and possibly other state
such as %^H, to decide whether it wants to handle it
as an extended keyword.  If it does not, the function should return
KEYWORD_PLUGIN_DECLINE(fR, and the normal parser process will continue.

If the function wants to handle the keyword, it first must
parse anything following the keyword that is part of the syntax
introduced by the keyword.  See Lexer interface for details.

When a keyword is being handled, the plugin function must build
a tree of OP(fR structures, representing the code that was parsed.
The root of the tree must be stored in Wop_ptr.  The function then
returns a constant indicating the syntactic role of the construct that
it has parsed: KEYWORD_PLUGIN_STMT(fR if it is a complete statement, or
KEYWORD_PLUGIN_EXPR(fR if it is an expression.  Note that a statement
construct cannot be used inside an expression (except via do BLOCK(fR
and similar), and an expression is not a complete statement (it requires
at least a terminating semicolon).

When a keyword is handled, the plugin function may also have
(compile time) side effects.  It may modify %^H(fR, define functions, and
so on.  Typically, if side effects are the main purpose of a handler,
it does not wish to generate any ops to be included in the normal
compilation.  In this case it is still required to supply an op tree,
but it suffices to generate a single null op.

That's how the WPL_keyword_plugin function needs to behave overall.
Conventionally, however, one does not completely replace the existing
handler function.  Instead, take a copy of PL_keyword_plugin(fR before
assigning your own function pointer to it.  Your handler function should
look for keywords that it is interested in and handle those.  Where it
is not interested, it should call the saved plugin function, passing on
the arguments it received.  Thus PL_keyword_plugin(fR actually points
at a chain of handler functions, all of which have an opportunity to
handle keywords, and only the last function in the chain (built into
the Perl core) will normally return KEYWORD_PLUGIN_DECLINE(fR.

For thread safety, modules should not set this variable directly.
Instead, use the function wrap_keyword_plugin.
GV Functions

A GV is a structure which corresponds to to a Perl typeglob, ie Wfoo.
It is a structure that holds a pointer to a scalar, an array, a hash etc,
corresponding to $foo, @foo, %foo.

GVs are usually found as values in stashes (symbol table hashes) where
Perl stores its global variables.
GvAV 8
Return the AV from the GV.
        AVW     GvAV(GVW gv)

gv_const_sv 8
If gv(fR is a typeglob whose subroutine entry is a constant sub eligible for
inlining, or gv(fR is a placeholder reference that would be promoted to such
a typeglob, then returns the value returned by the sub.  Otherwise, returns
NULL(fR.
        SVW     gv_const_sv(GVW gv)

GvCV 8
Return the CV from the GV.
        CVW     GvCV(GVW gv)

gv_fetchmeth 8
Like gv_fetchmeth_pvn, but lacks a flags parameter.
        GVW     gv_fetchmeth(HVW stash, const charW name,
                             STRLEN len, I32 level)

gv_fetchmethod_autoload 8
Returns the glob which contains the subroutine to call to invoke the method
on the stash(fR.  In fact in the presence of autoloading this may be the
glob for (s 1AUTOLOAD.  In this case the corresponding variable $AUTOLOAD is
already setup.

The third parameter of gv_fetchmethod_autoload(fR determines whether
AUTOLOAD lookup is performed if the given method is not present: non zero
means yes, look for AUTOLOAD; zero means no, don't look for AUTOLOAD.
Calling gv_fetchmethod(fR is equivalent to calling gv_fetchmethod_autoload(fR
with a non zero autoload(fR parameter.

These functions grant "SUPER" token
as a prefix of the method name.  Note
that if you want to keep the returned glob for a long time, you need to
check for it being (s 1AUTOLOAD, since at the later time the call may load a
different subroutine due to $AUTOLOAD changing its value.  Use the glob
created as a side effect to do this.

These functions have the same side effects as gv_fetchmeth(fR with
level==0(fR.  The warning against passing the GV returned by
gv_fetchmeth(fR to call_sv(fR applies equally to these functions.
        GVW     gv_fetchmethod_autoload(HVW stash,
                                        const charW name,
                                        I32 autoload)

gv_fetchmeth_autoload 8
This is the old form of gv_fetchmeth_pvn_autoload, which has no flags
parameter.
        GVW     gv_fetchmeth_autoload(HVW stash,
                                      const charW name,
                                      STRLEN len, I32 level)

gv_fetchmeth_pv 8
Exactly like gv_fetchmeth_pvn, but takes a nul terminated string 
instead of a string/length pair.
        GVW     gv_fetchmeth_pv(HVW stash, const charW name,
                                I32 level, U32 flags)

gv_fetchmeth_pvn 8
Returns the glob with the given name(fR and a defined subroutine or
NULL(fR.  The glob lives in the given stash(fR, or in the stashes
accessible via @ISA and UNIVERSAL::(fR.

The argument level(fR should be either 0 or  1.  If level==0(fR, as a
side effect creates a glob with the given name(fR in the given stash(fR
which in the case of success contains an alias for the subroutine, and sets
up caching info for this glob.

The only significant values for flags(fR are GV_SUPER(fR and SVf_UTF8(fR.

GV_SUPER(fR indicates that we want to look up the method in the superclasses
of the stash(fR.

The
GV returned from gv_fetchmeth(fR may be a method cache entry, which is not
visible to Perl code.  So when calling call_sv(fR, you should not use
the GV directly; instead, you should use the method's CV, which can be
obtained from the GV with the GvCV(fR macro.
        GVW     gv_fetchmeth_pvn(HVW stash, const charW name,
                                 STRLEN len, I32 level,
                                 U32 flags)

gv_fetchmeth_pvn_autoload 8
Same as gv_fetchmeth_pvn()(fR, but looks for autoloaded subroutines too.
Returns a glob for the subroutine.

For an autoloaded subroutine without a GV, will create a GV even
if level < 0(fR.  For an autoloaded subroutine without a stub, GvCV()(fR
of the result may be zero.

Currently, the only significant value for flags(fR is SVf_UTF8(fR.
        GVW     gv_fetchmeth_pvn_autoload(HVW stash,
                                          const charW name,
                                          STRLEN len, I32 level,
                                          U32 flags)

gv_fetchmeth_pv_autoload 8
Exactly like gv_fetchmeth_pvn_autoload, but takes a nul terminated string
instead of a string/length pair.
        GVW     gv_fetchmeth_pv_autoload(HVW stash,
                                         const charW name,
                                         I32 level, U32 flags)

gv_fetchmeth_sv 8
Exactly like gv_fetchmeth_pvn, but takes the name string in the form
of an SV instead of a string/length pair.
        GVW     gv_fetchmeth_sv(HVW stash, SVW namesv,
                                I32 level, U32 flags)

gv_fetchmeth_sv_autoload 8
Exactly like gv_fetchmeth_pvn_autoload, but takes the name string in the form
of an SV instead of a string/length pair.
        GVW     gv_fetchmeth_sv_autoload(HVW stash, SVW namesv,
                                         I32 level, U32 flags)

GvHV 8
Return the HV from the GV.
        HVW     GvHV(GVW gv)

gv_init 8
The old form of gv_init_pvn()(fR.  It does not work with UTF 8 strings, as it
has no flags parameter.  If the multi(fR parameter is set, the
GV_ADDMULTI(fR flag will be passed to gv_init_pvn()(fR.
        void    gv_init(GVW gv, HVW stash, const charW name,
                        STRLEN len, int multi)

gv_init_pv 8
Same as gv_init_pvn()(fR, but takes a nul terminated string for the name
instead of separate char W and length parameters.
        void    gv_init_pv(GVW gv, HVW stash, const charW name,
                           U32 flags)

gv_init_pvn 8
Converts a scalar into a typeglob.  This is an incoercible typeglob;
assigning a reference to it will assign to one of its slots, instead of
overwriting it as happens with typeglobs created by SvSetSV(fR.  Converting
any scalar that is SvOK()(fR may produce unpredictable results and is reserved
for perl's internal use.

gv(fR is the scalar to be converted.

stash(fR is the parent stash/package, if any.

name(fR and len(fR give the name.  The name must be unqualified;
that is, it must not include the package name.  If gv(fR is a
stash element, it is the caller's responsibility to ensure that the name
passed to this function matches the name of the element.  If it does not
match, perl's internal bookkeeping will get out of sync.

flags(fR can be set to SVf_UTF8(fR if name(fR is a UTF 8 string, or
the return value of SvUTF8(sv).  It can also take the
GV_ADDMULTI(fR flag, which means to pretend that the GV has been
seen before (i.e., suppress Used once warnings).
        void    gv_init_pvn(GVW gv, HVW stash, const charW name,
                            STRLEN len, U32 flags)

gv_init_sv 8
Same as gv_init_pvn()(fR, but takes an SV W for the name instead of separate
char W and length parameters.  flags(fR is currently unused.
        void    gv_init_sv(GVW gv, HVW stash, SVW namesv,
                           U32 flags)

gv_stashpv 8
Returns a pointer to the stash for a specified package.  Uses strlen(fR to
determine the length of name(fR, then calls gv_stashpvn()(fR.
        HVW     gv_stashpv(const charW name, I32 flags)

gv_stashpvn 8
Returns a pointer to the stash for a specified package.  The namelen(fR
parameter indicates the length of the name(fR, in bytes.  flags(fR is passed
to gv_fetchpvn_flags()(fR, so if set to GV_ADD(fR then the package will be
created if it does not already exist.  If the package does not exist and
flags(fR is 0 (or any other setting that does not create packages) then NULL(fR
is returned.

Flags may be one of:
    GV_ADD
    SVf_UTF8
    GV_NOADD_NOINIT
    GV_NOINIT
    GV_NOEXPAND
    GV_ADDMG
The most important of which are probably GV_ADD(fR and SVf_UTF8(fR.

Note, use of gv_stashsv(fR instead of gv_stashpvn(fR where possible is strongly
recommended for performance reasons.
        HVW     gv_stashpvn(const charW name, U32 namelen,
                            I32 flags)

gv_stashpvs 8
Like gv_stashpvn(fR, but takes a literal string instead of a
string/length pair.
        HVW     gv_stashpvs("literal string" name, I32 create)

gv_stashsv 8
Returns a pointer to the stash for a specified package.  See
"gv_stashpvn".

Note this interface is strongly preferred over gv_stashpvn(fR for performance
reasons.
        HVW     gv_stashsv(SVW sv, I32 flags)

GvSV 8
Return the SV from the GV.
        SVW     GvSV(GVW gv)

setdefout 8
Sets PL_defoutgv(fR, the default file handle for output, to the passed in
typeglob.  As PL_defoutgv(fR owns a reference on its typeglob, the reference
count of the passed in typeglob is increased by one, and the reference count
of the typeglob that PL_defoutgv(fR points to is decreased by one.
        void    setdefout(GVW gv)

Handy Values

Nullav 8
Null AV pointer.

(deprecated   use (AV W)NULL(fR instead)
Nullch 8
Null character pointer.  (No longer available when PERL_CORE(fR is
defined.)
Nullcv 8
Null CV pointer.

(deprecated   use (CV W)NULL(fR instead)
Nullhv 8
Null HV pointer.

(deprecated   use (HV W)NULL(fR instead)
Nullsv 8
Null SV pointer.  (No longer available when PERL_CORE(fR is defined.)
Hash Manipulation Functions

A HV structure represents a Perl hash.  It consists mainly of an array
of pointers, each of which points to a linked list of HE structures.  The
array is indexed by the hash function of the key, so each linked list
represents all the hash entries with the same hash value.  Each HE contains
a pointer to the actual value, plus a pointer to a HEK structure which
holds the key and hash value.
cop_fetch_label 8
NOTE: this function is experimental and may change or be
removed without notice.

Returns the label attached to a cop.
The flags pointer may be set to SVf_UTF8(fR or 0.
        const char W cop_fetch_label(COP Wconst cop,
                                     STRLEN Wlen, U32 Wflags)

cop_store_label 8
NOTE: this function is experimental and may change or be
removed without notice.

Save a label into a cop_hints_hash(fR.
You need to set flags to SVf_UTF8(fR
for a UTF 8 label.
        void    cop_store_label(COP Wconst cop,
                                const char Wlabel, STRLEN len,
                                U32 flags)

get_hv 8
Returns the HV of the specified Perl hash.  flags(fR are passed to
gv_fetchpv(fR.  If GV_ADD(fR is set and the
Perl variable does not exist then it will be created.  If flags(fR is zero
and the variable does not exist then NULL(fR is returned.

NOTE: the perl_ form of this function is deprecated.
        HVW     get_hv(const char Wname, I32 flags)

HEf_SVKEY 8
This flag, used in the length slot of hash entries and magic structures,
specifies the structure contains an SVW(fR pointer where a charW(fR pointer
is to be expected.  (For information onlynot to be used).
HeHASH 8
Returns the computed hash stored in the hash entry.
        U32     HeHASH(HEW he)

HeKEY 8
Returns the actual pointer stored in the key slot of the hash entry.  The
pointer may be either charW(fR or SVW(fR, depending on the value of
HeKLEN()(fR.  Can be assigned to.  The HePV()(fR or HeSVKEY()(fR macros are
usually preferable for finding the value of a key.
        voidW   HeKEY(HEW he)

HeKLEN 8
If this is negative, and amounts to HEf_SVKEY(fR, it indicates the entry
holds an SVW(fR key.  Otherwise, holds the actual length of the key.  Can
be assigned to.  The HePV()(fR macro is usually preferable for finding key
lengths.
        STRLEN  HeKLEN(HEW he)

HePV 8
Returns the key slot of the hash entry as a charW(fR value, doing any
necessary dereferencing of possibly SVW(fR keys.  The length of the string
is placed in len(fR (this is a macro, so do not use &len).  If you do
not care about what the length of the key is, you may use the global
variable PL_na(fR, though this is rather less efficient than using a local
variable.  Remember though, that hash keys in perl are free to contain
embedded nulls, so using strlen()(fR or similar is not a good way to find
the length of hash keys.  This is very similar to the SvPV()(fR macro
described elsewhere in this document.  See also "HeUTF8".

If you are using HePV(fR to get values to pass to newSVpvn()(fR to create a
new SV, you should consider using newSVhek(HeKEY_hek(he))(fR as it is more
efficient.
        charW   HePV(HEW he, STRLEN len)

HeSVKEY 8
Returns the key as an SVW(fR, or NULL(fR if the hash entry does not
contain an SVW(fR key.
        SVW     HeSVKEY(HEW he)

HeSVKEY_force 8
Returns the key as an SVW(fR.  Will create and return a temporary mortal
SVW(fR if the hash entry contains only a charW(fR key.
        SVW     HeSVKEY_force(HEW he)

HeSVKEY_set 8
Sets the key to a given SVW(fR, taking care to set the appropriate flags to
indicate the presence of an SVW(fR key, and returns the same
SVW(fR.
        SVW     HeSVKEY_set(HEW he, SVW sv)

HeUTF8 8
Returns whether the char W(fR value returned by HePV(fR is encoded in UTF 8,
doing any necessary dereferencing of possibly SVW(fR keys.  The value returned
will be 0 or non 0, not necessarily 1 (or even a value with any low bits set),
so do not blindly assign this to a bool(fR variable, as bool(fR may be a
typedef for char(fR.
        U32     HeUTF8(HEW he)

HeVAL 8
Returns the value slot (type SVW(fR)
stored in the hash entry.  Can be assigned
to.
  SV Wfoo= HeVAL(hv);
  HeVAL(hv)= sv;
        SVW     HeVAL(HEW he)

hv_assert 8
Check that a hash is in an internally consistent state.
        void    hv_assert(HV Whv)

hv_bucket_ratio 8
NOTE: this function is experimental and may change or be
removed without notice.

If the hash is tied dispatches through to the SCALAR tied method,
otherwise if the hash contains no keys returns 0, otherwise returns
a mortal sv containing a string specifying the number of used buckets,
followed by a slash, followed by the number of available buckets.

This function is expensive, it must scan all of the buckets
to determine which are used, and the count is NOT cached.
In a large hash this could be a lot of buckets.
        SVW     hv_bucket_ratio(HV Whv)

hv_clear 8
Frees the all the elements of a hash, leaving it empty.
The XS equivalent of %hash = ()(fR.  See also hv_undef.

See av_clear for a note about the hash possibly being invalid on
return.
        void    hv_clear(HV Whv)

hv_clear_placeholders 8
Clears any placeholders from a hash.  If a restricted hash has any of its keys
marked as readonly and the key is subsequently deleted, the key is not actually
deleted but is marked by assigning it a value of &PL_sv_placeholder.  This tags
it so it will be ignored by future operations such as iterating over the hash,
but will still allow the hash to have a value reassigned to the key at some
future point.  This function clears any such placeholder keys from the hash.
See Hash::Util::lock_keys()(fR for an example of its
use.
        void    hv_clear_placeholders(HV Whv)

hv_copy_hints_hv 8
A specialised version of newHVhv for copying %^H(fR.  ohv(fR must be
a pointer to a hash (which may have %^H(fR magic, but should be generally
non magical), or NULL(fR (interpreted as an empty hash).  The content
of ohv(fR is copied to a new hash, which has the %^H(fR specific magic
added to it.  A pointer to the new hash is returned.
        HV W    hv_copy_hints_hv(HV Wohv)

hv_delete 8
Deletes a key/value pair in the hash.  The value's SV is removed from
the hash, made mortal, and returned to the caller.  The absolute
value of klen(fR is the length of the key.  If klen(fR is negative the
key is assumed to be in UTF 8 encoded Unicode.  The flags(fR value
will normally be zero; if set to G_DISCARD(fR then NULL(fR will be returned.
NULL(fR will also be returned if the key is not found.
        SVW     hv_delete(HV Whv, const char Wkey, I32 klen,
                          I32 flags)

hv_delete_ent 8
Deletes a key/value pair in the hash.  The value SV is removed from the hash,
made mortal, and returned to the caller.  The flags(fR value will normally be
zero; if set to G_DISCARD(fR then NULL(fR will be returned.  NULL(fR will also
be returned if the key is not found.  hash(fR can be a valid precomputed hash
value, or 0 to ask for it to be computed.
        SVW     hv_delete_ent(HV Whv, SV Wkeysv, I32 flags,
                              U32 hash)

HvENAME 8
Returns the effective name of a stash, or NULL if there is none.  The
effective name represents a location in the symbol table where this stash
resides.  It is updated automatically when packages are aliased or deleted.
A stash that is no longer in the symbol table has no effective name.  This
name is preferable to HvNAME(fR for use in MRO linearisations and isa
caches.
        charW   HvENAME(HVW stash)

HvENAMELEN 8
Returns the length of the stash's effective name.
        STRLEN  HvENAMELEN(HV Wstash)

HvENAMEUTF8 8
Returns true if the effective name is in UTF 8 encoding.
        unsigned char HvENAMEUTF8(HV Wstash)

hv_exists 8
Returns a boolean indicating whether the specified hash key exists.  The
absolute value of klen(fR is the length of the key.  If klen(fR is
negative the key is assumed to be in UTF 8 encoded Unicode.
        bool    hv_exists(HV Whv, const char Wkey, I32 klen)

hv_exists_ent 8
Returns a boolean indicating whether
the specified hash key exists.  hash(fR
can be a valid precomputed hash value, or 0 to ask for it to be
computed.
        bool    hv_exists_ent(HV Whv, SV Wkeysv, U32 hash)

hv_fetch 8
Returns the SV which corresponds to the specified key in the hash.
The absolute value of klen(fR is the length of the key.  If klen(fR is
negative the key is assumed to be in UTF 8 encoded Unicode.  If
lval(fR is set then the fetch will be part of a store.  This means that if
there is no value in the hash associated with the given key, then one is
created and a pointer to it is returned.  The SVW(fR it points to can be
assigned to.  But always check that the
return value is non null before dereferencing it to an SVW(fR.

See Understanding the Magic of Tied Hashes and Arrays in perlguts for more
information on how to use this function on tied hashes.
        SVWW    hv_fetch(HV Whv, const char Wkey, I32 klen,
                         I32 lval)

hv_fetchs 8
Like hv_fetch(fR, but takes a literal string instead of a
string/length pair.
        SVWW    hv_fetchs(HVW tb, "literal string" key,
                          I32 lval)

hv_fetch_ent 8
Returns the hash entry which corresponds to the specified key in the hash.
hash(fR must be a valid precomputed hash number for the given key(fR, or 0
if you want the function to compute it.  IF lval(fR is set then the fetch
will be part of a store.  Make sure the return value is non null before
accessing it.  The return value when hv(fR is a tied hash is a pointer to a
static location, so be sure to make a copy of the structure if you need to
store it somewhere.

See Understanding the Magic of Tied Hashes and Arrays in perlguts for more
information on how to use this function on tied hashes.
        HEW     hv_fetch_ent(HV Whv, SV Wkeysv, I32 lval,
                             U32 hash)

hv_fill 8
Returns the number of hash buckets that happen to be in use.

This function is wrapped by the macro HvFILL(fR.

As of perl 5.25 this function is used only for debugging
purposes, and the number of used hash buckets is not
in any way cached, thus this function can be costly
to execute as it must iterate over all the buckets in the
hash.
        STRLEN  hv_fill(HV Wconst hv)

hv_iterinit 8
Prepares a starting point to traverse a hash table.  Returns the number of
keys in the hash, including placeholders (i.e. the same as HvTOTALKEYS(hv)(fR).
The return value is currently only meaningful for hashes without tie magic.

NOTE: Before version 5.004_65, hv_iterinit(fR used to return the number of
hash buckets that happen to be in use.  If you still need that esoteric
value, you can get it through the macro HvFILL(hv)(fR.
        I32     hv_iterinit(HV Whv)

hv_iterkey 8
Returns the key from the current position of the hash iterator.  See
"hv_iterinit".
        charW   hv_iterkey(HEW entry, I32W retlen)

hv_iterkeysv 8
Returns the key as an SVW(fR from the current position of the hash
iterator.  The return value will always be a mortal copy of the key.  Also
see "hv_iterinit".
        SVW     hv_iterkeysv(HEW entry)

hv_iternext 8
Returns entries from a hash iterator.  See "hv_iterinit".

You may call hv_delete(fR or hv_delete_ent(fR on the hash entry that the
iterator currently points to, without losing your place or invalidating your
iterator.  Note that in this case the current entry is deleted from the hash
with your iterator holding the last reference to it.  Your iterator is flagged
to free the entry on the next call to hv_iternext(fR, so you must not discard
your iterator immediately else the entry will leak   call hv_iternext(fR to
trigger the resource deallocation.
        HEW     hv_iternext(HV Whv)

hv_iternextsv 8
Performs an hv_iternext(fR, hv_iterkey(fR, and hv_iterval(fR in one
operation.
        SVW     hv_iternextsv(HV Whv, char WWkey, I32 Wretlen)

hv_iternext_flags 8
NOTE: this function is experimental and may change or be
removed without notice.

Returns entries from a hash iterator.  See "hv_iterinit" and
"hv_iternext".
The flags(fR value will normally be zero; if HV_ITERNEXT_WANTPLACEHOLDERS(fR is
set the placeholders keys (for restricted hashes) will be returned in addition
to normal keys.  By default placeholders are automatically skipped over.
Currently a placeholder is implemented with a value that is
&PL_sv_placeholder.  Note that the implementation of placeholders and
restricted hashes may change, and the implementation currently is
insufficiently abstracted for any change to be tidy.
        HEW     hv_iternext_flags(HV Whv, I32 flags)

hv_iterval 8
Returns the value from the current position of the hash iterator.  See
"hv_iterkey".
        SVW     hv_iterval(HV Whv, HE Wentry)

hv_magic 8
Adds magic to a hash.  See "sv_magic".
        void    hv_magic(HV Whv, GV Wgv, int how)

HvNAME 8
Returns the package name of a stash, or NULL(fR if stash(fR isn't a stash.
See "SvSTASH", "CvSTASH".
        charW   HvNAME(HVW stash)

HvNAMELEN 8
Returns the length of the stash's name.
        STRLEN  HvNAMELEN(HV Wstash)

HvNAMEUTF8 8
Returns true if the name is in UTF 8 encoding.
        unsigned char HvNAMEUTF8(HV Wstash)

hv_scalar 8
Evaluates the hash in scalar context and returns the result.

When the hash is tied dispatches through to the SCALAR method,
otherwise returns a mortal SV containing the number of keys
in the hash.

Note, prior to 5.25 this function returned what is now
returned by the hv_bucket_ratio() function.
        SVW     hv_scalar(HV Whv)

hv_store 8
Stores an SV in a hash.  The hash key is specified as key(fR and the
absolute value of klen(fR is the length of the key.  If klen(fR is
negative the key is assumed to be in UTF 8 encoded Unicode.  The
hash(fR parameter is the precomputed hash value; if it is zero then
Perl will compute it.

The return value will be
NULL(fR if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise it can
be dereferenced to get the original SVW(fR.  Note that the caller is
responsible for suitably incrementing the reference count of val(fR before
the call, and decrementing it if the function returned NULL(fR.  Effectively
a successful hv_store(fR takes ownership of one reference to val(fR.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, hv_store(fR
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  hv_store(fR is not implemented as a call to
hv_store_ent(fR, and does not create a temporary SV for the key, so if your
key data is not already in SV form then use hv_store(fR in preference to
hv_store_ent(fR.

See Understanding the Magic of Tied Hashes and Arrays in perlguts for more
information on how to use this function on tied hashes.
        SVWW    hv_store(HV Whv, const char Wkey, I32 klen,
                         SV Wval, U32 hash)

hv_stores 8
Like hv_store(fR, but takes a literal string instead of a
string/length pair
and omits the hash parameter.
        SVWW    hv_stores(HVW tb, "literal string" key, SVW val)

hv_store_ent 8
Stores val(fR in a hash.  The hash key is specified as key(fR.  The hash(fR
parameter is the precomputed hash value; if it is zero then Perl will
compute it.  The return value is the new hash entry so created.  It will be
NULL(fR if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise the
contents of the return value can be accessed using the He?(fR macros
described here.  Note that the caller is responsible for suitably
incrementing the reference count of val(fR before the call, and
decrementing it if the function returned NULL.  Effectively a successful
hv_store_ent(fR takes ownership of one reference to val(fR.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, hv_store(fR
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  Note that hv_store_ent(fR only reads the key(fR;
unlike val(fR it does not take ownership of it, so maintaining the correct
reference count on key(fR is entirely the caller's responsibility.  hv_store(fR
is not implemented as a call to hv_store_ent(fR, and does not create a temporary
SV for the key, so if your key data is not already in SV form then use
hv_store(fR in preference to hv_store_ent(fR.

See Understanding the Magic of Tied Hashes and Arrays in perlguts for more
information on how to use this function on tied hashes.
        HEW     hv_store_ent(HV Whv, SV Wkey, SV Wval, U32 hash)

hv_undef 8
Undefines the hash.  The XS equivalent of undef(%hash)(fR.

As well as freeing all the elements of the hash (like hv_clear()(fR), this
also frees any auxiliary data and storage associated with the hash.

See av_clear for a note about the hash possibly being invalid on
return.
        void    hv_undef(HV Whv)

newHV 8
Creates a new HV.  The reference count is set to 1.
        HVW     newHV()

Hook manipulation

These functions provide convenient and thread safe means of manipulating
hook variables.
wrap_op_checker 8
Puts a C function into the chain of check functions for a specified op
type.  This is the preferred way to manipulate the PL_check array.
opcode(fR specifies which type of op is to be affected.  new_checker(fR
is a pointer to the C function that is to be added to that opcode's
check chain, and old_checker_p(fR points to the storage location where a
pointer to the next function in the chain will be stored.  The value of
new_checker(fR is written into the PL_check array, while the value
previously stored there is written to Wold_checker_p.

PL_check is global to an entire process, and a module wishing to
hook op checking may find itself invoked more than once per process,
typically in different threads.  To handle that situation, this function
is idempotent.  The location Wold_checker_p must initially (once
per process) contain a null pointer.  A C variable of static duration
(declared at file scope, typically also marked static(fR to give
it internal linkage) will be implicitly initialised appropriately,
if it does not have an explicit initialiser.  This function will only
actually modify the check chain if it finds Wold_checker_p to be null.
This function is also thread safe on the small scale.  It uses appropriate
locking to avoid race conditions in accessing PL_check.

When this function is called, the function referenced by new_checker(fR
must be ready to be called, except for Wold_checker_p being unfilled.
In a threading situation, new_checker(fR may be called immediately,
even before this function has returned.  Wold_checker_p will always
be appropriately set before new_checker(fR is called.  If new_checker(fR
decides not to do anything special with an op that it is given (which
is the usual case for most uses of op check hooking), it must chain the
check function referenced by Wold_checker_p.

Taken all together, XS code to hook an op checker should typically look
something like this:
    static Perl_check_t nxck_frob;
    static OP Wmyck_frob(pTHX_ OP Wop) {
        ...
        op = nxck_frob(aTHX_ op);
        ...
        return op;
    }
    BOOT:
        wrap_op_checker(OP_FROB, myck_frob, &nxck_frob);
If you want to influence compilation of calls to a specific subroutine,
then use cv_set_call_checker_flags rather than hooking checking of
all entersub(fR ops.
        void    wrap_op_checker(Optype opcode,
                                Perl_check_t new_checker,
                                Perl_check_t Wold_checker_p)

Lexer interface

This is the lower layer of the Perl parser, managing characters and tokens.
lex_bufutf8 8
NOTE: this function is experimental and may change or be
removed without notice.

Indicates whether the octets in the lexer buffer
(PL_parser >linestr) should be interpreted as the UTF 8 encoding
of Unicode characters.  If not, they should be interpreted as Latin 1
characters.  This is analogous to the SvUTF8(fR flag for scalars.

In UTF 8 mode, it is not guaranteed that the lexer buffer actually
contains valid UTF 8.  Lexing code must be robust in the face of invalid
encoding.

The actual SvUTF8(fR flag of the PL_parser >linestr scalar
is significant, but not the whole story regarding the input character
encoding.  Normally, when a file is being read, the scalar contains octets
and its SvUTF8(fR flag is off, but the octets should be interpreted as
UTF 8 if the use utf8(fR pragma is in effect.  During a string eval,
however, the scalar may have the SvUTF8(fR flag on, and in this case its
octets should be interpreted as UTF 8 unless the use bytes(fR pragma
is in effect.  This logic may change in the future; use this function
instead of implementing the logic yourself.
        bool    lex_bufutf8()

lex_discard_to 8
NOTE: this function is experimental and may change or be
removed without notice.

Discards the first part of the PL_parser >linestr buffer,
up to ptr(fR.  The remaining content of the buffer will be moved, and
all pointers into the buffer updated appropriately.  ptr(fR must not
be later in the buffer than the position of PL_parser >bufptr:
it is not permitted to discard text that has yet to be lexed.

Normally it is not necessarily to do this directly, because it suffices to
use the implicit discarding behaviour of lex_next_chunk and things
based on it.  However, if a token stretches across multiple lines,
and the lexing code has kept multiple lines of text in the buffer for
that purpose, then after completion of the token it would be wise to
explicitly discard the now unneeded earlier lines, to avoid future
multi line tokens growing the buffer without bound.
        void    lex_discard_to(char Wptr)

lex_grow_linestr 8
NOTE: this function is experimental and may change or be
removed without notice.

Reallocates the lexer buffer (PL_parser >linestr) to accommodate
at least len(fR octets (including terminating NUL(fR).  Returns a
pointer to the reallocated buffer.  This is necessary before making
any direct modification of the buffer that would increase its length.
lex_stuff_pvn provides a more convenient way to insert text into
the buffer.

Do not use SvGROW(fR or sv_grow(fR directly on PL_parser >linestr(fR;
this function updates all of the lexer's variables that point directly
into the buffer.
        char W  lex_grow_linestr(STRLEN len)

lex_next_chunk 8
NOTE: this function is experimental and may change or be
removed without notice.

Reads in the next chunk of text to be lexed, appending it to
PL_parser >linestr.  This should be called when lexing code has
looked to the end of the current chunk and wants to know more.  It is
usual, but not necessary, for lexing to have consumed the entirety of
the current chunk at this time.

If PL_parser >bufptr is pointing to the very end of the current
chunk (i.e., the current chunk has been entirely consumed), normally the
current chunk will be discarded at the same time that the new chunk is
read in.  If flags(fR has the LEX_KEEP_PREVIOUS(fR bit set, the current chunk
will not be discarded.  If the current chunk has not been entirely
consumed, then it will not be discarded regardless of the flag.

Returns true if some new text was added to the buffer, or false if the
buffer has reached the end of the input text.
        bool    lex_next_chunk(U32 flags)

lex_peek_unichar 8
NOTE: this function is experimental and may change or be
removed without notice.

Looks ahead one (Unicode) character in the text currently being lexed.
Returns the codepoint (unsigned integer value) of the next character,
or  1 if lexing has reached the end of the input text.  To consume the
peeked character, use lex_read_unichar.

If the next character is in (or extends into) the next chunk of input
text, the next chunk will be read in.  Normally the current chunk will be
discarded at the same time, but if flags(fR has the LEX_KEEP_PREVIOUS(fR
bit set, then the current chunk will not be discarded.

If the input is being interpreted as UTF 8 and a UTF 8 encoding error
is encountered, an exception is generated.
        I32     lex_peek_unichar(U32 flags)

lex_read_space 8
NOTE: this function is experimental and may change or be
removed without notice.

Reads optional spaces, in Perl style, in the text currently being
lexed.  The spaces may include ordinary whitespace characters and
Perl style comments.  #line(fR directives are processed if encountered.
PL_parser >bufptr is moved past the spaces, so that it points
at a non space character (or the end of the input text).

If spaces extend into the next chunk of input text, the next chunk will
be read in.  Normally the current chunk will be discarded at the same
time, but if flags(fR has the LEX_KEEP_PREVIOUS(fR bit set, then the current
chunk will not be discarded.
        void    lex_read_space(U32 flags)

lex_read_to 8
NOTE: this function is experimental and may change or be
removed without notice.

Consume text in the lexer buffer, from PL_parser >bufptr up
to ptr(fR.  This advances PL_parser >bufptr to match ptr(fR,
performing the correct bookkeeping whenever a newline character is passed.
This is the normal way to consume lexed text.

Interpretation of the buffer's octets can be abstracted out by
using the slightly higher level functions lex_peek_unichar and
lex_read_unichar.
        void    lex_read_to(char Wptr)

lex_read_unichar 8
NOTE: this function is experimental and may change or be
removed without notice.

Reads the next (Unicode) character in the text currently being lexed.
Returns the codepoint (unsigned integer value) of the character read,
and moves PL_parser >bufptr past the character, or returns  1
if lexing has reached the end of the input text.  To non destructively
examine the next character, use lex_peek_unichar instead.

If the next character is in (or extends into) the next chunk of input
text, the next chunk will be read in.  Normally the current chunk will be
discarded at the same time, but if flags(fR has the LEX_KEEP_PREVIOUS(fR
bit set, then the current chunk will not be discarded.

If the input is being interpreted as UTF 8 and a UTF 8 encoding error
is encountered, an exception is generated.
        I32     lex_read_unichar(U32 flags)

lex_start 8
NOTE: this function is experimental and may change or be
removed without notice.

Creates and initialises a new lexer/parser state object, supplying
a context in which to lex and parse from a new source of Perl code.
A pointer to the new state object is placed in PL_parser.  An entry
is made on the save stack so that upon unwinding, the new state object
will be destroyed and the former value of PL_parser will be restored.
Nothing else need be done to clean up the parsing context.

The code to be parsed comes from line(fR and rsfp(fR.  line(fR, if
non null, provides a string (in SV form) containing code to be parsed.
A copy of the string is made, so subsequent modification of line(fR
does not affect parsing.  rsfp(fR, if non null, provides an input stream
from which code will be read to be parsed.  If both are non null, the
code in line(fR comes first and must consist of complete lines of input,
and rsfp(fR supplies the remainder of the source.

The flags(fR parameter is reserved for future use.  Currently it is only
used by perl internally, so extensions should always pass zero.
        void    lex_start(SV Wline, PerlIO Wrsfp, U32 flags)

lex_stuff_pv 8
NOTE: this function is experimental and may change or be
removed without notice.

Insert characters into the lexer buffer (PL_parser >linestr),
immediately after the current lexing point (PL_parser >bufptr),
reallocating the buffer if necessary.  This means that lexing code that
runs later will see the characters as if they had appeared in the input.
It is not recommended to do this as part of normal parsing, and most
uses of this facility run the risk of the inserted characters being
interpreted in an unintended manner.

The string to be inserted is represented by octets starting at pv(fR
and continuing to the first nul.  These octets are interpreted as either
UTF 8 or Latin 1, according to whether the LEX_STUFF_UTF8(fR flag is set
in flags(fR.  The characters are recoded for the lexer buffer, according
to how the buffer is currently being interpreted (lex_bufutf8).
If it is not convenient to nul terminate a string to be inserted, the
lex_stuff_pvn function is more appropriate.
        void    lex_stuff_pv(const char Wpv, U32 flags)

lex_stuff_pvn 8
NOTE: this function is experimental and may change or be
removed without notice.

Insert characters into the lexer buffer (PL_parser >linestr),
immediately after the current lexing point (PL_parser >bufptr),
reallocating the buffer if necessary.  This means that lexing code that
runs later will see the characters as if they had appeared in the input.
It is not recommended to do this as part of normal parsing, and most
uses of this facility run the risk of the inserted characters being
interpreted in an unintended manner.

The string to be inserted is represented by len(fR octets starting
at pv(fR.  These octets are interpreted as either UTF 8 or Latin 1,
according to whether the LEX_STUFF_UTF8(fR flag is set in flags(fR.
The characters are recoded for the lexer buffer, according to how the
buffer is currently being interpreted (lex_bufutf8).  If a string
to be inserted is available as a Perl scalar, the lex_stuff_sv
function is more convenient.
        void    lex_stuff_pvn(const char Wpv, STRLEN len,
                              U32 flags)

lex_stuff_pvs 8
NOTE: this function is experimental and may change or be
removed without notice.

Like lex_stuff_pvn, but takes a literal string instead of
a string/length pair.
        void    lex_stuff_pvs("literal string" pv, U32 flags)

lex_stuff_sv 8
NOTE: this function is experimental and may change or be
removed without notice.

Insert characters into the lexer buffer (PL_parser >linestr),
immediately after the current lexing point (PL_parser >bufptr),
reallocating the buffer if necessary.  This means that lexing code that
runs later will see the characters as if they had appeared in the input.
It is not recommended to do this as part of normal parsing, and most
uses of this facility run the risk of the inserted characters being
interpreted in an unintended manner.

The string to be inserted is the string value of sv(fR.  The characters
are recoded for the lexer buffer, according to how the buffer is currently
being interpreted (lex_bufutf8).  If a string to be inserted is
not already a Perl scalar, the lex_stuff_pvn function avoids the
need to construct a scalar.
        void    lex_stuff_sv(SV Wsv, U32 flags)

lex_unstuff 8
NOTE: this function is experimental and may change or be
removed without notice.

Discards text about to be lexed, from PL_parser >bufptr up to
ptr(fR.  Text following ptr(fR will be moved, and the buffer shortened.
This hides the discarded text from any lexing code that runs later,
as if the text had never appeared.

This is not the normal way to consume lexed text.  For that, use
lex_read_to.
        void    lex_unstuff(char Wptr)

parse_arithexpr 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a Perl arithmetic expression.  This may contain operators of precedence
down to the bit shift operators.  The expression must be followed (and thus
terminated) either by a comparison or lower precedence operator or by
something that would normally terminate an expression such as semicolon.
If flags(fR has the PARSE_OPTIONAL(fR bit set, then the expression is optional,
otherwise it is mandatory.  It is up to the caller to ensure that the
dynamic parser state (PL_parser et al) is correctly set to reflect
the source of the code to be parsed and the lexical context for the
expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.
        OP W    parse_arithexpr(U32 flags)

parse_barestmt 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a single unadorned Perl statement.  This may be a normal imperative
statement or a declaration that has compile time effect.  It does not
include any label or other affixture.  It is up to the caller to ensure
that the dynamic parser state (PL_parser et al) is correctly set to
reflect the source of the code to be parsed and the lexical context for
the statement.

The op tree representing the statement is returned.  This may be a
null pointer if the statement is null, for example if it was actually
a subroutine definition (which has compile time side effects).  If not
null, it will be ops directly implementing the statement, suitable to
pass to newSTATEOP.  It will not normally include a nextstate(fR or
equivalent op (except for those embedded in a scope contained entirely
within the statement).

If an error occurs in parsing or compilation, in most cases a valid op
tree (most likely null) is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
Some compilation errors, however, will throw an exception immediately.

The flags(fR parameter is reserved for future use, and must always
be zero.
        OP W    parse_barestmt(U32 flags)

parse_block 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a single complete Perl code block.  This consists of an opening
brace, a sequence of statements, and a closing brace.  The block
constitutes a lexical scope, so my(fR variables and various compile time
effects can be contained within it.  It is up to the caller to ensure
that the dynamic parser state (PL_parser et al) is correctly set to
reflect the source of the code to be parsed and the lexical context for
the statement.

The op tree representing the code block is returned.  This is always a
real op, never a null pointer.  It will normally be a lineseq(fR list,
including nextstate(fR or equivalent ops.  No ops to construct any kind
of runtime scope are included by virtue of it being a block.

If an error occurs in parsing or compilation, in most cases a valid op
tree (most likely null) is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
Some compilation errors, however, will throw an exception immediately.

The flags(fR parameter is reserved for future use, and must always
be zero.
        OP W    parse_block(U32 flags)

parse_fullexpr 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a single complete Perl expression.  This allows the full
expression grammar, including the lowest precedence operators such
as or(fR.  The expression must be followed (and thus terminated) by a
token that an expression would normally be terminated by: end of file,
closing bracketing punctuation, semicolon, or one of the keywords that
signals a postfix expression statement modifier.  If flags(fR has the
PARSE_OPTIONAL(fR bit set, then the expression is optional, otherwise it is
mandatory.  It is up to the caller to ensure that the dynamic parser
state (PL_parser et al) is correctly set to reflect the source of
the code to be parsed and the lexical context for the expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.
        OP W    parse_fullexpr(U32 flags)

parse_fullstmt 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a single complete Perl statement.  This may be a normal imperative
statement or a declaration that has compile time effect, and may include
optional labels.  It is up to the caller to ensure that the dynamic
parser state (PL_parser et al) is correctly set to reflect the source
of the code to be parsed and the lexical context for the statement.

The op tree representing the statement is returned.  This may be a
null pointer if the statement is null, for example if it was actually
a subroutine definition (which has compile time side effects).  If not
null, it will be the result of a newSTATEOP call, normally including
a nextstate(fR or equivalent op.

If an error occurs in parsing or compilation, in most cases a valid op
tree (most likely null) is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
Some compilation errors, however, will throw an exception immediately.

The flags(fR parameter is reserved for future use, and must always
be zero.
        OP W    parse_fullstmt(U32 flags)

parse_label 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a single label, possibly optional, of the type that may prefix a
Perl statement.  It is up to the caller to ensure that the dynamic parser
state (PL_parser et al) is correctly set to reflect the source of
the code to be parsed.  If flags(fR has the PARSE_OPTIONAL(fR bit set, then the
label is optional, otherwise it is mandatory.

The name of the label is returned in the form of a fresh scalar.  If an
optional label is absent, a null pointer is returned.

If an error occurs in parsing, which can only occur if the label is
mandatory, a valid label is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
        SV W    parse_label(U32 flags)

parse_listexpr 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a Perl list expression.  This may contain operators of precedence
down to the comma operator.  The expression must be followed (and thus
terminated) either by a low precedence logic operator such as or(fR or by
something that would normally terminate an expression such as semicolon.
If flags(fR has the PARSE_OPTIONAL(fR bit set, then the expression is optional,
otherwise it is mandatory.  It is up to the caller to ensure that the
dynamic parser state (PL_parser et al) is correctly set to reflect
the source of the code to be parsed and the lexical context for the
expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.
        OP W    parse_listexpr(U32 flags)

parse_stmtseq 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a sequence of zero or more Perl statements.  These may be normal
imperative statements, including optional labels, or declarations
that have compile time effect, or any mixture thereof.  The statement
sequence ends when a closing brace or end of file is encountered in a
place where a new statement could have validly started.  It is up to
the caller to ensure that the dynamic parser state (PL_parser et al)
is correctly set to reflect the source of the code to be parsed and the
lexical context for the statements.

The op tree representing the statement sequence is returned.  This may
be a null pointer if the statements were all null, for example if there
were no statements or if there were only subroutine definitions (which
have compile time side effects).  If not null, it will be a lineseq(fR
list, normally including nextstate(fR or equivalent ops.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.

The flags(fR parameter is reserved for future use, and must always
be zero.
        OP W    parse_stmtseq(U32 flags)

parse_termexpr 8
NOTE: this function is experimental and may change or be
removed without notice.

Parse a Perl term expression.  This may contain operators of precedence
down to the assignment operators.  The expression must be followed (and thus
terminated) either by a comma or lower precedence operator or by
something that would normally terminate an expression such as semicolon.
If flags(fR has the PARSE_OPTIONAL(fR bit set, then the expression is optional,
otherwise it is mandatory.  It is up to the caller to ensure that the
dynamic parser state (PL_parser et al) is correctly set to reflect
the source of the code to be parsed and the lexical context for the
expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.
        OP W    parse_termexpr(U32 flags)

PL_parser 8
Pointer to a structure encapsulating the state of the parsing operation
currently in progress.  The pointer can be locally changed to perform
a nested parse without interfering with the state of an outer parse.
Individual members of PL_parser(fR have their own documentation.
PL_parser >bufend 8
NOTE: this function is experimental and may change or be
removed without notice.

Direct pointer to the end of the chunk of text currently being lexed, the
end of the lexer buffer.  This is equal to SvPVX(PL_parser >linestr)
+ SvCUR(PL_parser >linestr)(fR.  A NUL(fR character (zero octet) is
always located at the end of the buffer, and does not count as part of
the buffer's contents.
PL_parser >bufptr 8
NOTE: this function is experimental and may change or be
removed without notice.

Points to the current position of lexing inside the lexer buffer.
Characters around this point may be freely examined, within
the range delimited by SvPVX("PL_parser >linestr")(fR and
PL_parser >bufend.  The octets of the buffer may be intended to be
interpreted as either UTF 8 or Latin 1, as indicated by lex_bufutf8.

Lexing code (whether in the Perl core or not) moves this pointer past
the characters that it consumes.  It is also expected to perform some
bookkeeping whenever a newline character is consumed.  This movement
can be more conveniently performed by the function lex_read_to,
which handles newlines appropriately.

Interpretation of the buffer's octets can be abstracted out by
using the slightly higher level functions lex_peek_unichar and
lex_read_unichar.
PL_parser >linestart 8
NOTE: this function is experimental and may change or be
removed without notice.

Points to the start of the current line inside the lexer buffer.
This is useful for indicating at which column an error occurred, and
not much else.  This must be updated by any lexing code that consumes
a newline; the function lex_read_to handles this detail.
PL_parser >linestr 8
NOTE: this function is experimental and may change or be
removed without notice.

Buffer scalar containing the chunk currently under consideration of the
text currently being lexed.  This is always a plain string scalar (for
which SvPOK(fR is true).  It is not intended to be used as a scalar by
normal scalar means; instead refer to the buffer directly by the pointer
variables described below.

The lexer maintains various charW(fR pointers to things in the
PL_parser >linestr(fR buffer.  If PL_parser >linestr(fR is ever
reallocated, all of these pointers must be updated.  Don't attempt to
do this manually, but rather use lex_grow_linestr if you need to
reallocate the buffer.

The content of the text chunk in the buffer is commonly exactly one
complete line of input, up to and including a newline terminator,
but there are situations where it is otherwise.  The octets of the
buffer may be intended to be interpreted as either UTF 8 or Latin 1.
The function lex_bufutf8 tells you which.  Do not use the SvUTF8(fR
flag on this scalar, which may disagree with it.

For direct examination of the buffer, the variable
PL_parser >bufend points to the end of the buffer.  The current
lexing position is pointed to by PL_parser >bufptr.  Direct use
of these pointers is usually preferable to examination of the scalar
through normal scalar means.
wrap_keyword_plugin 8
NOTE: this function is experimental and may change or be
removed without notice.

Puts a C function into the chain of keyword plugins.  This is the
preferred way to manipulate the PL_keyword_plugin variable.
new_plugin(fR is a pointer to the C function that is to be added to the
keyword plugin chain, and old_plugin_p(fR points to the storage location
where a pointer to the next function in the chain will be stored.  The
value of new_plugin(fR is written into the PL_keyword_plugin variable,
while the value previously stored there is written to Wold_plugin_p.

PL_keyword_plugin is global to an entire process, and a module wishing
to hook keyword parsing may find itself invoked more than once per
process, typically in different threads.  To handle that situation, this
function is idempotent.  The location Wold_plugin_p must initially
(once per process) contain a null pointer.  A C variable of static
duration (declared at file scope, typically also marked static(fR to give
it internal linkage) will be implicitly initialised appropriately, if it
does not have an explicit initialiser.  This function will only actually
modify the plugin chain if it finds Wold_plugin_p to be null.  This
function is also thread safe on the small scale.  It uses appropriate
locking to avoid race conditions in accessing PL_keyword_plugin.

When this function is called, the function referenced by new_plugin(fR
must be ready to be called, except for Wold_plugin_p being unfilled.
In a threading situation, new_plugin(fR may be called immediately, even
before this function has returned.  Wold_plugin_p will always be
appropriately set before new_plugin(fR is called.  If new_plugin(fR
decides not to do anything special with the identifier that it is given
(which is the usual case for most calls to a keyword plugin), it must
chain the plugin function referenced by Wold_plugin_p.

Taken all together, XS code to install a keyword plugin should typically
look something like this:
    static Perl_keyword_plugin_t next_keyword_plugin;
    static OP Wmy_keyword_plugin(pTHX_
        char Wkeyword_plugin, STRLEN keyword_len, OP WWop_ptr)
    {
        if (memEQs(keyword_ptr, keyword_len,
                   "my_new_keyword")) {
            ...
        } else {
            return next_keyword_plugin(aTHX_
                keyword_ptr, keyword_len, op_ptr);
        }
    }
    BOOT:
        wrap_keyword_plugin(my_keyword_plugin,
                            &next_keyword_plugin);
Direct access to PL_keyword_plugin should be avoided.
        void    wrap_keyword_plugin(
                    Perl_keyword_plugin_t new_plugin,
                    Perl_keyword_plugin_t Wold_plugin_p
                )

Locale related functions and macros

DECLARATION_FOR_LC_NUMERIC_MANIPULATION 8
This macro should be used as a statement.  It declares a private variable
(whose name begins with an underscore) that is needed by the other macros in
this section.  Failing to include this correctly should lead to a syntax error.
For compatibility with C89 C compilers it should be placed in a block before
any executable statements.
        void    DECLARATION_FOR_LC_NUMERIC_MANIPULATION

Perl_langinfo 8
This is an (almost) drop in replacement for the system nl_langinfo(3),
taking the same item(fR parameter values, and returning the same information.
But it is more thread safe than regular nl_langinfo()(fR, and hides the quirks
of Perl's locale handling from your code, and can be used on systems that lack
a native nl_langinfo(fR.

Expanding on these:

o 4
The reason it isn't quite a drop in replacement is actually an advantage.  The
only difference is that it returns const char W(fR, whereas plain
nl_langinfo()(fR returns char W(fR, but you are (only by documentation)
forbidden to write into the buffer.  By declaring this const(fR, the compiler
enforces this restriction, so if it is violated, you know at compilation time,
rather than getting segfaults at runtime.
o 4
It delivers the correct results for the RADIXCHAR(fR and THOUSEP(fR items,
without you having to write extra code.  The reason for the extra code would be
because these are from the LC_NUMERIC(fR locale category, which is normally
kept set by Perl so that the radix is a dot, and the separator is the empty
string, no matter what the underlying locale is supposed to be, and so to get
the expected results, you have to temporarily toggle into the underlying
locale, and later toggle back.  (You could use plain nl_langinfo(fR and
"STORE_LC_NUMERIC_FORCE_TO_UNDERLYING" for this but then you wouldn't get
the other advantages of Perl_langinfo()(fR; not keeping LC_NUMERIC(fR in the C
(or equivalent) locale would break a lot of CPAN, which is expecting the radix
(decimal point) character to be a dot.)
o 4
The system function it replaces can have its static return buffer trashed,
not only by a subesequent call to that function, but by a freelocale(fR,
setlocale(fR, or other locale change.  The returned buffer of this function is
not changed until the next call to it, so the buffer is never in a trashed
state.
o 4
Its return buffer is per thread, so it also is never overwritten by a call to
this function from another thread;  unlike the function it replaces.
o 4
But most importantly, it works on systems that don't have nl_langinfo(fR, such
as Windows, hence makes your code more portable.  Of the fifty some possible
items specified by the POSIX 2008 standard,
<http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/langinfo.h.html>,
only one is completely unimplemented, though on non Windows platforms, another
significant one is also not implemented).  It uses various techniques to
recover the other items, including calling localeconv(3), and
strftime(3), both of which are specified in C89, so should be always be
available.  Later strftime()(fR versions have additional capabilities; "" is
returned for those not available on your system.

It is important to note that when called with an item that is recovered by
using localeconv(fR, the buffer from any previous explicit call to
localeconv(fR will be overwritten.  This means you must save that buffer's
contents if you need to access them after a call to this function.  (But note
that you might not want to be using localeconv()(fR directly anyway, because of
issues like the ones listed in the second item of this list (above) for
RADIXCHAR(fR and THOUSEP(fR.  You can use the methods given in perlcall to
call localeconv in POSIX and avoid all the issues, but then you have a hash to
unpack).

The details for those items which may deviate from what this emulation returns
and what a native nl_langinfo()(fR would return are specified in
I18N::Langinfo.
When using Perl_langinfo(fR on systems that don't have a native
nl_langinfo()(fR, you must
 #include "perl_langinfo.h"
before the perl.h(fR #include(fR.  You can replace your langinfo.h(fR
#include(fR with this one.  (Doing it this way keeps out the symbols that plain
langinfo.h(fR would try to import into the namespace for code that doesn't need
it.)

The original impetus for Perl_langinfo()(fR was so that code that needs to
find out the current currency symbol, floating point radix character, or digit
grouping separator can use, on all systems, the simpler and more
thread friendly nl_langinfo(fR API instead of localeconv(3) which is a
pain to make thread friendly.  For other fields returned by localeconv(fR, it
is better to use the methods given in perlcall to call
POSIX::localeconv()(fR, which is thread friendly.
        const charW Perl_langinfo(const nl_item item)
Perl_setlocale 8
This is an (almost) drop in replacement for the system setlocale(3),
taking the same parameters, and returning the same information, except that it
returns the correct underlying LC_NUMERIC(fR locale.  Regular setlocale(fR will
instead return C(fR if the underlying locale has a non dot decimal point
character, or a non empty thousands separator for displaying floating point
numbers.  This is because perl keeps that locale category such that it has a
dot and empty separator, changing the locale briefly during the operations
where the underlying one is required. Perl_setlocale(fR knows about this, and
compensates; regular setlocale(fR doesn't.

Another reason it isn't completely a drop in replacement is that it is
declared to return const char W(fR, whereas the system setlocale omits the
const(fR (presumably because its API was specified long ago, and can't be
updated; it is illegal to change the information setlocale(fR returns; doing
so leads to segfaults.)

Finally, Perl_setlocale(fR works under all circumstances, whereas plain
setlocale(fR can be completely ineffective on some platforms under some
configurations.

Perl_setlocale(fR should not be used to change the locale except on systems
where the predefined variable ${^SAFE_LOCALES}(fR is 1.  On some such systems,
the system setlocale()(fR is ineffective, returning the wrong information, and
failing to actually change the locale.  Perl_setlocale(fR, however works
properly in all circumstances.

The return points to a per thread static buffer, which is overwritten the next
time Perl_setlocale(fR is called from the same thread.
        const charW Perl_setlocale(const int category,
                                   const charW locale)

RESTORE_LC_NUMERIC 8
This is used in conjunction with one of the macros
(s 1STORE_LC_NUMERIC_SET_TO_NEEDED(s0
and (s 1STORE_LC_NUMERIC_FORCE_TO_UNDERLYING(s0 to properly restore the
LC_NUMERIC(fR state.

A call to (s 1DECLARATION_FOR_LC_NUMERIC_MANIPULATION(s0 must have been made to
declare at compile time a private variable used by this macro and the two
STORE(fR ones.  This macro should be called as a single statement, not an
expression, but with an empty argument list, like this:
 {
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
     ...
    RESTORE_LC_NUMERIC();
     ...
 }

        void    RESTORE_LC_NUMERIC()

STORE_LC_NUMERIC_FORCE_TO_UNDERLYING 8
This is used by XS code that that is LC_NUMERIC(fR locale aware to force the
locale for category LC_NUMERIC(fR to be what perl thinks is the current
underlying locale.  (The perl interpreter could be wrong about what the
underlying locale actually is if some C or XS code has called the C library
function setlocale(3) behind its back; calling sync_locale before calling
this macro will update perl's records.)

A call to (s 1DECLARATION_FOR_LC_NUMERIC_MANIPULATION(s0 must have been made to
declare at compile time a private variable used by this macro.  This macro
should be called as a single statement, not an expression, but with an empty
argument list, like this:
 {
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
     ...
    STORE_LC_NUMERIC_FORCE_TO_UNDERLYING();
     ...
    RESTORE_LC_NUMERIC();
     ...
 }
The private variable is used to save the current locale state, so
that the requisite matching call to (s 1RESTORE_LC_NUMERIC(s0 can restore it.

On threaded perls not operating with thread safe functionality, this macro uses
a mutex to force a critical section.  Therefore the matching RESTORE should be
close by, and guaranteed to be called.
        void    STORE_LC_NUMERIC_FORCE_TO_UNDERLYING()

STORE_LC_NUMERIC_SET_TO_NEEDED 8
This is used to help wrap XS or C code that is LC_NUMERIC(fR locale aware.
This locale category is generally kept set to a locale where the decimal radix
character is a dot, and the separator between groups of digits is empty.  This
is because most XS code that reads floating point numbers is expecting them to
have this syntax.

This macro makes sure the current LC_NUMERIC(fR state is set properly, to be
aware of locale if the call to the XS or C code from the Perl program is
from within the scope of a use locale(fR; or to ignore locale if the call is
instead from outside such scope.

This macro is the start of wrapping the C or XS code; the wrap ending is done
by calling the (s 1RESTORE_LC_NUMERIC(s0 macro after the operation.  Otherwise
the state can be changed that will adversely affect other XS code.

A call to (s 1DECLARATION_FOR_LC_NUMERIC_MANIPULATION(s0 must have been made to
declare at compile time a private variable used by this macro.  This macro
should be called as a single statement, not an expression, but with an empty
argument list, like this:
 {
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
     ...
    STORE_LC_NUMERIC_SET_TO_NEEDED();
     ...
    RESTORE_LC_NUMERIC();
     ...
 }
On threaded perls not operating with thread safe functionality, this macro uses
a mutex to force a critical section.  Therefore the matching RESTORE should be
close by, and guaranteed to be called.
        void    STORE_LC_NUMERIC_SET_TO_NEEDED()

switch_to_global_locale 8
On systems without locale support, or on single threaded builds, or on
platforms that do not support per thread locale operations, this function does
nothing.  On such systems that do have locale support, only a locale global to
the whole program is available.

On multi threaded builds on systems that do have per thread locale operations,
this function converts the thread it is running in to use the global locale.
This is for code that has not yet or cannot be updated to handle multi threaded
locale operation.  As long as only a single thread is so converted, everything
works fine, as all the other threads continue to ignore the global one, so only
this thread looks at it.

However, on Windows systems this isn't quite true prior to Visual Studio 15,
at which point Microsoft fixed a bug.  A race can occur if you use the
following operations on earlier Windows platforms:

POSIX::localeconv 4
The first item is not fixable (except by upgrading to a later Visual Studio
release), but it would be possible to work around the latter two items by using
the Windows API functions GetNumberFormat(fR and GetCurrencyFormat(fR; patches
welcome.

Without this function call, threads that use the setlocale(3) system
function will not work properly, as all the locale sensitive functions will
look at the per thread locale, and setlocale(fR will have no effect on this
thread.

Perl code should convert to either call
Perl_setlocale(fR (which is a drop in for the system
setlocale(fR) or use the methods given in perlcall to call
POSIX::setlocale(fR.  Either one will transparently properly
handle all cases of single  vs multi thread, POSIX 2008 supported or not.

Non Perl libraries, such as gtk(fR, that call the system setlocale(fR can
continue to work if this function is called before transferring control to the
library.

Upon return from the code that needs to use the global locale,
sync_locale()(fR should be called to restore the safe
multi thread operation.
        void    switch_to_global_locale()
sync_locale 8
Perl_setlocale(fR can be used at any time to query or
change the locale (though changing the locale is antisocial and dangerous on
multi threaded systems that don't have multi thread safe locale operations.
(See Multi threaded operation in perllocale).  Using the system
setlocale(3) should be avoided.  Nevertheless, certain non Perl libraries
called from XS, such as Gtk(fR do so, and this can't be changed.  When the
locale is changed by XS code that didn't use
Perl_setlocale(fR, Perl needs to be told that the
locale has changed.  Use this function to do so, before returning to Perl.

The return value is a boolean: TRUE if the global locale at the time of call
was in effect; and FALSE if a per thread locale was in effect.  This can be
used by the caller that needs to restore things as they were to decide whether
or not to call
Perl_switch_to_global_locale(fR.
        bool    sync_locale()

Magical Functions

mg_clear 8
Clear something magical that the SV represents.  See "sv_magic".
        int     mg_clear(SVW sv)

mg_copy 8
Copies the magic from one SV to another.  See "sv_magic".
        int     mg_copy(SV Wsv, SV Wnsv, const char Wkey,
                        I32 klen)

mg_find 8
Finds the magic pointer for type(fR matching the SV.  See "sv_magic".
        MAGICW  mg_find(const SVW sv, int type)

mg_findext 8
Finds the magic pointer of type(fR with the given vtbl(fR for the SV(fR.  See
"sv_magicext".
        MAGICW  mg_findext(const SVW sv, int type,
                           const MGVTBL Wvtbl)

mg_free 8
Free any magic storage used by the SV.  See "sv_magic".
        int     mg_free(SVW sv)

mg_freeext 8
Remove any magic of type how(fR using virtual table vtbl(fR from the
SV sv(fR.  See sv_magic.

mg_freeext(sv, how, NULL)(fR is equivalent to mg_free_type(sv, how)(fR.
        void    mg_freeext(SVW sv, int how, const MGVTBL Wvtbl)

mg_free_type 8
Remove any magic of type how(fR from the SV sv(fR.  See sv_magic.
        void    mg_free_type(SV Wsv, int how)

mg_get 8
Do magic before a value is retrieved from the SV.  The type of SV must
be >= SVt_PVMG(fR.  See "sv_magic".
        int     mg_get(SVW sv)

mg_length 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Reports on the SV's length in bytes, calling length magic if available,
but does not set the UTF8 flag on sv(fR.  It will fall back to 'get'
magic if there is no 'length' magic, but with no indication as to
whether it called 'get' magic.  It assumes sv(fR is a PVMG(fR or
higher.  Use sv_len()(fR instead.
        U32     mg_length(SVW sv)

mg_magical 8
Turns on the magical status of an SV.  See "sv_magic".
        void    mg_magical(SVW sv)

mg_set 8
Do magic after a value is assigned to the SV.  See "sv_magic".
        int     mg_set(SVW sv)

SvGETMAGIC 8
Invokes mg_get(fR on an SV if it has 'get' magic.  For example, this
will call FETCH(fR on a tied variable.  This macro evaluates its
argument more than once.
        void    SvGETMAGIC(SVW sv)

SvLOCK 8
Arranges for a mutual exclusion lock to be obtained on sv(fR if a suitable module
has been loaded.
        void    SvLOCK(SVW sv)

SvSETMAGIC 8
Invokes mg_set(fR on an SV if it has 'set' magic.  This is necessary
after modifying a scalar, in case it is a magical variable like $|
or a tied variable (it calls STORE(fR).  This macro evaluates its
argument more than once.
        void    SvSETMAGIC(SVW sv)

SvSetMagicSV 8
Like SvSetSV(fR, but does any set magic required afterwards.
        void    SvSetMagicSV(SVW dsv, SVW ssv)

SvSetMagicSV_nosteal 8
Like SvSetSV_nosteal(fR, but does any set magic required afterwards.
        void    SvSetMagicSV_nosteal(SVW dsv, SVW ssv)

SvSetSV 8
Calls sv_setsv(fR if dsv(fR is not the same as ssv(fR.  May evaluate arguments
more than once.  Does not handle 'set' magic on the destination SV.
        void    SvSetSV(SVW dsv, SVW ssv)

SvSetSV_nosteal 8
Calls a non destructive version of sv_setsv(fR if dsv(fR is not the same as
ssv(fR.  May evaluate arguments more than once.
        void    SvSetSV_nosteal(SVW dsv, SVW ssv)

SvSHARE 8
Arranges for sv(fR to be shared between threads if a suitable module
has been loaded.
        void    SvSHARE(SVW sv)

sv_string_from_errnum 8
Generates the message string describing an OS error and returns it as
an SV.  errnum(fR must be a value that errno(fR could take, identifying
the type of error.

If tgtsv(fR is non null then the string will be written into that SV
(overwriting existing content) and it will be returned.  If tgtsv(fR
is a null pointer then the string will be written into a new mortal SV
which will be returned.

The message will be taken from whatever locale would be used by $!,
and will be encoded in the SV in whatever manner would be used by $!.
The details of this process are subject to future change.  Currently,
the message is taken from the C locale by default (usually producing an
English message), and from the currently selected locale when in the scope
of the use locale(fR pragma.  A heuristic attempt is made to decode the
message from the locale's character encoding, but it will only be decoded
as either UTF 8 or ISO 8859 1.  It is always correctly decoded in a UTF 8
locale, usually in an ISO 8859 1 locale, and never in any other locale.

The SV is always returned containing an actual string, and with no other
OK bits set.  Unlike $!, a message is even yielded for errnum(fR zero
(meaning success), and if no useful message is available then a useless
string (currently empty) is returned.
        SV W    sv_string_from_errnum(int errnum, SV Wtgtsv)

SvUNLOCK 8
Releases a mutual exclusion lock on sv(fR if a suitable module
has been loaded.
        void    SvUNLOCK(SVW sv)

Memory Management

Copy 8
The XSUB writer's interface to the C memcpy(fR function.  The src(fR is the
source, dest(fR is the destination, nitems(fR is the number of items, and
type(fR is the type.  May fail on overlapping copies.  See also "Move".
        void    Copy(voidW src, voidW dest, int nitems, type)

CopyD 8
Like Copy(fR but returns dest(fR.  Useful
for encouraging compilers to tail call
optimise.
        void W  CopyD(voidW src, voidW dest, int nitems, type)

Move 8
The XSUB writer's interface to the C memmove(fR function.  The src(fR is the
source, dest(fR is the destination, nitems(fR is the number of items, and
type(fR is the type.  Can do overlapping moves.  See also "Copy".
        void    Move(voidW src, voidW dest, int nitems, type)

MoveD 8
Like Move(fR but returns dest(fR.  Useful
for encouraging compilers to tail call
optimise.
        void W  MoveD(voidW src, voidW dest, int nitems, type)

Newx 8
The XSUB writer's interface to the C malloc(fR function.

Memory obtained by this should ONLY be freed with Safefree.

In 5.9.3, Newx() and friends replace the older New() API, and drops
the first parameter, x, a debug aid which allowed callers to identify
themselves.  This aid has been superseded by a new build option,
PERL_MEM_LOG (see (s 1PERL_MEM_LOG(s0 in perlhacktips).  The older API is still
there for use in XS modules supporting older perls.
        void    Newx(voidW ptr, int nitems, type)

Newxc 8
The XSUB writer's interface to the C malloc(fR function, with
cast.  See also "Newx".

Memory obtained by this should ONLY be freed with Safefree.
        void    Newxc(voidW ptr, int nitems, type, cast)

Newxz 8
The XSUB writer's interface to the C malloc(fR function.  The allocated
memory is zeroed with memzero(fR.  See also "Newx".

Memory obtained by this should ONLY be freed with Safefree.
        void    Newxz(voidW ptr, int nitems, type)

Poison 8
PoisonWith(0xEF) for catching access to freed memory.
        void    Poison(voidW dest, int nitems, type)

PoisonFree 8
PoisonWith(0xEF) for catching access to freed memory.
        void    PoisonFree(voidW dest, int nitems, type)

PoisonNew 8
PoisonWith(0xAB) for catching access to allocated but uninitialized memory.
        void    PoisonNew(voidW dest, int nitems, type)

PoisonWith 8
Fill up memory with a byte pattern (a byte repeated over and over
again) that hopefully catches attempts to access uninitialized memory.
        void    PoisonWith(voidW dest, int nitems, type,
                           U8 byte)

Renew 8
The XSUB writer's interface to the C realloc(fR function.

Memory obtained by this should ONLY be freed with Safefree.
        void    Renew(voidW ptr, int nitems, type)

Renewc 8
The XSUB writer's interface to the C realloc(fR function, with
cast.

Memory obtained by this should ONLY be freed with Safefree.
        void    Renewc(voidW ptr, int nitems, type, cast)

Safefree 8
The XSUB writer's interface to the C free(fR function.

This should ONLY be used on memory obtained using Newx and friends.
        void    Safefree(voidW ptr)

savepv 8
Perl's version of strdup()(fR.  Returns a pointer to a newly allocated
string which is a duplicate of pv(fR.  The size of the string is
determined by strlen()(fR, which means it may not contain embedded NUL(fR
characters and must have a trailing NUL(fR.  The memory allocated for the new
string can be freed with the Safefree()(fR function.

On some platforms, Windows for example, all allocated memory owned by a thread
is deallocated when that thread ends.  So if you need that not to happen, you
need to use the shared memory functions, such as "savesharedpv".
        charW   savepv(const charW pv)

savepvn 8
Perl's version of what strndup()(fR would be if it existed.  Returns a
pointer to a newly allocated string which is a duplicate of the first
len(fR bytes from pv(fR, plus a trailing
NUL(fR byte.  The memory allocated for
the new string can be freed with the Safefree()(fR function.

On some platforms, Windows for example, all allocated memory owned by a thread
is deallocated when that thread ends.  So if you need that not to happen, you
need to use the shared memory functions, such as "savesharedpvn".
        charW   savepvn(const charW pv, I32 len)

savepvs 8
Like savepvn(fR, but takes a literal string instead of a
string/length pair.
        charW   savepvs("literal string" s)

savesharedpv 8
A version of savepv()(fR which allocates the duplicate string in memory
which is shared between threads.
        charW   savesharedpv(const charW pv)

savesharedpvn 8
A version of savepvn()(fR which allocates the duplicate string in memory
which is shared between threads.  (With the specific difference that a NULL(fR
pointer is not acceptable)
        charW   savesharedpvn(const char Wconst pv,
                              const STRLEN len)

savesharedpvs 8
A version of savepvs()(fR which allocates the duplicate string in memory
which is shared between threads.
        charW   savesharedpvs("literal string" s)

savesharedsvpv 8
A version of savesharedpv()(fR which allocates the duplicate string in
memory which is shared between threads.
        charW   savesharedsvpv(SV Wsv)

savesvpv 8
A version of savepv()(fR/savepvn()(fR which gets the string to duplicate from
the passed in SV using SvPV()(fR

On some platforms, Windows for example, all allocated memory owned by a thread
is deallocated when that thread ends.  So if you need that not to happen, you
need to use the shared memory functions, such as "savesharedsvpv".
        charW   savesvpv(SVW sv)

StructCopy 8
This is an architecture independent macro to copy one structure to another.
        void    StructCopy(type Wsrc, type Wdest, type)

Zero 8
The XSUB writer's interface to the C memzero(fR function.  The dest(fR is the
destination, nitems(fR is the number of items, and type(fR is the type.
        void    Zero(voidW dest, int nitems, type)

ZeroD 8
Like Zero(fR but returns dest.  Useful
for encouraging compilers to tail call
optimise.
        void W  ZeroD(voidW dest, int nitems, type)

Miscellaneous Functions

dump_c_backtrace 8
Dumps the C backtrace to the given fp(fR.

Returns true if a backtrace could be retrieved, false if not.
        bool    dump_c_backtrace(PerlIOW fp, int max_depth,
                                 int skip)

fbm_compile 8
Analyzes the string in order to make fast searches on it using fbm_instr()(fR
 the Boyer Moore algorithm.
        void    fbm_compile(SVW sv, U32 flags)

fbm_instr 8
Returns the location of the SV in the string delimited by big(fR and
bigend(fR (bigend(fR) is the char following the last char).
It returns NULL(fR if the string can't be found.  The sv(fR
does not have to be fbm_compiled(fR, but the search will not be as fast
then.
        charW   fbm_instr(unsigned charW big,
                          unsigned charW bigend, SVW littlestr,
                          U32 flags)

foldEQ 8
Returns true if the leading len(fR bytes of the strings s1(fR and s2(fR are the
same
case insensitively; false otherwise.  Uppercase and lowercase ASCII range bytes
match themselves and their opposite case counterparts.  Non cased and non ASCII
range bytes match only themselves.
        I32     foldEQ(const charW a, const charW b, I32 len)

foldEQ_locale 8
Returns true if the leading len(fR bytes of the strings s1(fR and s2(fR are the
same case insensitively in the current locale; false otherwise.
        I32     foldEQ_locale(const charW a, const charW b,
                              I32 len)

form 8
Takes a sprintf style format pattern and conventional
(non SV) arguments and returns the formatted string.
    (char W) Perl_form(pTHX_ const charW pat, ...)
can be used any place a string (char W) is required:
    char W s = Perl_form("%d.%d",major,minor);
Uses a single private buffer so if you want to format several strings you
must explicitly copy the earlier strings away (and free the copies when you
are done).
        charW   form(const charW pat, ...)

getcwd_sv 8
Fill sv(fR with current working directory
        int     getcwd_sv(SVW sv)

get_c_backtrace_dump 8
Returns a SV containing a dump of depth(fR frames of the call stack, skipping
the skip(fR innermost ones.  depth(fR of 20 is usually enough.

The appended output looks like:

...
1   10e004812:0082   Perl_croak   util.c:1716    /usr/bin/perl
2   10df8d6d2:1d72   perl_parse   perl.c:3975    /usr/bin/perl
...

The fields are tab separated.  The first column is the depth (zero
being the innermost non skipped frame).  In the hex:offset, the hex is
where the program counter was in S_parse_body(fR, and the :offset (might
be missing) tells how much inside the S_parse_body(fR the program counter was.

The util.c:1716(fR is the source code file and line number.

The /usr/bin/perl is obvious (hopefully).

Unknowns are " ".  Unknowns can happen unfortunately quite easily:
if the platform doesn't support retrieving the information;
if the binary is missing the debug information;
if the optimizer has transformed the code by for example inlining.
        SVW     get_c_backtrace_dump(int max_depth, int skip)

ibcmp 8
This is a synonym for (! foldEQ())(fR
        I32     ibcmp(const charW a, const charW b, I32 len)

ibcmp_locale 8
This is a synonym for (! foldEQ_locale())(fR
        I32     ibcmp_locale(const charW a, const charW b,
                             I32 len)

is_safe_syscall 8
Test that the given pv(fR doesn't contain any internal NUL(fR characters.
If it does, set errno(fR to ENOENT(fR, optionally warn, and return FALSE.

Return TRUE if the name is safe.

Used by the IS_SAFE_SYSCALL()(fR macro.
        bool    is_safe_syscall(const char Wpv, STRLEN len,
                                const char Wwhat,
                                const char Wop_name)

memEQ 8
Test two buffers (which may contain embedded NUL(fR characters, to see if they
are equal.  The len(fR parameter indicates the number of bytes to compare.
Returns zero if equal, or non zero if non equal.
        bool    memEQ(charW s1, charW s2, STRLEN len)

memNE 8
Test two buffers (which may contain embedded NUL(fR characters, to see if they
are not equal.  The len(fR parameter indicates the number of bytes to compare.
Returns zero if non equal, or non zero if equal.
        bool    memNE(charW s1, charW s2, STRLEN len)

mess 8
Take a sprintf style format pattern and argument list.  These are used to
generate a string message.  If the message does not end with a newline,
then it will be extended with some indication of the current location
in the code, as described for mess_sv.

Normally, the resulting message is returned in a new mortal SV.
During global destruction a single SV may be shared between uses of
this function.
        SV W    mess(const char Wpat, ...)

mess_sv 8
Expands a message, intended for the user, to include an indication of
the current location in the code, if the message does not already appear
to be complete.

basemsg(fR is the initial message or object.  If it is a reference, it
will be used as is and will be the result of this function.  Otherwise it
is used as a string, and if it already ends with a newline, it is taken
to be complete, and the result of this function will be the same string.
If the message does not end with a newline, then a segment such as at
foo.pl line 37(fR will be appended, and possibly other clauses indicating
the current state of execution.  The resulting message will end with a
dot and a newline.

Normally, the resulting message is returned in a new mortal SV.
During global destruction a single SV may be shared between uses of this
function.  If consume(fR is true, then the function is permitted (but not
required) to modify and return basemsg(fR instead of allocating a new SV.
        SV W    mess_sv(SV Wbasemsg, bool consume)

my_snprintf 8
The C library snprintf(fR functionality, if available and
standards compliant (uses vsnprintf(fR, actually).  However, if the
vsnprintf(fR is not available, will unfortunately use the unsafe
vsprintf(fR which can overrun the buffer (there is an overrun check,
but that may be too late).  Consider using sv_vcatpvf(fR instead, or
getting vsnprintf(fR.
        int     my_snprintf(char Wbuffer, const Size_t len,
                            const char Wformat, ...)

my_strlcat 8
The C library strlcat(fR if available, or a Perl implementation of it.
This operates on C NUL(fR terminated strings.

my_strlcat()(fR appends string src(fR to the end of dst(fR.  It will append at
most size   strlen(dst)   1(fR characters.  It will then NUL(fR terminate,
unless size(fR is 0 or the original dst(fR string was longer than size(fR (in
practice this should not happen as it means that either size(fR is incorrect or
that dst(fR is not a proper NUL(fR terminated string).

Note that size(fR is the full size of the destination buffer and
the result is guaranteed to be NUL(fR terminated if there is room.  Note that
room for the NUL(fR should be included in size(fR.

The return value is the total length that dst(fR would have if size(fR is
sufficiently large.  Thus it is the initial length of dst(fR plus the length of
src(fR.  If size(fR is smaller than the return, the excess was not appended.
        Size_t  my_strlcat(char Wdst, const char Wsrc,
                           Size_t size)

my_strlcpy 8
The C library strlcpy(fR if available, or a Perl implementation of it.
This operates on C NUL(fR terminated strings.

my_strlcpy()(fR copies up to size   1(fR characters from the string src(fR
to dst(fR, NUL(fR terminating the result if size(fR is not 0.

The return value is the total length src(fR would be if the copy completely
succeeded.  If it is larger than size(fR, the excess was not copied.
        Size_t  my_strlcpy(char Wdst, const char Wsrc,
                           Size_t size)

my_strnlen 8
The C library strnlen(fR if available, or a Perl implementation of it.

my_strnlen()(fR computes the length of the string, up to maxlen(fR
characters.  It will will never attempt to address more than maxlen(fR
characters, making it suitable for use with strings that are not
guaranteed to be NUL terminated.
        Size_t  my_strnlen(const char Wstr, Size_t maxlen)

my_vsnprintf 8
The C library vsnprintf(fR if available and standards compliant.
However, if if the vsnprintf(fR is not available, will unfortunately
use the unsafe vsprintf(fR which can overrun the buffer (there is an
overrun check, but that may be too late).  Consider using
sv_vcatpvf(fR instead, or getting vsnprintf(fR.
        int     my_vsnprintf(char Wbuffer, const Size_t len,
                             const char Wformat, va_list ap)

ninstr 8
Find the first (leftmost) occurrence of a sequence of bytes within another
sequence.  This is the Perl version of strstr()(fR, extended to handle
arbitrary sequences, potentially containing embedded NUL(fR characters (NUL(fR
is what the initial n(fR in the function name stands for; some systems have an
equivalent, memmem()(fR, but with a somewhat different API).

Another way of thinking about this function is finding a needle in a haystack.
big(fR points to the first byte in the haystack.  big_end(fR points to one byte
beyond the final byte in the haystack.  little(fR points to the first byte in
the needle.  little_end(fR points to one byte beyond the final byte in the
needle.  All the parameters must be non NULL(fR.

The function returns NULL(fR if there is no occurrence of little(fR within
big(fR.  If little(fR is the empty string, big(fR is returned.

Because this function operates at the byte level, and because of the inherent
characteristics of UTF 8 (or UTF EBCDIC), it will work properly if both the
needle and the haystack are strings with the same UTF 8ness, but not if the
UTF 8ness differs.
        char W  ninstr(char W big, char W bigend, char W little,
                       char W little_end)

PERL_SYS_INIT 8
Provides system specific tune up of the C runtime environment necessary to
run Perl interpreters.  This should be called only once, before creating
any Perl interpreters.
        void    PERL_SYS_INIT(int Wargc, charWWW argv)

PERL_SYS_INIT3 8
Provides system specific tune up of the C runtime environment necessary to
run Perl interpreters.  This should be called only once, before creating
any Perl interpreters.
        void    PERL_SYS_INIT3(int Wargc, charWWW argv,
                               charWWW env)

PERL_SYS_TERM 8
Provides system specific clean up of the C runtime environment after
running Perl interpreters.  This should be called only once, after
freeing any remaining Perl interpreters.
        void    PERL_SYS_TERM()

quadmath_format_needed 8
quadmath_format_needed()(fR returns true if the format(fR string seems to
contain at least one non Q prefixed %[efgaEFGA](fR format specifier,
or returns false otherwise.

The format specifier detection is not complete printf syntax detection,
but it should catch most common cases.

If true is returned, those arguments should in theory be processed
with quadmath_snprintf()(fR, but in case there is more than one such
format specifier (see quadmath_format_single), and if there is
anything else beyond that one (even just a single byte), they
cannot be processed because quadmath_snprintf()(fR is very strict,
accepting only one format spec, and nothing else.
In this case, the code should probably fail.
        bool    quadmath_format_needed(const charW format)

quadmath_format_single 8
quadmath_snprintf()(fR is very strict about its format(fR string and will
fail, returning  1, if the format is invalid.  It accepts exactly
one format spec.

quadmath_format_single()(fR checks that the intended single spec looks
sane: begins with %(fR, has only one %(fR, ends with [efgaEFGA](fR,
and has Q(fR before it.  This is not a full printf syntax check,
just the basics.

Returns the format if it is valid, NULL if not.

quadmath_format_single()(fR can and will actually patch in the missing
Q(fR, if necessary.  In this case it will return the modified copy of
the format, which the caller will need to free.

See also quadmath_format_needed.
        const charW quadmath_format_single(const charW format)

READ_XDIGIT 8
Returns the value of an ASCII range hex digit and advances the string pointer.
Behaviour is only well defined when isXDIGIT(Wstr) is true.
        U8      READ_XDIGIT(char strW)

rninstr 8
Like "ninstr", but instead finds the final (rightmost) occurrence of a
sequence of bytes within another sequence, returning NULL(fR if there is no
such occurrence.
        char W  rninstr(char W big, char W bigend,
                        char W little, char W little_end)

strEQ 8
Test two NUL(fR terminated strings to see if they are equal.  Returns true or
false.
        bool    strEQ(charW s1, charW s2)

strGE 8
Test two NUL(fR terminated strings to see if the first, s1(fR, is greater than
or equal to the second, s2(fR.  Returns true or false.
        bool    strGE(charW s1, charW s2)

strGT 8
Test two NUL(fR terminated strings to see if the first, s1(fR, is greater than
the second, s2(fR.  Returns true or false.
        bool    strGT(charW s1, charW s2)

strLE 8
Test two NUL(fR terminated strings to see if the first, s1(fR, is less than or
equal to the second, s2(fR.  Returns true or false.
        bool    strLE(charW s1, charW s2)

strLT 8
Test two NUL(fR terminated strings to see if the first, s1(fR, is less than the
second, s2(fR.  Returns true or false.
        bool    strLT(charW s1, charW s2)

strNE 8
Test two NUL(fR terminated strings to see if they are different.  Returns true
or false.
        bool    strNE(charW s1, charW s2)

strnEQ 8
Test two NUL(fR terminated strings to see if they are equal.  The len(fR
parameter indicates the number of bytes to compare.  Returns true or false.  (A
wrapper for strncmp(fR).
        bool    strnEQ(charW s1, charW s2, STRLEN len)

strnNE 8
Test two NUL(fR terminated strings to see if they are different.  The len(fR
parameter indicates the number of bytes to compare.  Returns true or false.  (A
wrapper for strncmp(fR).
        bool    strnNE(charW s1, charW s2, STRLEN len)

sv_destroyable 8
Dummy routine which reports that object can be destroyed when there is no
sharing module present.  It ignores its single SV argument, and returns
'true'.  Exists to avoid test for a NULL(fR function pointer and because it
could potentially warn under some level of strict ness.
        bool    sv_destroyable(SV Wsv)

sv_nosharing 8
Dummy routine which shares an SV when there is no sharing module present.
Or locks it.  Or unlocks it.  In other
words, ignores its single SV argument.
Exists to avoid test for a NULL(fR function pointer and because it could
potentially warn under some level of strict ness.
        void    sv_nosharing(SV Wsv)

vmess 8
pat(fR and args(fR are a sprintf style format pattern and encapsulated
argument list, respectively.  These are used to generate a string message.  If
the
message does not end with a newline, then it will be extended with
some indication of the current location in the code, as described for
mess_sv.

Normally, the resulting message is returned in a new mortal SV.
During global destruction a single SV may be shared between uses of
this function.
        SV W    vmess(const char Wpat, va_list Wargs)

MRO Functions

These functions are related to the method resolution order of perl classes
mro_get_linear_isa 8
Returns the mro linearisation for the given stash.  By default, this
will be whatever mro_get_linear_isa_dfs(fR returns unless some
other MRO is in effect for the stash.  The return value is a
read only AVW.

You are responsible for SvREFCNT_inc()(fR on the
return value if you plan to store it anywhere
semi permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
        AVW     mro_get_linear_isa(HVW stash)

mro_method_changed_in 8
Invalidates method caching on any child classes
of the given stash, so that they might notice
the changes in this one.

Ideally, all instances of PL_sub_generation++(fR in
perl source outside of mro.c should be
replaced by calls to this.

Perl automatically handles most of the common
ways a method might be redefined.  However, there
are a few ways you could change a method in a stash
without the cache code noticing, in which case you
need to call this method afterwards:

1) Directly manipulating the stash HV entries from
XS code.

2) Assigning a reference to a readonly scalar
constant into a stash entry in order to create
a constant subroutine (like constant.pm
does).

This same method is available from pure perl
via, mro::method_changed_in(classname)(fR.
        void    mro_method_changed_in(HVW stash)

mro_register 8
Registers a custom mro plugin.  See perlmroapi for details.
        void    mro_register(const struct mro_alg Wmro)

Multicall Functions

dMULTICALL 8
Declare local variables for a multicall.  See (s 1LIGHTWEIGHT CALLBACKS(s0 in perlcall.
                dMULTICALL;

MULTICALL 8
Make a lightweight callback.  See (s 1LIGHTWEIGHT CALLBACKS(s0 in perlcall.
                MULTICALL;

POP_MULTICALL 8
Closing bracket for a lightweight callback.
See (s 1LIGHTWEIGHT CALLBACKS(s0 in perlcall.
                POP_MULTICALL;

PUSH_MULTICALL 8
Opening bracket for a lightweight callback.
See (s 1LIGHTWEIGHT CALLBACKS(s0 in perlcall.
                PUSH_MULTICALL;

Numeric functions

grok_bin 8
converts a string representing a binary number to numeric form.

On entry start(fR and Wlen give the string to scan, Wflags gives
conversion flags, and result(fR should be NULL(fR or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless PERL_SCAN_SILENT_ILLDIGIT(fR is set in Wflags, encountering an
invalid character will also trigger a warning.
On return Wlen is set to the length of the scanned string,
and Wflags gives output flags.

If the value is <= UV_MAX(fR it is returned as a UV, the output flags are clear,
and nothing is written to Wresult.  If the value is > UV_MAX(fR, grok_bin(fR
returns UV_MAX(fR, sets PERL_SCAN_GREATER_THAN_UV_MAX(fR in the output flags,
and writes the value to Wresult (or the value is discarded if result(fR
is NULL).

The binary number may optionally be prefixed with "0b" or "b" unless
PERL_SCAN_DISALLOW_PREFIX(fR is set in Wflags on entry.  If
PERL_SCAN_ALLOW_UNDERSCORES(fR is set in Wflags then the binary
number may use "_" characters to separate digits.
        UV      grok_bin(const charW start, STRLENW len_p,
                         I32W flags, NV Wresult)

grok_hex 8
converts a string representing a hex number to numeric form.

On entry start(fR and Wlen_p give the string to scan, Wflags gives
conversion flags, and result(fR should be NULL(fR or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless PERL_SCAN_SILENT_ILLDIGIT(fR is set in Wflags, encountering an
invalid character will also trigger a warning.
On return Wlen is set to the length of the scanned string,
and Wflags gives output flags.

If the value is <= UV_MAX(fR it is returned as a UV, the output flags are clear,
and nothing is written to Wresult.  If the value is > UV_MAX(fR, grok_hex(fR
returns UV_MAX(fR, sets PERL_SCAN_GREATER_THAN_UV_MAX(fR in the output flags,
and writes the value to Wresult (or the value is discarded if result(fR
is NULL(fR).

The hex number may optionally be prefixed with "0x" or "x" unless
PERL_SCAN_DISALLOW_PREFIX(fR is set in Wflags on entry.  If
PERL_SCAN_ALLOW_UNDERSCORES(fR is set in Wflags then the hex
number may use "_" characters to separate digits.
        UV      grok_hex(const charW start, STRLENW len_p,
                         I32W flags, NV Wresult)

grok_infnan 8
Helper for grok_number()(fR, accepts various ways of spelling infinity
or not a number, and returns one of the following flag combinations:
  IS_NUMBER_INFINITE
  IS_NUMBER_NAN
  IS_NUMBER_INFINITE | IS_NUMBER_NEG
  IS_NUMBER_NAN | IS_NUMBER_NEG
  0
possibly | ed with IS_NUMBER_TRAILING(fR.

If an infinity or a not a number is recognized, Wsp will point to
one byte past the end of the recognized string.  If the recognition fails,
zero is returned, and Wsp will not move.
        int     grok_infnan(const charWW sp, const char Wsend)

grok_number 8
Identical to grok_number_flags()(fR with flags(fR set to zero.
        int     grok_number(const char Wpv, STRLEN len,
                            UV Wvaluep)

grok_number_flags 8
Recognise (or not) a number.  The type of the number is returned
(0 if unrecognised), otherwise it is a bit ORed combination of
IS_NUMBER_IN_UV(fR, IS_NUMBER_GREATER_THAN_UV_MAX(fR, IS_NUMBER_NOT_INT(fR,
IS_NUMBER_NEG(fR, IS_NUMBER_INFINITY(fR, IS_NUMBER_NAN(fR (defined in perl.h).

If the value of the number can fit in a UV, it is returned in Wvaluep.
IS_NUMBER_IN_UV(fR will be set to indicate that Wvaluep is valid, IS_NUMBER_IN_UV(fR
will never be set unless Wvaluep is valid, but Wvaluep may have been assigned
to during processing even though IS_NUMBER_IN_UV(fR is not set on return.
If valuep(fR is NULL(fR, IS_NUMBER_IN_UV(fR will be set for the same cases as when
valuep(fR is non NULL(fR, but no actual assignment (or SEGV) will occur.

IS_NUMBER_NOT_INT(fR will be set with IS_NUMBER_IN_UV(fR if trailing decimals were
seen (in which case Wvaluep gives the true value truncated to an integer), and
IS_NUMBER_NEG(fR if the number is negative (in which case Wvaluep holds the
absolute value).  IS_NUMBER_IN_UV(fR is not set if e notation was used or the
number is larger than a UV.

flags(fR allows only PERL_SCAN_TRAILING(fR, which allows for trailing
non numeric text on an otherwise successful grok, setting
IS_NUMBER_TRAILING(fR on the result.
        int     grok_number_flags(const char Wpv, STRLEN len,
                                  UV Wvaluep, U32 flags)

grok_numeric_radix 8
Scan and skip for a numeric decimal separator (radix).
        bool    grok_numeric_radix(const char WWsp,
                                   const char Wsend)

grok_oct 8
converts a string representing an octal number to numeric form.

On entry start(fR and Wlen give the string to scan, Wflags gives
conversion flags, and result(fR should be NULL(fR or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless PERL_SCAN_SILENT_ILLDIGIT(fR is set in Wflags, encountering an
8 or 9 will also trigger a warning.
On return Wlen is set to the length of the scanned string,
and Wflags gives output flags.

If the value is <= UV_MAX(fR it is returned as a UV, the output flags are clear,
and nothing is written to Wresult.  If the value is > UV_MAX(fR, grok_oct(fR
returns UV_MAX(fR, sets PERL_SCAN_GREATER_THAN_UV_MAX(fR in the output flags,
and writes the value to Wresult (or the value is discarded if result(fR
is NULL(fR).

If PERL_SCAN_ALLOW_UNDERSCORES(fR is set in Wflags then the octal
number may use "_" characters to separate digits.
        UV      grok_oct(const charW start, STRLENW len_p,
                         I32W flags, NV Wresult)

isinfnan 8
Perl_isinfnan()(fR is utility function that returns true if the NV
argument is either an infinity or a NaN(fR, false otherwise.  To test
in more detail, use Perl_isinf()(fR and Perl_isnan()(fR.

This is also the logical inverse of Perl_isfinite().
        bool    isinfnan(NV nv)

Perl_signbit 8
NOTE: this function is experimental and may change or be
removed without notice.

Return a non zero integer if the sign bit on an NV is set, and 0 if
it is not.

If Configure detects this system has a signbit()(fR that will work with
our NVs, then we just use it via the #define(fR in perl.h.  Otherwise,
fall back on this implementation.  The main use of this function
is catching ( 0.0(fR.

Configure(fR notes:  This function is called Perl_signbit(fR instead of a
plain signbit(fR because it is easy to imagine a system having a signbit()(fR
function or macro that doesn't happen to work with our particular choice
of NVs.  We shouldn't just re #define(fR signbit(fR as Perl_signbit(fR and expect
the standard system headers to be happy.  Also, this is a no context
function (no pTHX_(fR) because Perl_signbit()(fR is usually re #defined(fR in
perl.h as a simple macro call to the system's signbit()(fR.
Users should just always call Perl_signbit()(fR.
        int     Perl_signbit(NV f)

scan_bin 8
For backwards compatibility.  Use grok_bin(fR instead.
        NV      scan_bin(const charW start, STRLEN len,
                         STRLENW retlen)

scan_hex 8
For backwards compatibility.  Use grok_hex(fR instead.
        NV      scan_hex(const charW start, STRLEN len,
                         STRLENW retlen)

scan_oct 8
For backwards compatibility.  Use grok_oct(fR instead.
        NV      scan_oct(const charW start, STRLEN len,
                         STRLENW retlen)

Obsolete backwards compatibility functions

Some of these are also deprecated.  You can exclude these from
your compiled Perl by adding this option to Configure:
( Accflags=( DNO_MATHOMS(W(C'
custom_op_desc 8
Return the description of a given custom op.  This was once used by the
OP_DESC(fR macro, but is no longer: it has only been kept for
compatibility, and should not be used.
        const char W custom_op_desc(const OP Wo)

custom_op_name 8
Return the name for a given custom op.  This was once used by the OP_NAME(fR
macro, but is no longer: it has only been kept for compatibility, and
should not be used.
        const char W custom_op_name(const OP Wo)

gv_fetchmethod 8
See gv_fetchmethod_autoload.
        GVW     gv_fetchmethod(HVW stash, const charW name)

is_utf8_char 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Tests if some arbitrary number of bytes begins in a valid UTF 8
character.  Note that an INVARIANT (i.e. ASCII on non EBCDIC machines)
character is a valid UTF 8 character.  The actual number of bytes in the UTF 8
character will be returned if it is valid, otherwise 0.

This function is deprecated due to the possibility that malformed input could
cause reading beyond the end of the input buffer.  Use isUTF8_CHAR
instead.
        STRLEN  is_utf8_char(const U8 Ws)

is_utf8_char_buf 8
This is identical to the macro isUTF8_CHAR.
        STRLEN  is_utf8_char_buf(const U8 Wbuf,
                                 const U8 Wbuf_end)

pack_cat 8
The engine implementing pack()(fR Perl function.  Note: parameters
next_in_list(fR and flags(fR are not used.  This call should not be used; use
packlist(fR instead.
        void    pack_cat(SV Wcat, const char Wpat,
                         const char Wpatend, SV WWbeglist,
                         SV WWendlist, SV WWWnext_in_list,
                         U32 flags)

pad_compname_type 8
Looks up the type of the lexical variable at position po(fR in the
currently compiling pad.  If the variable is typed, the stash of the
class to which it is typed is returned.  If not, NULL(fR is returned.
        HV W    pad_compname_type(PADOFFSET po)

sv_2pvbyte_nolen 8
Return a pointer to the byte encoded representation of the SV.
May cause the SV to be downgraded from UTF 8 as a side effect.

Usually accessed via the SvPVbyte_nolen(fR macro.
        charW   sv_2pvbyte_nolen(SVW sv)

sv_2pvutf8_nolen 8
Return a pointer to the UTF 8 encoded representation of the SV.
May cause the SV to be upgraded to UTF 8 as a side effect.

Usually accessed via the SvPVutf8_nolen(fR macro.
        charW   sv_2pvutf8_nolen(SVW sv)

sv_2pv_nolen 8
Like sv_2pv()(fR, but doesn't return the length too.  You should usually
use the macro wrapper SvPV_nolen(sv)(fR instead.
        charW   sv_2pv_nolen(SVW sv)

sv_catpvn_mg 8
Like sv_catpvn(fR, but also handles 'set' magic.
        void    sv_catpvn_mg(SV Wsv, const char Wptr,
                             STRLEN len)

sv_catsv_mg 8
Like sv_catsv(fR, but also handles 'set' magic.
        void    sv_catsv_mg(SV Wdsv, SV Wssv)

sv_force_normal 8
Undo various types of fakery on an SV: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an xpvmg(fR.  See also "sv_force_normal_flags".
        void    sv_force_normal(SV Wsv)

sv_iv 8
A private implementation of the SvIVx(fR macro for compilers which can't
cope with complex macro expressions.  Always use the macro instead.
        IV      sv_iv(SVW sv)

sv_nolocking 8
Dummy routine which locks an SV when there is no locking module present.
Exists to avoid test for a NULL(fR function pointer and because it could
potentially warn under some level of strict ness.

Superseded by sv_nosharing()(fR.
        void    sv_nolocking(SV Wsv)

sv_nounlocking 8
Dummy routine which unlocks an SV when there is no locking module present.
Exists to avoid test for a NULL(fR function pointer and because it could
potentially warn under some level of strict ness.

Superseded by sv_nosharing()(fR.
        void    sv_nounlocking(SV Wsv)

sv_nv 8
A private implementation of the SvNVx(fR macro for compilers which can't
cope with complex macro expressions.  Always use the macro instead.
        NV      sv_nv(SVW sv)

sv_pv 8
Use the SvPV_nolen(fR macro instead
        charW   sv_pv(SV Wsv)

sv_pvbyte 8
Use SvPVbyte_nolen(fR instead.
        charW   sv_pvbyte(SV Wsv)

sv_pvbyten 8
A private implementation of the SvPVbyte(fR macro for compilers
which can't cope with complex macro expressions.  Always use the macro
instead.
        charW   sv_pvbyten(SV Wsv, STRLEN Wlp)

sv_pvn 8
A private implementation of the SvPV(fR macro for compilers which can't
cope with complex macro expressions.  Always use the macro instead.
        charW   sv_pvn(SV Wsv, STRLEN Wlp)

sv_pvutf8 8
Use the SvPVutf8_nolen(fR macro instead
        charW   sv_pvutf8(SV Wsv)

sv_pvutf8n 8
A private implementation of the SvPVutf8(fR macro for compilers
which can't cope with complex macro expressions.  Always use the macro
instead.
        charW   sv_pvutf8n(SV Wsv, STRLEN Wlp)

sv_taint 8
Taint an SV.  Use SvTAINTED_on(fR instead.
        void    sv_taint(SVW sv)

sv_unref 8
Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of newSVrv(fR.  This is sv_unref_flags(fR with the flag(fR
being zero.  See "SvROK_off".
        void    sv_unref(SVW sv)

sv_usepvn 8
Tells an SV to use ptr(fR to find its string value.  Implemented by
calling sv_usepvn_flags(fR with flags(fR of 0, hence does not handle 'set'
magic.  See "sv_usepvn_flags".
        void    sv_usepvn(SVW sv, charW ptr, STRLEN len)

sv_usepvn_mg 8
Like sv_usepvn(fR, but also handles 'set' magic.
        void    sv_usepvn_mg(SV Wsv, char Wptr, STRLEN len)

sv_uv 8
A private implementation of the SvUVx(fR macro for compilers which can't
cope with complex macro expressions.  Always use the macro instead.
        UV      sv_uv(SVW sv)

unpack_str 8
The engine implementing unpack()(fR Perl function.  Note: parameters strbeg(fR,
new_s(fR and ocnt(fR are not used.  This call should not be used, use
unpackstring(fR instead.
        SSize_t unpack_str(const char Wpat, const char Wpatend,
                           const char Ws, const char Wstrbeg,
                           const char Wstrend, char WWnew_s,
                           I32 ocnt, U32 flags)

utf8_to_uvuni 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Returns the Unicode code point of the first character in the string s(fR
which is assumed to be in UTF 8 encoding; retlen(fR will be set to the
length, in bytes, of that character.

Some, but not all, UTF 8 malformations are detected, and in fact, some
malformed input could cause reading beyond the end of the input buffer, which
is one reason why this function is deprecated.  The other is that only in
extremely limited circumstances should the Unicode versus native code point be
of any interest to you.  See utf8_to_uvuni_buf for alternatives.

If s(fR points to one of the detected malformations, and UTF8 warnings are
enabled, zero is returned and Wretlen is set (if retlen(fR doesn't point to
NULL) to  1.  If those warnings are off, the computed value if well defined (or
the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and Wretlen
is set (if retlen(fR isn't NULL) so that (s(fR + Wretlen) is the
next possible position in s(fR that could begin a non malformed character.
See utf8n_to_uvchr for details on when the REPLACEMENT CHARACTER is returned.
        UV      utf8_to_uvuni(const U8 Ws, STRLEN Wretlen)

Optree construction

newASSIGNOP 8
Constructs, checks, and returns an assignment op.  left(fR and right(fR
supply the parameters of the assignment; they are consumed by this
function and become part of the constructed op tree.

If optype(fR is OP_ANDASSIGN(fR, OP_ORASSIGN(fR, or OP_DORASSIGN(fR, then
a suitable conditional optree is constructed.  If optype(fR is the opcode
of a binary operator, such as OP_BIT_OR(fR, then an op is constructed that
performs the binary operation and assigns the result to the left argument.
Either way, if optype(fR is non zero then flags(fR has no effect.

If optype(fR is zero, then a plain scalar or list assignment is
constructed.  Which type of assignment it is is automatically determined.
flags(fR gives the eight bits of op_flags(fR, except that OPf_KIDS(fR
will be set automatically, and, shifted up eight bits, the eight bits
of op_private(fR, except that the bit with value 1 or 2 is automatically
set as required.
        OP W    newASSIGNOP(I32 flags, OP Wleft, I32 optype,
                            OP Wright)

newBINOP 8
Constructs, checks, and returns an op of any binary type.  type(fR
is the opcode.  flags(fR gives the eight bits of op_flags(fR, except
that OPf_KIDS(fR will be set automatically, and, shifted up eight bits,
the eight bits of op_private(fR, except that the bit with value 1 or
2 is automatically set as required.  first(fR and last(fR supply up to
two ops to be the direct children of the binary op; they are consumed
by this function and become part of the constructed op tree.
        OP W    newBINOP(I32 type, I32 flags, OP Wfirst,
                         OP Wlast)

newCONDOP 8
Constructs, checks, and returns a conditional expression (cond_expr(fR)
op.  flags(fR gives the eight bits of op_flags(fR, except that OPf_KIDS(fR
will be set automatically, and, shifted up eight bits, the eight bits of
op_private(fR, except that the bit with value 1 is automatically set.
first(fR supplies the expression selecting between the two branches,
and trueop(fR and falseop(fR supply the branches; they are consumed by
this function and become part of the constructed op tree.
        OP W    newCONDOP(I32 flags, OP Wfirst, OP Wtrueop,
                          OP Wfalseop)

newDEFSVOP 8
Constructs and returns an op to access $_.
        OP W    newDEFSVOP()

newFOROP 8
Constructs, checks, and returns an op tree expressing a foreach(fR
loop (iteration through a list of values).  This is a heavyweight loop,
with structure that allows exiting the loop by last(fR and suchlike.

sv(fR optionally supplies the variable that will be aliased to each
item in turn; if null, it defaults to $_.
expr(fR supplies the list of values to iterate over.  block(fR supplies
the main body of the loop, and cont(fR optionally supplies a continue(fR
block that operates as a second half of the body.  All of these optree
inputs are consumed by this function and become part of the constructed
op tree.

flags(fR gives the eight bits of op_flags(fR for the leaveloop(fR
op and, shifted up eight bits, the eight bits of op_private(fR for
the leaveloop(fR op, except that (in both cases) some bits will be set
automatically.
        OP W    newFOROP(I32 flags, OP Wsv, OP Wexpr, OP Wblock,
                         OP Wcont)

newGIVENOP 8
Constructs, checks, and returns an op tree expressing a given(fR block.
cond(fR supplies the expression to whose value $_ will be locally
aliased, and block(fR supplies the body of the given(fR construct; they
are consumed by this function and become part of the constructed op tree.
defsv_off(fR must be zero (it used to identity the pad slot of lexical $_).
        OP W    newGIVENOP(OP Wcond, OP Wblock,
                           PADOFFSET defsv_off)

newGVOP 8
Constructs, checks, and returns an op of any type that involves an
embedded reference to a GV.  type(fR is the opcode.  flags(fR gives the
eight bits of op_flags(fR.  gv(fR identifies the GV that the op should
reference; calling this function does not transfer ownership of any
reference to it.
        OP W    newGVOP(I32 type, I32 flags, GV Wgv)

newLISTOP 8
Constructs, checks, and returns an op of any list type.  type(fR is
the opcode.  flags(fR gives the eight bits of op_flags(fR, except that
OPf_KIDS(fR will be set automatically if required.  first(fR and last(fR
supply up to two ops to be direct children of the list op; they are
consumed by this function and become part of the constructed op tree.

For most list operators, the check function expects all the kid ops to be
present already, so calling newLISTOP(OP_JOIN, ...)(fR (e.g.) is not
appropriate.  What you want to do in that case is create an op of type
OP_LIST(fR, append more children to it, and then call op_convert_list.
See op_convert_list for more information.
        OP W    newLISTOP(I32 type, I32 flags, OP Wfirst,
                          OP Wlast)

newLOGOP 8
Constructs, checks, and returns a logical (flow control) op.  type(fR
is the opcode.  flags(fR gives the eight bits of op_flags(fR, except
that OPf_KIDS(fR will be set automatically, and, shifted up eight bits,
the eight bits of op_private(fR, except that the bit with value 1 is
automatically set.  first(fR supplies the expression controlling the
flow, and other(fR supplies the side (alternate) chain of ops; they are
consumed by this function and become part of the constructed op tree.
        OP W    newLOGOP(I32 type, I32 flags, OP Wfirst,
                         OP Wother)

newLOOPEX 8
Constructs, checks, and returns a loop exiting op (such as goto(fR
or last(fR).  type(fR is the opcode.  label(fR supplies the parameter
determining the target of the op; it is consumed by this function and
becomes part of the constructed op tree.
        OP W    newLOOPEX(I32 type, OP Wlabel)

newLOOPOP 8
Constructs, checks, and returns an op tree expressing a loop.  This is
only a loop in the control flow through the op tree; it does not have
the heavyweight loop structure that allows exiting the loop by last(fR
and suchlike.  flags(fR gives the eight bits of op_flags(fR for the
top level op, except that some bits will be set automatically as required.
expr(fR supplies the expression controlling loop iteration, and block(fR
supplies the body of the loop; they are consumed by this function and
become part of the constructed op tree.  debuggable(fR is currently
unused and should always be 1.
        OP W    newLOOPOP(I32 flags, I32 debuggable, OP Wexpr,
                          OP Wblock)

newMETHOP 8
Constructs, checks, and returns an op of method type with a method name
evaluated at runtime.  type(fR is the opcode.  flags(fR gives the eight
bits of op_flags(fR, except that OPf_KIDS(fR will be set automatically,
and, shifted up eight bits, the eight bits of op_private(fR, except that
the bit with value 1 is automatically set.  dynamic_meth(fR supplies an
op which evaluates method name; it is consumed by this function and
become part of the constructed op tree.
Supported optypes: OP_METHOD(fR.
        OP W    newMETHOP(I32 type, I32 flags, OP Wfirst)

newMETHOP_named 8
Constructs, checks, and returns an op of method type with a constant
method name.  type(fR is the opcode.  flags(fR gives the eight bits of
op_flags(fR, and, shifted up eight bits, the eight bits of
op_private(fR.  const_meth(fR supplies a constant method name;
it must be a shared COW string.
Supported optypes: OP_METHOD_NAMED(fR.
        OP W    newMETHOP_named(I32 type, I32 flags,
                                SV Wconst_meth)

newNULLLIST 8
Constructs, checks, and returns a new stub(fR op, which represents an
empty list expression.
        OP W    newNULLLIST()

newOP 8
Constructs, checks, and returns an op of any base type (any type that
has no extra fields).  type(fR is the opcode.  flags(fR gives the
eight bits of op_flags(fR, and, shifted up eight bits, the eight bits
of op_private(fR.
        OP W    newOP(I32 type, I32 flags)

newPADOP 8
Constructs, checks, and returns an op of any type that involves a
reference to a pad element.  type(fR is the opcode.  flags(fR gives the
eight bits of op_flags(fR.  A pad slot is automatically allocated, and
is populated with sv(fR; this function takes ownership of one reference
to it.

This function only exists if Perl has been compiled to use ithreads.
        OP W    newPADOP(I32 type, I32 flags, SV Wsv)

newPMOP 8
Constructs, checks, and returns an op of any pattern matching type.
type(fR is the opcode.  flags(fR gives the eight bits of op_flags(fR
and, shifted up eight bits, the eight bits of op_private(fR.
        OP W    newPMOP(I32 type, I32 flags)

newPVOP 8
Constructs, checks, and returns an op of any type that involves an
embedded C level pointer (PV).  type(fR is the opcode.  flags(fR gives
the eight bits of op_flags(fR.  pv(fR supplies the C level pointer.
Depending on the op type, the memory referenced by pv(fR may be freed
when the op is destroyed.  If the op is of a freeing type, pv(fR must
have been allocated using PerlMemShared_malloc(fR.
        OP W    newPVOP(I32 type, I32 flags, char Wpv)

newRANGE 8
Constructs and returns a range(fR op, with subordinate flip(fR and
flop(fR ops.  flags(fR gives the eight bits of op_flags(fR for the
flip(fR op and, shifted up eight bits, the eight bits of op_private(fR
for both the flip(fR and range(fR ops, except that the bit with value
1 is automatically set.  left(fR and right(fR supply the expressions
controlling the endpoints of the range; they are consumed by this function
and become part of the constructed op tree.
        OP W    newRANGE(I32 flags, OP Wleft, OP Wright)

newSLICEOP 8
Constructs, checks, and returns an lslice(fR (list slice) op.  flags(fR
gives the eight bits of op_flags(fR, except that OPf_KIDS(fR will
be set automatically, and, shifted up eight bits, the eight bits of
op_private(fR, except that the bit with value 1 or 2 is automatically
set as required.  listval(fR and subscript(fR supply the parameters of
the slice; they are consumed by this function and become part of the
constructed op tree.
        OP W    newSLICEOP(I32 flags, OP Wsubscript,
                           OP Wlistval)

newSTATEOP 8
Constructs a state op (COP).  The state op is normally a nextstate(fR op,
but will be a dbstate(fR op if debugging is enabled for currently compiled
code.  The state op is populated from PL_curcop(fR (or PL_compiling(fR).
If label(fR is non null, it supplies the name of a label to attach to
the state op; this function takes ownership of the memory pointed at by
label(fR, and will free it.  flags(fR gives the eight bits of op_flags(fR
for the state op.

If o(fR is null, the state op is returned.  Otherwise the state op is
combined with o(fR into a lineseq(fR list op, which is returned.  o(fR
is consumed by this function and becomes part of the returned op tree.
        OP W    newSTATEOP(I32 flags, char Wlabel, OP Wo)

newSVOP 8
Constructs, checks, and returns an op of any type that involves an
embedded SV.  type(fR is the opcode.  flags(fR gives the eight bits
of op_flags(fR.  sv(fR gives the SV to embed in the op; this function
takes ownership of one reference to it.
        OP W    newSVOP(I32 type, I32 flags, SV Wsv)

newUNOP 8
Constructs, checks, and returns an op of any unary type.  type(fR is
the opcode.  flags(fR gives the eight bits of op_flags(fR, except that
OPf_KIDS(fR will be set automatically if required, and, shifted up eight
bits, the eight bits of op_private(fR, except that the bit with value 1
is automatically set.  first(fR supplies an optional op to be the direct
child of the unary op; it is consumed by this function and become part
of the constructed op tree.
        OP W    newUNOP(I32 type, I32 flags, OP Wfirst)

newUNOP_AUX 8
Similar to newUNOP(fR, but creates an UNOP_AUX(fR struct instead, with op_aux(fR
initialised to aux(fR
        OPW     newUNOP_AUX(I32 type, I32 flags, OPW first,
                            UNOP_AUX_item Waux)

newWHENOP 8
Constructs, checks, and returns an op tree expressing a when(fR block.
cond(fR supplies the test expression, and block(fR supplies the block
that will be executed if the test evaluates to true; they are consumed
by this function and become part of the constructed op tree.  cond(fR
will be interpreted DWIMically, often as a comparison against $_,
and may be null to generate a default(fR block.
        OP W    newWHENOP(OP Wcond, OP Wblock)

newWHILEOP 8
Constructs, checks, and returns an op tree expressing a while(fR loop.
This is a heavyweight loop, with structure that allows exiting the loop
by last(fR and suchlike.

loop(fR is an optional preconstructed enterloop(fR op to use in the
loop; if it is null then a suitable op will be constructed automatically.
expr(fR supplies the loop's controlling expression.  block(fR supplies the
main body of the loop, and cont(fR optionally supplies a continue(fR block
that operates as a second half of the body.  All of these optree inputs
are consumed by this function and become part of the constructed op tree.

flags(fR gives the eight bits of op_flags(fR for the leaveloop(fR
op and, shifted up eight bits, the eight bits of op_private(fR for
the leaveloop(fR op, except that (in both cases) some bits will be set
automatically.  debuggable(fR is currently unused and should always be 1.
has_my(fR can be supplied as true to force the
loop body to be enclosed in its own scope.
        OP W    newWHILEOP(I32 flags, I32 debuggable,
                           LOOP Wloop, OP Wexpr, OP Wblock,
                           OP Wcont, I32 has_my)

Optree Manipulation Functions

alloccopstash 8
NOTE: this function is experimental and may change or be
removed without notice.

Available only under threaded builds, this function allocates an entry in
PL_stashpad(fR for the stash passed to it.
        PADOFFSET alloccopstash(HV Whv)

block_end 8
Handles compile time scope exit.  floor(fR
is the savestack index returned by
block_start(fR, and seq(fR is the body of the block.  Returns the block,
possibly modified.
        OP W    block_end(I32 floor, OP Wseq)

block_start 8
Handles compile time scope entry.
Arranges for hints to be restored on block
exit and also handles pad sequence numbers to make lexical variables scope
right.  Returns a savestack index for use with block_end(fR.
        int     block_start(int full)

ck_entersub_args_list 8
Performs the default fixup of the arguments part of an entersub(fR
op tree.  This consists of applying list context to each of the
argument ops.  This is the standard treatment used on a call marked
with &(fR, or a method call, or a call through a subroutine reference,
or any other call where the callee can't be identified at compile time,
or a call where the callee has no prototype.
        OP W    ck_entersub_args_list(OP Wentersubop)

ck_entersub_args_proto 8
Performs the fixup of the arguments part of an entersub(fR op tree
based on a subroutine prototype.  This makes various modifications to
the argument ops, from applying context up to inserting refgen(fR ops,
and checking the number and syntactic types of arguments, as directed by
the prototype.  This is the standard treatment used on a subroutine call,
not marked with &(fR, where the callee can be identified at compile time
and has a prototype.

protosv(fR supplies the subroutine prototype to be applied to the call.
It may be a normal defined scalar, of which the string value will be used.
Alternatively, for convenience, it may be a subroutine object (a CVW(fR
that has been cast to SVW(fR) which has a prototype.  The prototype
supplied, in whichever form, does not need to match the actual callee
referenced by the op tree.

If the argument ops disagree with the prototype, for example by having
an unacceptable number of arguments, a valid op tree is returned anyway.
The error is reflected in the parser state, normally resulting in a single
exception at the top level of parsing which covers all the compilation
errors that occurred.  In the error message, the callee is referred to
by the name defined by the namegv(fR parameter.
        OP W    ck_entersub_args_proto(OP Wentersubop,
                                       GV Wnamegv, SV Wprotosv)

ck_entersub_args_proto_or_list 8
Performs the fixup of the arguments part of an entersub(fR op tree either
based on a subroutine prototype or using default list context processing.
This is the standard treatment used on a subroutine call, not marked
with &(fR, where the callee can be identified at compile time.

protosv(fR supplies the subroutine prototype to be applied to the call,
or indicates that there is no prototype.  It may be a normal scalar,
in which case if it is defined then the string value will be used
as a prototype, and if it is undefined then there is no prototype.
Alternatively, for convenience, it may be a subroutine object (a CVW(fR
that has been cast to SVW(fR), of which the prototype will be used if it
has one.  The prototype (or lack thereof) supplied, in whichever form,
does not need to match the actual callee referenced by the op tree.

If the argument ops disagree with the prototype, for example by having
an unacceptable number of arguments, a valid op tree is returned anyway.
The error is reflected in the parser state, normally resulting in a single
exception at the top level of parsing which covers all the compilation
errors that occurred.  In the error message, the callee is referred to
by the name defined by the namegv(fR parameter.
        OP W    ck_entersub_args_proto_or_list(OP Wentersubop,
                                               GV Wnamegv,
                                               SV Wprotosv)

cv_const_sv 8
If cv(fR is a constant sub eligible for inlining, returns the constant
value returned by the sub.  Otherwise, returns NULL(fR.

Constant subs can be created with newCONSTSUB(fR or as described in
Constant Functions in perlsub.
        SVW     cv_const_sv(const CV Wconst cv)

cv_get_call_checker 8
The original form of cv_get_call_checker_flags, which does not return
checker flags.  When using a checker function returned by this function,
it is only safe to call it with a genuine GV as its namegv(fR argument.
        void    cv_get_call_checker(CV Wcv,
                                    Perl_call_checker Wckfun_p,
                                    SV WWckobj_p)

cv_get_call_checker_flags 8
Retrieves the function that will be used to fix up a call to cv(fR.
Specifically, the function is applied to an entersub(fR op tree for a
subroutine call, not marked with &(fR, where the callee can be identified
at compile time as cv(fR.

The C level function pointer is returned in Wckfun_p, an SV argument
for it is returned in Wckobj_p, and control flags are returned in
Wckflags_p.  The function is intended to be called in this manner:
 entersubop = (Wckfun_p)(aTHX_ entersubop, namegv, (Wckobj_p));
In this call, entersubop(fR is a pointer to the entersub(fR op,
which may be replaced by the check function, and namegv(fR supplies
the name that should be used by the check function to refer
to the callee of the entersub(fR op if it needs to emit any diagnostics.
It is permitted to apply the check function in non standard situations,
such as to a call to a different subroutine or to a method call.

namegv(fR may not actually be a GV.  If the CALL_CHECKER_REQUIRE_GV(fR
bit is clear in Wckflags_p, it is permitted to pass a CV or other SV
instead, anything that can be used as the first argument to cv_name.
If the CALL_CHECKER_REQUIRE_GV(fR bit is set in Wckflags_p then the
check function requires namegv(fR to be a genuine GV.

By default, the check function is
Perl_ck_entersub_args_proto_or_list,
the SV parameter is cv(fR itself, and the CALL_CHECKER_REQUIRE_GV(fR
flag is clear.  This implements standard prototype processing.  It can
be changed, for a particular subroutine, by cv_set_call_checker_flags.

If the CALL_CHECKER_REQUIRE_GV(fR bit is set in gflags(fR then it
indicates that the caller only knows about the genuine GV version of
namegv(fR, and accordingly the corresponding bit will always be set in
Wckflags_p, regardless of the check function's recorded requirements.
If the CALL_CHECKER_REQUIRE_GV(fR bit is clear in gflags(fR then it
indicates the caller knows about the possibility of passing something
other than a GV as namegv(fR, and accordingly the corresponding bit may
be either set or clear in Wckflags_p, indicating the check function's
recorded requirements.

gflags(fR is a bitset passed into cv_get_call_checker_flags(fR, in which
only the CALL_CHECKER_REQUIRE_GV(fR bit currently has a defined meaning
(for which see above).  All other bits should be clear.
        void    cv_get_call_checker_flags(
                    CV Wcv, U32 gflags,
                    Perl_call_checker Wckfun_p, SV WWckobj_p,
                    U32 Wckflags_p
                )

cv_set_call_checker 8
The original form of cv_set_call_checker_flags, which passes it the
CALL_CHECKER_REQUIRE_GV(fR flag for backward compatibility.  The effect
of that flag setting is that the check function is guaranteed to get a
genuine GV as its namegv(fR argument.
        void    cv_set_call_checker(CV Wcv,
                                    Perl_call_checker ckfun,
                                    SV Wckobj)

cv_set_call_checker_flags 8
Sets the function that will be used to fix up a call to cv(fR.
Specifically, the function is applied to an entersub(fR op tree for a
subroutine call, not marked with &(fR, where the callee can be identified
at compile time as cv(fR.

The C level function pointer is supplied in ckfun(fR, an SV argument for
it is supplied in ckobj(fR, and control flags are supplied in ckflags(fR.
The function should be defined like this:
    STATIC OP W ckfun(pTHX_ OP Wop, GV Wnamegv, SV Wckobj)
It is intended to be called in this manner:
    entersubop = ckfun(aTHX_ entersubop, namegv, ckobj);
In this call, entersubop(fR is a pointer to the entersub(fR op,
which may be replaced by the check function, and namegv(fR supplies
the name that should be used by the check function to refer
to the callee of the entersub(fR op if it needs to emit any diagnostics.
It is permitted to apply the check function in non standard situations,
such as to a call to a different subroutine or to a method call.

namegv(fR may not actually be a GV.  For efficiency, perl may pass a
CV or other SV instead.  Whatever is passed can be used as the first
argument to cv_name.  You can force perl to pass a GV by including
CALL_CHECKER_REQUIRE_GV(fR in the ckflags(fR.

ckflags(fR is a bitset, in which only the CALL_CHECKER_REQUIRE_GV(fR
bit currently has a defined meaning (for which see above).  All other
bits should be clear.

The current setting for a particular CV can be retrieved by
cv_get_call_checker_flags.
        void    cv_set_call_checker_flags(
                    CV Wcv, Perl_call_checker ckfun, SV Wckobj,
                    U32 ckflags
                )

LINKLIST 8
Given the root of an optree, link the tree in execution order using the
op_next(fR pointers and return the first op executed.  If this has
already been done, it will not be redone, and o >op_next(fR will be
returned.  If o >op_next(fR is not already set, o(fR should be at
least an UNOP(fR.
        OPW     LINKLIST(OP Wo)

newCONSTSUB 8
Behaves like newCONSTSUB_flags, except that name(fR is nul terminated
rather than of counted length, and no flags are set.  (This means that
name(fR is always interpreted as Latin 1.)
        CV W    newCONSTSUB(HV Wstash, const char Wname, SV Wsv)

newCONSTSUB_flags 8
Construct a constant subroutine, also performing some surrounding
jobs.  A scalar constant valued subroutine is eligible for inlining
at compile time, and in Perl code can be created by sub FOO () { 123 }(fR.  Other kinds of constant subroutine have other treatment.

The subroutine will have an empty prototype and will ignore any arguments
when called.  Its constant behaviour is determined by sv(fR.  If sv(fR
is null, the subroutine will yield an empty list.  If sv(fR points to a
scalar, the subroutine will always yield that scalar.  If sv(fR points
to an array, the subroutine will always yield a list of the elements of
that array in list context, or the number of elements in the array in
scalar context.  This function takes ownership of one counted reference
to the scalar or array, and will arrange for the object to live as long
as the subroutine does.  If sv(fR points to a scalar then the inlining
assumes that the value of the scalar will never change, so the caller
must ensure that the scalar is not subsequently written to.  If sv(fR
points to an array then no such assumption is made, so it is ostensibly
safe to mutate the array or its elements, but whether this is really
supported has not been determined.

The subroutine will have CvFILE(fR set according to PL_curcop(fR.
Other aspects of the subroutine will be left in their default state.
The caller is free to mutate the subroutine beyond its initial state
after this function has returned.

If name(fR is null then the subroutine will be anonymous, with its
CvGV(fR referring to an __ANON__(fR glob.  If name(fR is non null then the
subroutine will be named accordingly, referenced by the appropriate glob.
name(fR is a string of length len(fR bytes giving a sigilless symbol
name, in UTF 8 if flags(fR has the SVf_UTF8(fR bit set and in Latin 1
otherwise.  The name may be either qualified or unqualified.  If the
name is unqualified then it defaults to being in the stash specified by
stash(fR if that is non null, or to PL_curstash(fR if stash(fR is null.
The symbol is always added to the stash if necessary, with GV_ADDMULTI(fR
semantics.

flags(fR should not have bits set other than SVf_UTF8(fR.

If there is already a subroutine of the specified name, then the new sub
will replace the existing one in the glob.  A warning may be generated
about the redefinition.

If the subroutine has one of a few special names, such as BEGIN(fR or
END(fR, then it will be claimed by the appropriate queue for automatic
running of phase related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
Execution of the subroutine will likely be a no op, unless sv(fR was
a tied array or the caller modified the subroutine in some interesting
way before it was executed.  In the case of BEGIN(fR, the treatment is
buggy: the sub will be executed when only half built, and may be deleted
prematurely, possibly causing a crash.

The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase named
subroutine will usually be alive by virtue of the reference owned by
the phase's automatic run queue.  A BEGIN(fR subroutine may have been
destroyed already by the time this function returns, but currently bugs
occur in that case before the caller gets control.  It is the caller's
responsibility to ensure that it knows which of these situations applies.
        CV W    newCONSTSUB_flags(HV Wstash, const char Wname,
                                  STRLEN len, U32 flags, SV Wsv)

newXS 8
Used by xsubpp(fR to hook up XSUBs as Perl subs.  filename(fR needs to be
static storage, as it is used directly as CvFILE(), without a copy being made.
op_append_elem 8
Append an item to the list of ops contained directly within a list type
op, returning the lengthened list.  first(fR is the list type op,
and last(fR is the op to append to the list.  optype(fR specifies the
intended opcode for the list.  If first(fR is not already a list of the
right type, it will be upgraded into one.  If either first(fR or last(fR
is null, the other is returned unchanged.
        OP W    op_append_elem(I32 optype, OP Wfirst, OP Wlast)

op_append_list 8
Concatenate the lists of ops contained directly within two list type ops,
returning the combined list.  first(fR and last(fR are the list type ops
to concatenate.  optype(fR specifies the intended opcode for the list.
If either first(fR or last(fR is not already a list of the right type,
it will be upgraded into one.  If either first(fR or last(fR is null,
the other is returned unchanged.
        OP W    op_append_list(I32 optype, OP Wfirst, OP Wlast)

OP_CLASS 8
Return the class of the provided OP: that is, which of the WOP
structures it uses.  For core ops this currently gets the information out
of PL_opargs(fR, which does not always accurately reflect the type used;
in v5.26 onwards, see also the function "op_class" which can do a better
job of determining the used type.

For custom ops the type is returned from the registration, and it is up
to the registree to ensure it is accurate.  The value returned will be
one of the OA_(fRW constants from op.h.
        U32     OP_CLASS(OP Wo)

op_contextualize 8
Applies a syntactic context to an op tree representing an expression.
o(fR is the op tree, and context(fR must be G_SCALAR(fR, G_ARRAY(fR,
or G_VOID(fR to specify the context to apply.  The modified op tree
is returned.
        OP W    op_contextualize(OP Wo, I32 context)

op_convert_list 8
Converts o(fR into a list op if it is not one already, and then converts it
into the specified type(fR, calling its check function, allocating a target if
it needs one, and folding constants.

A list type op is usually constructed one kid at a time via newLISTOP(fR,
op_prepend_elem(fR and op_append_elem(fR.  Then finally it is passed to
op_convert_list(fR to make it the right type.
        OP W    op_convert_list(I32 type, I32 flags, OP Wo)

OP_DESC 8
Return a short description of the provided OP.
        const char W OP_DESC(OP Wo)

op_free 8
Free an op.  Only use this when an op is no longer linked to from any
optree.
        void    op_free(OP Wo)

OpHAS_SIBLING 8
Returns true if o(fR has a sibling
        bool    OpHAS_SIBLING(OP Wo)

OpLASTSIB_set 8
Marks o(fR as having no further siblings. On PERL_OP_PARENT(fR builds, marks
o as having the specified parent. See also "OpMORESIB_set" and
OpMAYBESIB_set(fR. For a higher level interface, see
"op_sibling_splice".
        void    OpLASTSIB_set(OP Wo, OP Wparent)

op_linklist 8
This function is the implementation of the (s 1LINKLIST(s0 macro.  It should
not be called directly.
        OPW     op_linklist(OP Wo)

op_lvalue 8
NOTE: this function is experimental and may change or be
removed without notice.

Propagate lvalue (modifiable) context to an op and its children.
type(fR represents the context type, roughly based on the type of op that
would do the modifying, although local()(fR is represented by OP_NULL(fR,
because it has no op type of its own (it is signalled by a flag on
the lvalue op).

This function detects things that can't be modified, such as $x+1(fR, and
generates errors for them.  For example, $x+1 = 2(fR would cause it to be
called with an op of type OP_ADD(fR and a type(fR argument of OP_SASSIGN(fR.

It also flags things that need to behave specially in an lvalue context,
such as $$x = 5(fR which might have to vivify a reference in $x.
        OP W    op_lvalue(OP Wo, I32 type)

OpMAYBESIB_set 8
Conditionally does OpMORESIB_set(fR or OpLASTSIB_set(fR depending on whether
sib(fR is non null. For a higher level interface, see "op_sibling_splice".
        void    OpMAYBESIB_set(OP Wo, OP Wsib, OP Wparent)

OpMORESIB_set 8
Sets the sibling of o(fR to the non zero value sib(fR. See also "OpLASTSIB_set"
and "OpMAYBESIB_set". For a higher level interface, see
"op_sibling_splice".
        void    OpMORESIB_set(OP Wo, OP Wsib)

OP_NAME 8
Return the name of the provided OP.  For core ops this looks up the name
from the op_type; for custom ops from the op_ppaddr.
        const char W OP_NAME(OP Wo)

op_null 8
Neutralizes an op when it is no longer needed, but is still linked to from
other ops.
        void    op_null(OP Wo)

op_parent 8
Returns the parent OP of o(fR, if it has a parent. Returns NULL(fR otherwise.
This function is only available on perls built with ( DPERL_OP_PARENT(fR.
        OPW     op_parent(OP Wo)

op_prepend_elem 8
Prepend an item to the list of ops contained directly within a list type
op, returning the lengthened list.  first(fR is the op to prepend to the
list, and last(fR is the list type op.  optype(fR specifies the intended
opcode for the list.  If last(fR is not already a list of the right type,
it will be upgraded into one.  If either first(fR or last(fR is null,
the other is returned unchanged.
        OP W    op_prepend_elem(I32 optype, OP Wfirst, OP Wlast)

op_scope 8
NOTE: this function is experimental and may change or be
removed without notice.

Wraps up an op tree with some additional ops so that at runtime a dynamic
scope will be created.  The original ops run in the new dynamic scope,
and then, provided that they exit normally, the scope will be unwound.
The additional ops used to create and unwind the dynamic scope will
normally be an enter(fR/leave(fR pair, but a scope(fR op may be used
instead if the ops are simple enough to not need the full dynamic scope
structure.
        OP W    op_scope(OP Wo)

OpSIBLING 8
Returns the sibling of o(fR, or NULL(fR if there is no sibling
        OPW     OpSIBLING(OP Wo)

op_sibling_splice 8
A general function for editing the structure of an existing chain of
op_sibling nodes.  By analogy with the perl level splice()(fR function, allows
you to delete zero or more sequential nodes, replacing them with zero or
more different nodes.  Performs the necessary op_first/op_last
housekeeping on the parent node and op_sibling manipulation on the
children.  The last deleted node will be marked as as the last node by
updating the op_sibling/op_sibparent or op_moresib field as appropriate.

Note that op_next is not manipulated, and nodes are not freed; that is the
responsibility of the caller.  It also won't create a new list op for an
empty list etc; use higher level functions like op_append_elem() for that.

parent(fR is the parent node of the sibling chain. It may passed as NULL(fR if
the splicing doesn't affect the first or last op in the chain.

start(fR is the node preceding the first node to be spliced.  Node(s)
following it will be deleted, and ops will be inserted after it.  If it is
NULL(fR, the first node onwards is deleted, and nodes are inserted at the
beginning.

del_count(fR is the number of nodes to delete.  If zero, no nodes are deleted.
If  1 or greater than or equal to the number of remaining kids, all
remaining kids are deleted.

insert(fR is the first of a chain of nodes to be inserted in place of the nodes.
If NULL(fR, no nodes are inserted.

The head of the chain of deleted ops is returned, or NULL(fR if no ops were
deleted.

For example:
    action                    before      after         returns
                                                               

                              P           P
    splice(P, A, 2, X Y Z)    |           |             B C
                              A B C D     A X Y Z D

                              P           P
    splice(P, NULL, 1, X Y)   |           |             A
                              A B C D     X Y B C D

                              P           P
    splice(P, NULL, 3, NULL)  |           |             A B C
                              A B C D     D

                              P           P
    splice(P, B, 0, X Y)      |           |             NULL
                              A B C D     A B X Y C D
For lower level direct manipulation of op_sibparent(fR and op_moresib(fR,
see "OpMORESIB_set", "OpLASTSIB_set", "OpMAYBESIB_set".
        OPW     op_sibling_splice(OP Wparent, OP Wstart,
                                  int del_count, OPW insert)

OP_TYPE_IS 8
Returns true if the given OP is not a NULL(fR pointer
and if it is of the given type.

The negation of this macro, OP_TYPE_ISNT(fR is also available
as well as OP_TYPE_IS_NN(fR and OP_TYPE_ISNT_NN(fR which elide
the NULL pointer check.
        bool    OP_TYPE_IS(OP Wo, Optype type)

OP_TYPE_IS_OR_WAS 8
Returns true if the given OP is not a NULL pointer and
if it is of the given type or used to be before being
replaced by an OP of type OP_NULL.

The negation of this macro, OP_TYPE_ISNT_AND_WASNT(fR
is also available as well as OP_TYPE_IS_OR_WAS_NN(fR
and OP_TYPE_ISNT_AND_WASNT_NN(fR which elide
the NULL(fR pointer check.
        bool    OP_TYPE_IS_OR_WAS(OP Wo, Optype type)

rv2cv_op_cv 8
Examines an op, which is expected to identify a subroutine at runtime,
and attempts to determine at compile time which subroutine it identifies.
This is normally used during Perl compilation to determine whether
a prototype can be applied to a function call.  cvop(fR is the op
being considered, normally an rv2cv(fR op.  A pointer to the identified
subroutine is returned, if it could be determined statically, and a null
pointer is returned if it was not possible to determine statically.

Currently, the subroutine can be identified statically if the RV that the
rv2cv(fR is to operate on is provided by a suitable gv(fR or const(fR op.
A gv(fR op is suitable if the GV's CV slot is populated.  A const(fR op is
suitable if the constant value must be an RV pointing to a CV.  Details of
this process may change in future versions of Perl.  If the rv2cv(fR op
has the OPpENTERSUB_AMPER(fR flag set then no attempt is made to identify
the subroutine statically: this flag is used to suppress compile time
magic on a subroutine call, forcing it to use default runtime behaviour.

If flags(fR has the bit RV2CVOPCV_MARK_EARLY(fR set, then the handling
of a GV reference is modified.  If a GV was examined and its CV slot was
found to be empty, then the gv(fR op has the OPpEARLY_CV(fR flag set.
If the op is not optimised away, and the CV slot is later populated with
a subroutine having a prototype, that flag eventually triggers the warning
called too early to check prototype.

If flags(fR has the bit RV2CVOPCV_RETURN_NAME_GV(fR set, then instead
of returning a pointer to the subroutine it returns a pointer to the
GV giving the most appropriate name for the subroutine in this context.
Normally this is just the CvGV(fR of the subroutine, but for an anonymous
(CvANON(fR) subroutine that is referenced through a GV it will be the
referencing GV.  The resulting GVW(fR is cast to CVW(fR to be returned.
A null pointer is returned as usual if there is no statically determinable
subroutine.
        CV W    rv2cv_op_cv(OP Wcvop, U32 flags)

Pack and Unpack

packlist 8
The engine implementing pack()(fR Perl function.
        void    packlist(SV Wcat, const char Wpat,
                         const char Wpatend, SV WWbeglist,
                         SV WWendlist)

unpackstring 8
The engine implementing the unpack()(fR Perl function.

Using the template pat..patend(fR, this function unpacks the string
s..strend(fR into a number of mortal SVs, which it pushes onto the perl
argument (@_) stack (so you will need to issue a PUTBACK(fR before and
SPAGAIN(fR after the call to this function).  It returns the number of
pushed elements.

The strend(fR and patend(fR pointers should point to the byte following the
last character of each string.

Although this function returns its values on the perl argument stack, it
doesn't take any parameters from that stack (and thus in particular
there's no need to do a PUSHMARK(fR before calling it, unlike call_pv for
example).
        SSize_t unpackstring(const char Wpat,
                             const char Wpatend, const char Ws,
                             const char Wstrend, U32 flags)

Pad Data Structures

CvPADLIST 8
NOTE: this function is experimental and may change or be
removed without notice.

CV's can have CvPADLIST(cv) set to point to a PADLIST.  This is the CV's
scratchpad, which stores lexical variables and opcode temporary and
per thread values.

For these purposes formats are a kind of CV; eval"s are too (except they're
not callable at will and are always thrown away after the eval" is done
executing).  Require'd files are simply evals without any outer lexical
scope.

XSUBs do not have a CvPADLIST(fR.  dXSTARG(fR fetches values from PL_curpad(fR,
but that is really the callers pad (a slot of which is allocated by
every entersub). Do not get or set CvPADLIST(fR if a CV is an XSUB (as
determined by CvISXSUB()(fR), CvPADLIST(fR slot is reused for a different
internal purpose in XSUBs.

The PADLIST has a C array where pads are stored.

The 0th entry of the PADLIST is a PADNAMELIST
which represents the names or rather
the static type information for lexicals.  The individual elements of a
PADNAMELIST are PADNAMEs.  Future
refactorings might stop the PADNAMELIST from being stored in the PADLIST's
array, so don't rely on it.  See PadlistNAMES.

The CvDEPTH'th entry of a PADLIST is a PAD (an AV) which is the stack frame
at that depth of recursion into the CV.  The 0th slot of a frame AV is an
AV which is @_.  Other entries are storage for variables and op targets.

Iterating over the PADNAMELIST iterates over all possible pad
items.  Pad slots for targets (SVs_PADTMP(fR)
and GVs end up having &PL_padname_undef names, while slots for constants 
have &PL_padname_const names (see "pad_alloc").  That
&PL_padname_undef
and &PL_padname_const are used is an implementation detail subject to
change.  To test for them, use !PadnamePV(name)(fR and
PadnamePV(name) && !PadnameLEN(name)(fR, respectively.

Only my(fR/our(fR variable slots get valid names.
The rest are op targets/GVs/constants which are statically allocated
or resolved at compile time.  These don't have names by which they
can be looked up from Perl code at run time through eval"" the way
my(fR/our(fR variables can be.  Since they can't be looked up by name
but only by their index allocated at compile time (which is usually
in PL_op >op_targ(fR), wasting a name SV for them doesn't make sense.

The pad names in the PADNAMELIST have their PV holding the name of
the variable.  The COP_SEQ_RANGE_LOW(fR and _HIGH(fR fields form a range
(low+1..high inclusive) of cop_seq numbers for which the name is
valid.  During compilation, these fields may hold the special value
PERL_PADSEQ_INTRO to indicate various stages:
 COP_SEQ_RANGE_LOW        _HIGH
                               
 PERL_PADSEQ_INTRO            0   variable not yet introduced:
                                  { my ($x
 valid seq#   PERL_PADSEQ_INTRO   variable in scope:
                                  { my ($x);
 valid seq#          valid seq#   compilation of scope complete:
                                  { my ($x); .... }
When a lexical var hasn't yet been introduced, it already exists from the
perspective of duplicate declarations, but not for variable lookups, e.g.
    my ($x, $x); # "my" variable $x masks earlier declaration
    my $x = $x;  # equal to my $x = $::x;
For typed lexicals PadnameTYPE(fR points at the type stash.  For our(fR
lexicals, PadnameOURSTASH(fR points at the stash of the associated global (so
that duplicate our(fR declarations in the same package can be detected).
PadnameGEN(fR is sometimes used to store the generation number during
compilation.

If PadnameOUTER(fR is set on the pad name, then that slot in the frame AV
is a REFCNT'ed reference to a lexical from outside.  Such entries
are sometimes referred to as 'fake'.  In this case, the name does not
use 'low' and 'high' to store a cop_seq range, since it is in scope
throughout.  Instead 'high' stores some flags containing info about
the real lexical (is it declared in an anon, and is it capable of being
instantiated multiple times?), and for fake ANONs, 'low' contains the index
within the parent's pad where the lexical's value is stored, to make
cloning quicker.

If the 'name' is &(fR the corresponding entry in the PAD
is a CV representing a possible closure.

Note that formats are treated as anon subs, and are cloned each time
write is called (if necessary).

The flag SVs_PADSTALE(fR is cleared on lexicals each time the my()(fR is executed,
and set on scope exit.  This allows the
"Variable $x is not available" warning
to be generated in evals, such as
    { my $x = 1; sub f { eval $x} } f();
For state vars, SVs_PADSTALE(fR is overloaded to mean 'not yet initialised',
but this internal state is stored in a separate pad entry.
        PADLIST W CvPADLIST(CV Wcv)

pad_add_name_pvs 8
Exactly like pad_add_name_pvn, but takes a literal string
instead of a string/length pair.
        PADOFFSET pad_add_name_pvs("literal string" name,
                                   U32 flags, HV Wtypestash,
                                   HV Wourstash)

PadARRAY 8
NOTE: this function is experimental and may change or be
removed without notice.

The C array of pad entries.
        SV WW   PadARRAY(PAD pad)

pad_findmy_pvs 8
Exactly like pad_findmy_pvn, but takes a literal string
instead of a string/length pair.
        PADOFFSET pad_findmy_pvs("literal string" name,
                                 U32 flags)

PadlistARRAY 8
NOTE: this function is experimental and may change or be
removed without notice.

The C array of a padlist, containing the pads.  Only subscript it with
numbers >= 1, as the 0th entry is not guaranteed to remain usable.
        PAD WW  PadlistARRAY(PADLIST padlist)

PadlistMAX 8
NOTE: this function is experimental and may change or be
removed without notice.

The index of the last allocated space in the padlist.  Note that the last
pad may be in an earlier slot.  Any entries following it will be NULL(fR in
that case.
        SSize_t PadlistMAX(PADLIST padlist)

PadlistNAMES 8
NOTE: this function is experimental and may change or be
removed without notice.

The names associated with pad entries.
        PADNAMELIST W PadlistNAMES(PADLIST padlist)

PadlistNAMESARRAY 8
NOTE: this function is experimental and may change or be
removed without notice.

The C array of pad names.
        PADNAME WW PadlistNAMESARRAY(PADLIST padlist)

PadlistNAMESMAX 8
NOTE: this function is experimental and may change or be
removed without notice.

The index of the last pad name.
        SSize_t PadlistNAMESMAX(PADLIST padlist)

PadlistREFCNT 8
NOTE: this function is experimental and may change or be
removed without notice.

The reference count of the padlist.  Currently this is always 1.
        U32     PadlistREFCNT(PADLIST padlist)

PadMAX 8
NOTE: this function is experimental and may change or be
removed without notice.

The index of the last pad entry.
        SSize_t PadMAX(PAD pad)

PadnameLEN 8
NOTE: this function is experimental and may change or be
removed without notice.

The length of the name.
        STRLEN  PadnameLEN(PADNAME pn)

PadnamelistARRAY 8
NOTE: this function is experimental and may change or be
removed without notice.

The C array of pad names.
        PADNAME WW PadnamelistARRAY(PADNAMELIST pnl)

PadnamelistMAX 8
NOTE: this function is experimental and may change or be
removed without notice.

The index of the last pad name.
        SSize_t PadnamelistMAX(PADNAMELIST pnl)

PadnamelistREFCNT 8
NOTE: this function is experimental and may change or be
removed without notice.

The reference count of the pad name list.
        SSize_t PadnamelistREFCNT(PADNAMELIST pnl)

PadnamelistREFCNT_dec 8
NOTE: this function is experimental and may change or be
removed without notice.

Lowers the reference count of the pad name list.
        void    PadnamelistREFCNT_dec(PADNAMELIST pnl)

PadnamePV 8
NOTE: this function is experimental and may change or be
removed without notice.

The name stored in the pad name struct.  This returns NULL(fR for a target
slot.
        char W  PadnamePV(PADNAME pn)

PadnameREFCNT 8
NOTE: this function is experimental and may change or be
removed without notice.

The reference count of the pad name.
        SSize_t PadnameREFCNT(PADNAME pn)

PadnameREFCNT_dec 8
NOTE: this function is experimental and may change or be
removed without notice.

Lowers the reference count of the pad name.
        void    PadnameREFCNT_dec(PADNAME pn)

PadnameSV 8
NOTE: this function is experimental and may change or be
removed without notice.

Returns the pad name as a mortal SV.
        SV W    PadnameSV(PADNAME pn)

PadnameUTF8 8
NOTE: this function is experimental and may change or be
removed without notice.

Whether PadnamePV is in UTF 8.  Currently, this is always true.
        bool    PadnameUTF8(PADNAME pn)

pad_new 8
Create a new padlist, updating the global variables for the
currently compiling padlist to point to the new padlist.  The following
flags can be OR'ed together:
    padnew_CLONE        this pad is for a cloned CV
    padnew_SAVE         save old globals on the save stack
    padnew_SAVESUB      also save extra stuff for start of sub

        PADLIST W pad_new(int flags)

PL_comppad 8
NOTE: this function is experimental and may change or be
removed without notice.

During compilation, this points to the array containing the values
part of the pad for the currently compiling code.  (At runtime a CV may
have many such value arrays; at compile time just one is constructed.)
At runtime, this points to the array containing the currently relevant
values for the pad for the currently executing code.
PL_comppad_name 8
NOTE: this function is experimental and may change or be
removed without notice.

During compilation, this points to the array containing the names part
of the pad for the currently compiling code.
PL_curpad 8
NOTE: this function is experimental and may change or be
removed without notice.

Points directly to the body of the PL_comppad array.
(I.e., this is PadARRAY(PL_comppad)(fR.)
Per Interpreter Variables

PL_modglobal 8
PL_modglobal(fR is a general purpose, interpreter global HV for use by
extensions that need to keep information on a per interpreter basis.
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
prefixed by the package name of the extension that owns the data.
        HVW     PL_modglobal

PL_na 8
A convenience variable which is typically used with SvPV(fR when one
doesn't care about the length of the string.  It is usually more efficient
to either declare a local variable and use that instead or to use the
SvPV_nolen(fR macro.
        STRLEN  PL_na

PL_opfreehook 8
When non NULL(fR, the function pointed by this variable will be called each time an OP is freed with the corresponding OP as the argument.
This allows extensions to free any extra attribute they have locally attached to an OP.
It is also assured to first fire for the parent OP and then for its kids.

When you replace this variable, it is considered a good practice to store the possibly previously installed hook and that you recall it inside your own.
        Perl_ophook_t   PL_opfreehook

PL_peepp 8
Pointer to the per subroutine peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of
some ops and to perform small scale optimisations.  The function is
called once for each subroutine that is compiled, and is passed, as sole
parameter, a pointer to the op that is the entry point to the subroutine.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in Compile pass 3: peephole optimization in perlguts.
If the new code wishes to operate on ops throughout the subroutine's
structure, rather than just at the top level, it is likely to be more
convenient to wrap the PL_rpeepp hook.
        peep_t  PL_peepp

PL_rpeepp 8
Pointer to the recursive peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of some
ops and to perform small scale optimisations.  The function is called
once for each chain of ops linked through their op_next(fR fields;
it is recursively called to handle each side chain.  It is passed, as
sole parameter, a pointer to the op that is at the head of the chain.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in Compile pass 3: peephole optimization in perlguts.
If the new code wishes to operate only on ops at a subroutine's top level,
rather than throughout the structure, it is likely to be more convenient
to wrap the PL_peepp hook.
        peep_t  PL_rpeepp

PL_sv_no 8
This is the false(fR SV.  See "PL_sv_yes".  Always refer to this as
&PL_sv_no.
        SV      PL_sv_no

PL_sv_undef 8
This is the undef(fR SV.  Always refer to this as &PL_sv_undef.
        SV      PL_sv_undef

PL_sv_yes 8
This is the true(fR SV.  See "PL_sv_no".  Always refer to this as
&PL_sv_yes.
        SV      PL_sv_yes

PL_sv_zero 8
This readonly SV has a zero numeric value and a "0" string value. It's
similar to "PL_sv_no" except for its string value. Can be used as a
cheap alternative to mXPUSHi(0) for example.  Always refer to this as
&PL_sv_zero. Introduced in 5.28.
        SV      PL_sv_zero

REGEXP Functions

SvRX 8
Convenience macro to get the REGEXP from a SV.  This is approximately
equivalent to the following snippet:
    if (SvMAGICAL(sv))
        mg_get(sv);
    if (SvROK(sv))
        sv = MUTABLE_SV(SvRV(sv));
    if (SvTYPE(sv) == SVt_REGEXP)
        return (REGEXPW) sv;
NULL(fR will be returned if a REGEXPW is not found.
        REGEXP W SvRX(SV Wsv)

SvRXOK 8
Returns a boolean indicating whether the SV (or the one it references)
is a REGEXP.

If you want to do something with the REGEXPW later use SvRX instead
and check for NULL.
        bool    SvRXOK(SVW sv)

Stack Manipulation Macros

dMARK 8
Declare a stack marker variable, mark(fR, for the XSUB.  See "MARK" and
"dORIGMARK".
                dMARK;

dORIGMARK 8
Saves the original stack mark for the XSUB.  See "ORIGMARK".
                dORIGMARK;

dSP 8
Declares a local copy of perl's stack pointer for the XSUB, available via
the SP(fR macro.  See "SP".
                dSP;

EXTEND 8
Used to extend the argument stack for an XSUB's return values.  Once
used, guarantees that there is room for at least nitems(fR to be pushed
onto the stack.
        void    EXTEND(SP, SSize_t nitems)

MARK 8
Stack marker variable for the XSUB.  See "dMARK".
mPUSHi 8
Push an integer onto the stack.  The stack must have room for this element.
Does not use TARG(fR.  See also "PUSHi", "mXPUSHi" and "XPUSHi".
        void    mPUSHi(IV iv)

mPUSHn 8
Push a double onto the stack.  The stack must have room for this element.
Does not use TARG(fR.  See also "PUSHn", "mXPUSHn" and "XPUSHn".
        void    mPUSHn(NV nv)

mPUSHp 8
Push a string onto the stack.  The stack must have room for this element.
The len(fR indicates the length of the string.  Does not use TARG(fR.
See also "PUSHp", "mXPUSHp" and "XPUSHp".
        void    mPUSHp(charW str, STRLEN len)

mPUSHs 8
Push an SV onto the stack and mortalizes the SV.  The stack must have room
for this element.  Does not use TARG(fR.  See also "PUSHs" and
"mXPUSHs".
        void    mPUSHs(SVW sv)

mPUSHu 8
Push an unsigned integer onto the stack.  The stack must have room for this
element.  Does not use TARG(fR.  See also "PUSHu", "mXPUSHu" and
"XPUSHu".
        void    mPUSHu(UV uv)

mXPUSHi 8
Push an integer onto the stack, extending the stack if necessary.
Does not use TARG(fR.  See also "XPUSHi", "mPUSHi" and "PUSHi".
        void    mXPUSHi(IV iv)

mXPUSHn 8
Push a double onto the stack, extending the stack if necessary.
Does not use TARG(fR.  See also "XPUSHn", "mPUSHn" and "PUSHn".
        void    mXPUSHn(NV nv)

mXPUSHp 8
Push a string onto the stack, extending the stack if necessary.  The len(fR
indicates the length of the string.  Does not use TARG(fR.  See also
"XPUSHp", mPUSHp(fR and PUSHp(fR.
        void    mXPUSHp(charW str, STRLEN len)

mXPUSHs 8
Push an SV onto the stack, extending the stack if necessary and mortalizes
the SV.  Does not use TARG(fR.  See also "XPUSHs" and "mPUSHs".
        void    mXPUSHs(SVW sv)

mXPUSHu 8
Push an unsigned integer onto the stack, extending the stack if necessary.
Does not use TARG(fR.  See also "XPUSHu", "mPUSHu" and "PUSHu".
        void    mXPUSHu(UV uv)

ORIGMARK 8
The original stack mark for the XSUB.  See "dORIGMARK".
POPi 8
Pops an integer off the stack.
        IV      POPi

POPl 8
Pops a long off the stack.
        long    POPl

POPn 8
Pops a double off the stack.
        NV      POPn

POPp 8
Pops a string off the stack.
        charW   POPp

POPpbytex 8
Pops a string off the stack which must consist of bytes i.e. characters < 256.
        charW   POPpbytex

POPpx 8
Pops a string off the stack.  Identical to POPp.  There are two names for
historical reasons.
        charW   POPpx

POPs 8
Pops an SV off the stack.
        SVW     POPs

POPu 8
Pops an unsigned integer off the stack.
        UV      POPu

POPul 8
Pops an unsigned long off the stack.
        long    POPul

PUSHi 8
Push an integer onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Uses TARG(fR, so dTARGET(fR or dXSTARG(fR should be
called to declare it.  Do not call multiple TARG(fR oriented macros to 
return lists from XSUB's   see "mPUSHi" instead.  See also "XPUSHi"
and "mXPUSHi".
        void    PUSHi(IV iv)

PUSHMARK 8
Opening bracket for arguments on a callback.  See "PUTBACK" and
perlcall.
        void    PUSHMARK(SP)

PUSHmortal 8
Push a new mortal SV onto the stack.  The stack must have room for this
element.  Does not use TARG(fR.  See also "PUSHs", "XPUSHmortal" and
"XPUSHs".
        void    PUSHmortal()

PUSHn 8
Push a double onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Uses TARG(fR, so dTARGET(fR or dXSTARG(fR should be
called to declare it.  Do not call multiple TARG(fR oriented macros to
return lists from XSUB's   see "mPUSHn" instead.  See also "XPUSHn"
and "mXPUSHn".
        void    PUSHn(NV nv)

PUSHp 8
Push a string onto the stack.  The stack must have room for this element.
The len(fR indicates the length of the string.  Handles 'set' magic.  Uses
TARG(fR, so dTARGET(fR or dXSTARG(fR should be called to declare it.  Do not
call multiple TARG(fR oriented macros to return lists from XSUB's   see
"mPUSHp" instead.  See also "XPUSHp" and "mXPUSHp".
        void    PUSHp(charW str, STRLEN len)

PUSHs 8
Push an SV onto the stack.  The stack must have room for this element.
Does not handle 'set' magic.  Does not use TARG(fR.  See also
"PUSHmortal", "XPUSHs", and "XPUSHmortal".
        void    PUSHs(SVW sv)

PUSHu 8
Push an unsigned integer onto the stack.  The stack must have room for this
element.  Handles 'set' magic.  Uses TARG(fR, so dTARGET(fR or dXSTARG(fR
should be called to declare it.  Do not call multiple TARG(fR oriented
macros to return lists from XSUB's   see "mPUSHu" instead.  See also
"XPUSHu" and "mXPUSHu".
        void    PUSHu(UV uv)

PUTBACK 8
Closing bracket for XSUB arguments.  This is usually handled by xsubpp(fR.
See "PUSHMARK" and perlcall for other uses.
                PUTBACK;

SP 8
Stack pointer.  This is usually handled by xsubpp(fR.  See "dSP" and
SPAGAIN(fR.
SPAGAIN 8
Refetch the stack pointer.  Used after a callback.  See perlcall.
                SPAGAIN;

XPUSHi 8
Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic.  Uses TARG(fR, so dTARGET(fR or dXSTARG(fR should be called to
declare it.  Do not call multiple TARG(fR oriented macros to return lists
from XSUB's   see "mXPUSHi" instead.  See also "PUSHi" and
"mPUSHi".
        void    XPUSHi(IV iv)

XPUSHmortal 8
Push a new mortal SV onto the stack, extending the stack if necessary.
Does not use TARG(fR.  See also "XPUSHs", "PUSHmortal" and
"PUSHs".
        void    XPUSHmortal()

XPUSHn 8
Push a double onto the stack, extending the stack if necessary.  Handles
'set' magic.  Uses TARG(fR, so dTARGET(fR or dXSTARG(fR should be called to
declare it.  Do not call multiple TARG(fR oriented macros to return lists
from XSUB's   see "mXPUSHn" instead.  See also "PUSHn" and
"mPUSHn".
        void    XPUSHn(NV nv)

XPUSHp 8
Push a string onto the stack, extending the stack if necessary.  The len(fR
indicates the length of the string.  Handles 'set' magic.  Uses TARG(fR, so
dTARGET(fR or dXSTARG(fR should be called to declare it.  Do not call
multiple TARG(fR oriented macros to return lists from XSUB's   see
"mXPUSHp" instead.  See also "PUSHp" and "mPUSHp".
        void    XPUSHp(charW str, STRLEN len)

XPUSHs 8
Push an SV onto the stack, extending the stack if necessary.  Does not
handle 'set' magic.  Does not use TARG(fR.  See also "XPUSHmortal",
PUSHs(fR and PUSHmortal(fR.
        void    XPUSHs(SVW sv)

XPUSHu 8
Push an unsigned integer onto the stack, extending the stack if necessary.
Handles 'set' magic.  Uses TARG(fR, so dTARGET(fR or dXSTARG(fR should be
called to declare it.  Do not call multiple TARG(fR oriented macros to
return lists from XSUB's   see "mXPUSHu" instead.  See also "PUSHu" and
"mPUSHu".
        void    XPUSHu(UV uv)

XSRETURN 8
Return from XSUB, indicating number of items on the stack.  This is usually
handled by xsubpp(fR.
        void    XSRETURN(int nitems)

XSRETURN_EMPTY 8
Return an empty list from an XSUB immediately.
                XSRETURN_EMPTY;

XSRETURN_IV 8
Return an integer from an XSUB immediately.  Uses XST_mIV(fR.
        void    XSRETURN_IV(IV iv)

XSRETURN_NO 8
Return &PL_sv_no from an XSUB immediately.  Uses XST_mNO(fR.
                XSRETURN_NO;

XSRETURN_NV 8
Return a double from an XSUB immediately.  Uses XST_mNV(fR.
        void    XSRETURN_NV(NV nv)

XSRETURN_PV 8
Return a copy of a string from an XSUB immediately.  Uses XST_mPV(fR.
        void    XSRETURN_PV(charW str)

XSRETURN_UNDEF 8
Return &PL_sv_undef from an XSUB immediately.  Uses XST_mUNDEF(fR.
                XSRETURN_UNDEF;

XSRETURN_UV 8
Return an integer from an XSUB immediately.  Uses XST_mUV(fR.
        void    XSRETURN_UV(IV uv)

XSRETURN_YES 8
Return &PL_sv_yes from an XSUB immediately.  Uses XST_mYES(fR.
                XSRETURN_YES;

XST_mIV 8
Place an integer into the specified position pos(fR on the stack.  The
value is stored in a new mortal SV.
        void    XST_mIV(int pos, IV iv)

XST_mNO 8
Place &PL_sv_no into the specified position pos(fR on the
stack.
        void    XST_mNO(int pos)

XST_mNV 8
Place a double into the specified position pos(fR on the stack.  The value
is stored in a new mortal SV.
        void    XST_mNV(int pos, NV nv)

XST_mPV 8
Place a copy of a string into the specified position pos(fR on the stack. 
The value is stored in a new mortal SV.
        void    XST_mPV(int pos, charW str)

XST_mUNDEF 8
Place &PL_sv_undef into the specified position pos(fR on the
stack.
        void    XST_mUNDEF(int pos)

XST_mYES 8
Place &PL_sv_yes into the specified position pos(fR on the
stack.
        void    XST_mYES(int pos)

SV Body Allocation

looks_like_number 8
Test if the content of an SV looks like a number (or is a number).
Inf(fR and Infinity(fR are treated as numbers (so will not issue a
non numeric warning), even if your atof()(fR doesn't grok them.  Get magic is
ignored.
        I32     looks_like_number(SV Wconst sv)

newRV_noinc 8
Creates an RV wrapper for an SV.  The reference count for the original
SV is not incremented.
        SVW     newRV_noinc(SV Wconst tmpRef)

newSV 8
Creates a new SV.  A non zero len(fR parameter indicates the number of
bytes of preallocated string space the SV should have.  An extra byte for a
trailing NUL(fR is also reserved.  (SvPOK(fR is not set for the SV even if string
space is allocated.)  The reference count for the new SV is set to 1.

In 5.9.3, newSV()(fR replaces the older NEWSV()(fR API, and drops the first
parameter, x, a debug aid which allowed callers to identify themselves.
This aid has been superseded by a new build option, PERL_MEM_LOG(fR (see
(s 1PERL_MEM_LOG(s0 in perlhacktips).  The older API is still there for use in XS
modules supporting older perls.
        SVW     newSV(const STRLEN len)

newSVhek 8
Creates a new SV from the hash key structure.  It will generate scalars that
point to the shared string table where possible.  Returns a new (undefined)
SV if hek(fR is NULL.
        SVW     newSVhek(const HEK Wconst hek)

newSViv 8
Creates a new SV and copies an integer into it.  The reference count for the
SV is set to 1.
        SVW     newSViv(const IV i)

newSVnv 8
Creates a new SV and copies a floating point value into it.
The reference count for the SV is set to 1.
        SVW     newSVnv(const NV n)

newSVpv 8
Creates a new SV and copies a string (which may contain NUL(fR ((e0(fR)
characters) into it.  The reference count for the
SV is set to 1.  If len(fR is zero, Perl will compute the length using
strlen()(fR, (which means if you use this option, that s(fR can't have embedded
NUL(fR characters and has to have a terminating NUL(fR byte).

This function can cause reliability issues if you are likely to pass in
empty strings that are not null terminated, because it will run
strlen on the string and potentially run past valid memory.

Using newSVpvn is a safer alternative for non NUL(fR terminated strings.
For string literals use newSVpvs instead.  This function will work fine for
NUL(fR terminated strings, but if you want to avoid the if statement on whether
to call strlen(fR use newSVpvn(fR instead (calling strlen(fR yourself).
        SVW     newSVpv(const char Wconst s, const STRLEN len)

newSVpvf 8
Creates a new SV and initializes it with the string formatted like
sv_catpvf(fR.
        SVW     newSVpvf(const char Wconst pat, ...)

newSVpvn 8
Creates a new SV and copies a string into it, which may contain NUL(fR characters
((e0(fR) and other binary data.  The reference count for the SV is set to 1.
Note that if len(fR is zero, Perl will create a zero length (Perl) string.  You
are responsible for ensuring that the source buffer is at least
len(fR bytes long.  If the s(fR argument is NULL the new SV will be
undefined.
        SVW     newSVpvn(const char Wconst buffer,
                         const STRLEN len)

newSVpvn_flags 8
Creates a new SV and copies a string (which may contain NUL(fR ((e0(fR)
characters) into it.  The reference count for the
SV is set to 1.  Note that if len(fR is zero, Perl will create a zero length
string.  You are responsible for ensuring that the source string is at least
len(fR bytes long.  If the s(fR argument is NULL the new SV will be undefined.
Currently the only flag bits accepted are SVf_UTF8(fR and SVs_TEMP(fR.
If SVs_TEMP(fR is set, then sv_2mortal()(fR is called on the result before
returning.  If SVf_UTF8(fR is set, s(fR
is considered to be in UTF 8 and the
SVf_UTF8(fR flag will be set on the new SV.
newSVpvn_utf8()(fR is a convenience wrapper for this function, defined as
    #define newSVpvn_utf8(s, len, u)                    (
        newSVpvn_flags((s), (len), (u) ? SVf_UTF8 : 0)

        SVW     newSVpvn_flags(const char Wconst s,
                               const STRLEN len,
                               const U32 flags)

newSVpvn_share 8
Creates a new SV with its SvPVX_const(fR pointing to a shared string in the string
table.  If the string does not already exist in the table, it is
created first.  Turns on the SvIsCOW(fR flag (or READONLY(fR
and FAKE(fR in 5.16 and earlier).  If the hash(fR parameter
is non zero, that value is used; otherwise the hash is computed.
The string's hash can later be retrieved from the SV
with the SvSHARED_HASH()(fR macro.  The idea here is
that as the string table is used for shared hash keys these strings will have
SvPVX_const == HeKEY(fR and hash lookup will avoid string compare.
        SVW     newSVpvn_share(const charW s, I32 len, U32 hash)

newSVpvs 8
Like newSVpvn(fR, but takes a literal string instead of a
string/length pair.
        SVW     newSVpvs("literal string" s)

newSVpvs_flags 8
Like newSVpvn_flags(fR, but takes a literal string instead of
a string/length pair.
        SVW     newSVpvs_flags("literal string" s, U32 flags)

newSVpv_share 8
Like newSVpvn_share(fR, but takes a NUL(fR terminated string instead of a
string/length pair.
        SVW     newSVpv_share(const charW s, U32 hash)

newSVpvs_share 8
Like newSVpvn_share(fR, but takes a literal string instead of
a string/length pair and omits the hash parameter.
        SVW     newSVpvs_share("literal string" s)

newSVrv 8
Creates a new SV for the existing RV, rv(fR, to point to.  If rv(fR is not an
RV then it will be upgraded to one.  If classname(fR is non null then the new
SV will be blessed in the specified package.  The new SV is returned and its
reference count is 1.  The reference count 1 is owned by rv(fR.
        SVW     newSVrv(SV Wconst rv,
                        const char Wconst classname)

newSVsv 8
Creates a new SV which is an exact duplicate of the original SV.
(Uses sv_setsv(fR.)
        SVW     newSVsv(SV Wconst old)

newSV_type 8
Creates a new SV, of the type specified.  The reference count for the new SV
is set to 1.
        SVW     newSV_type(const svtype type)

newSVuv 8
Creates a new SV and copies an unsigned integer into it.
The reference count for the SV is set to 1.
        SVW     newSVuv(const UV u)

sv_2bool 8
This macro is only used by sv_true()(fR or its macro equivalent, and only if
the latter's argument is neither SvPOK(fR, SvIOK(fR nor SvNOK(fR.
It calls sv_2bool_flags(fR with the SV_GMAGIC(fR flag.
        bool    sv_2bool(SV Wconst sv)

sv_2bool_flags 8
This function is only used by sv_true()(fR and friends,  and only if
the latter's argument is neither SvPOK(fR, SvIOK(fR nor SvNOK(fR.  If the flags
contain SV_GMAGIC(fR, then it does an mg_get()(fR first.
        bool    sv_2bool_flags(SV Wsv, I32 flags)

sv_2cv 8
Using various gambits, try to get a CV from an SV; in addition, try if
possible to set Wst and Wgvp to the stash and GV associated with it.
The flags in lref(fR are passed to gv_fetchsv(fR.
        CVW     sv_2cv(SVW sv, HV WWconst st, GV WWconst gvp,
                       const I32 lref)

sv_2io 8
Using various gambits, try to get an IO from an SV: the IO slot if its a
GV; or the recursive result if we're an RV; or the IO slot of the symbol
named after the PV if we're a string.

'Get' magic is ignored on the sv(fR passed in, but will be called on
SvRV(sv)(fR if sv(fR is an RV.
        IOW     sv_2io(SV Wconst sv)

sv_2iv_flags 8
Return the integer value of an SV, doing any necessary string
conversion.  If flags(fR has the SV_GMAGIC(fR bit set, does an mg_get()(fR first.
Normally used via the SvIV(sv)(fR and SvIVx(sv)(fR macros.
        IV      sv_2iv_flags(SV Wconst sv, const I32 flags)

sv_2mortal 8
Marks an existing SV as mortal.  The SV will be destroyed soon, either
by an explicit call to FREETMPS(fR, or by an implicit call at places such as
statement boundaries.  SvTEMP()(fR is turned on which means that the SV's
string buffer can be stolen if this SV is copied.  See also
"sv_newmortal" and "sv_mortalcopy".
        SVW     sv_2mortal(SV Wconst sv)

sv_2nv_flags 8
Return the num value of an SV, doing any necessary string or integer
conversion.  If flags(fR has the SV_GMAGIC(fR bit set, does an mg_get()(fR first.
Normally used via the SvNV(sv)(fR and SvNVx(sv)(fR macros.
        NV      sv_2nv_flags(SV Wconst sv, const I32 flags)

sv_2pvbyte 8
Return a pointer to the byte encoded representation of the SV, and set Wlp
to its length.  May cause the SV to be downgraded from UTF 8 as a
side effect.

Usually accessed via the SvPVbyte(fR macro.
        charW   sv_2pvbyte(SV Wsv, STRLEN Wconst lp)

sv_2pvutf8 8
Return a pointer to the UTF 8 encoded representation of the SV, and set Wlp
to its length.  May cause the SV to be upgraded to UTF 8 as a side effect.

Usually accessed via the SvPVutf8(fR macro.
        charW   sv_2pvutf8(SV Wsv, STRLEN Wconst lp)

sv_2pv_flags 8
Returns a pointer to the string value of an SV, and sets Wlp to its length.
If flags has the SV_GMAGIC(fR bit set, does an mg_get()(fR first.  Coerces sv(fR to a
string if necessary.  Normally invoked via the SvPV_flags(fR macro.
sv_2pv()(fR and sv_2pv_nomg(fR usually end up here too.
        charW   sv_2pv_flags(SV Wconst sv, STRLEN Wconst lp,
                             const I32 flags)

sv_2uv_flags 8
Return the unsigned integer value of an SV, doing any necessary string
conversion.  If flags(fR has the SV_GMAGIC(fR bit set, does an mg_get()(fR first.
Normally used via the SvUV(sv)(fR and SvUVx(sv)(fR macros.
        UV      sv_2uv_flags(SV Wconst sv, const I32 flags)

sv_backoff 8
Remove any string offset.  You should normally use the SvOOK_off(fR macro
wrapper instead.
        void    sv_backoff(SV Wconst sv)

sv_bless 8
Blesses an SV into a specified package.  The SV must be an RV.  The package
must be designated by its stash (see "gv_stashpv").  The reference count
of the SV is unaffected.
        SVW     sv_bless(SV Wconst sv, HV Wconst stash)

sv_catpv 8
Concatenates the NUL(fR terminated string onto the end of the string which is
in the SV.
If the SV has the UTF 8 status set, then the bytes appended should be
valid UTF 8.  Handles 'get' magic, but not 'set' magic.  See
"sv_catpv_mg".
        void    sv_catpv(SV Wconst sv, const charW ptr)

sv_catpvf 8
Processes its arguments like sv_catpvfn(fR, and appends the formatted
output to an SV.  As with sv_catpvfn(fR called with a non null C style
variable argument list, argument reordering is not supported.
If the appended data contains wide characters
(including, but not limited to, SVs with a UTF 8 PV formatted with %s,
and characters >255 formatted with %c), the original SV might get
upgraded to UTF 8.  Handles 'get' magic, but not 'set' magic.  See
"sv_catpvf_mg".  If the original SV was UTF 8, the pattern should be
valid UTF 8; if the original SV was bytes, the pattern should be too.
        void    sv_catpvf(SV Wconst sv, const char Wconst pat,
                          ...)

sv_catpvf_mg 8
Like sv_catpvf(fR, but also handles 'set' magic.
        void    sv_catpvf_mg(SV Wconst sv,
                             const char Wconst pat, ...)

sv_catpvn 8
Concatenates the string onto the end of the string which is in the SV.
len(fR indicates number of bytes to copy.  If the SV has the UTF 8
status set, then the bytes appended should be valid UTF 8.
Handles 'get' magic, but not 'set' magic.  See "sv_catpvn_mg".
        void    sv_catpvn(SV Wdsv, const char Wsstr, STRLEN len)

sv_catpvn_flags 8
Concatenates the string onto the end of the string which is in the SV.  The
len(fR indicates number of bytes to copy.

By default, the string appended is assumed to be valid UTF 8 if the SV has
the UTF 8 status set, and a string of bytes otherwise.  One can force the
appended string to be interpreted as UTF 8 by supplying the SV_CATUTF8(fR
flag, and as bytes by supplying the SV_CATBYTES(fR flag; the SV or the
string appended will be upgraded to UTF 8 if necessary.

If flags(fR has the SV_SMAGIC(fR bit set, will
mg_set(fR on dsv(fR afterwards if appropriate.
sv_catpvn(fR and sv_catpvn_nomg(fR are implemented
in terms of this function.
        void    sv_catpvn_flags(SV Wconst dstr,
                                const char Wsstr,
                                const STRLEN len,
                                const I32 flags)

sv_catpvs 8
Like sv_catpvn(fR, but takes a literal string instead of a
string/length pair.
        void    sv_catpvs(SVW sv, "literal string" s)

sv_catpvs_flags 8
Like sv_catpvn_flags(fR, but takes a literal string instead
of a string/length pair.
        void    sv_catpvs_flags(SVW sv, "literal string" s,
                                I32 flags)

sv_catpvs_mg 8
Like sv_catpvn_mg(fR, but takes a literal string instead of a
string/length pair.
        void    sv_catpvs_mg(SVW sv, "literal string" s)

sv_catpvs_nomg 8
Like sv_catpvn_nomg(fR, but takes a literal string instead of
a string/length pair.
        void    sv_catpvs_nomg(SVW sv, "literal string" s)

sv_catpv_flags 8
Concatenates the NUL(fR terminated string onto the end of the string which is
in the SV.
If the SV has the UTF 8 status set, then the bytes appended should
be valid UTF 8.  If flags(fR has the SV_SMAGIC(fR bit set, will mg_set(fR
on the modified SV if appropriate.
        void    sv_catpv_flags(SV Wdstr, const char Wsstr,
                               const I32 flags)

sv_catpv_mg 8
Like sv_catpv(fR, but also handles 'set' magic.
        void    sv_catpv_mg(SV Wconst sv, const char Wconst ptr)

sv_catsv 8
Concatenates the string from SV ssv(fR onto the end of the string in SV
dsv(fR.  If ssv(fR is null, does nothing; otherwise modifies only dsv(fR.
Handles 'get' magic on both SVs, but no 'set' magic.  See "sv_catsv_mg"
and "sv_catsv_nomg".
        void    sv_catsv(SV Wdstr, SV Wsstr)

sv_catsv_flags 8
Concatenates the string from SV ssv(fR onto the end of the string in SV
dsv(fR.  If ssv(fR is null, does nothing; otherwise modifies only dsv(fR.
If flags(fR has the SV_GMAGIC(fR bit set, will call mg_get(fR on both SVs if
appropriate.  If flags(fR has the SV_SMAGIC(fR bit set, mg_set(fR will be called on
the modified SV afterward, if appropriate.  sv_catsv(fR, sv_catsv_nomg(fR,
and sv_catsv_mg(fR are implemented in terms of this function.
        void    sv_catsv_flags(SV Wconst dsv, SV Wconst ssv,
                               const I32 flags)

sv_chop 8
Efficient removal of characters from the beginning of the string buffer.
SvPOK(sv)(fR, or at least SvPOKp(sv)(fR, must be true and ptr(fR must be a
pointer to somewhere inside the string buffer.  ptr(fR becomes the first
character of the adjusted string.  Uses the OOK(fR hack.  On return, only
SvPOK(sv)(fR and SvPOKp(sv)(fR among the OK(fR flags will be true.

Beware: after this function returns, ptr(fR and SvPVX_const(sv) may no longer
refer to the same chunk of data.

The unfortunate similarity of this function's name to that of Perl's chop(fR
operator is strictly coincidental.  This function works from the left;
chop(fR works from the right.
        void    sv_chop(SV Wconst sv, const char Wconst ptr)

sv_clear 8
Clear an SV: call any destructors, free up any memory used by the body,
and free the body itself.  The SV's head is not freed, although
its type is set to all 1's so that it won't inadvertently be assumed
to be live during global destruction etc.
This function should only be called when REFCNT(fR is zero.  Most of the time
you'll want to call sv_free()(fR (or its macro wrapper SvREFCNT_dec(fR)
instead.
        void    sv_clear(SV Wconst orig_sv)

sv_cmp 8
Compares the strings in two SVs.  Returns  1, 0, or 1 indicating whether the
string in sv1(fR is less than, equal to, or greater than the string in
sv2(fR.  Is UTF 8 and use bytes(fR aware, handles get magic, and will
coerce its args to strings if necessary.  See also "sv_cmp_locale".
        I32     sv_cmp(SV Wconst sv1, SV Wconst sv2)

sv_cmp_flags 8
Compares the strings in two SVs.  Returns  1, 0, or 1 indicating whether the
string in sv1(fR is less than, equal to, or greater than the string in
sv2(fR.  Is UTF 8 and use bytes(fR aware and will coerce its args to strings
if necessary.  If the flags has the SV_GMAGIC(fR bit set, it handles get magic.  See
also "sv_cmp_locale_flags".
        I32     sv_cmp_flags(SV Wconst sv1, SV Wconst sv2,
                             const U32 flags)

sv_cmp_locale 8
Compares the strings in two SVs in a locale aware manner.  Is UTF 8 and
use bytes(fR aware, handles get magic, and will coerce its args to strings
if necessary.  See also "sv_cmp".
        I32     sv_cmp_locale(SV Wconst sv1, SV Wconst sv2)

sv_cmp_locale_flags 8
Compares the strings in two SVs in a locale aware manner.  Is UTF 8 and
use bytes(fR aware and will coerce its args to strings if necessary.  If
the flags contain SV_GMAGIC(fR, it handles get magic.  See also
"sv_cmp_flags".
        I32     sv_cmp_locale_flags(SV Wconst sv1,
                                    SV Wconst sv2,
                                    const U32 flags)

sv_collxfrm 8
This calls sv_collxfrm_flags(fR with the SV_GMAGIC flag.  See
"sv_collxfrm_flags".
        charW   sv_collxfrm(SV Wconst sv, STRLEN Wconst nxp)

sv_collxfrm_flags 8
Add Collate Transform magic to an SV if it doesn't already have it.  If the
flags contain SV_GMAGIC(fR, it handles get magic.

Any scalar variable may carry PERL_MAGIC_collxfrm(fR magic that contains the
scalar data of the variable, but transformed to such a format that a normal
memory comparison can be used to compare the data according to the locale
settings.
        charW   sv_collxfrm_flags(SV Wconst sv,
                                  STRLEN Wconst nxp,
                                  I32 const flags)

sv_copypv 8
Copies a stringified representation of the source SV into the
destination SV.  Automatically performs any necessary mg_get(fR and
coercion of numeric values into strings.  Guaranteed to preserve
UTF8(fR flag even from overloaded objects.  Similar in nature to
sv_2pv[_flags](fR but operates directly on an SV instead of just the
string.  Mostly uses sv_2pv_flags(fR to do its work, except when that
would lose the UTF 8'ness of the PV.
        void    sv_copypv(SV Wconst dsv, SV Wconst ssv)

sv_copypv_flags 8
Implementation of sv_copypv(fR and sv_copypv_nomg(fR.  Calls get magic iff flags
has the SV_GMAGIC(fR bit set.
        void    sv_copypv_flags(SV Wconst dsv, SV Wconst ssv,
                                const I32 flags)

sv_copypv_nomg 8
Like sv_copypv(fR, but doesn't invoke get magic first.
        void    sv_copypv_nomg(SV Wconst dsv, SV Wconst ssv)

sv_dec 8
Auto decrement of the value in the SV, doing string to numeric conversion
if necessary.  Handles 'get' magic and operator overloading.
        void    sv_dec(SV Wconst sv)

sv_dec_nomg 8
Auto decrement of the value in the SV, doing string to numeric conversion
if necessary.  Handles operator overloading.  Skips handling 'get' magic.
        void    sv_dec_nomg(SV Wconst sv)

sv_eq 8
Returns a boolean indicating whether the strings in the two SVs are
identical.  Is UTF 8 and use bytes(fR aware, handles get magic, and will
coerce its args to strings if necessary.
        I32     sv_eq(SVW sv1, SVW sv2)

sv_eq_flags 8
Returns a boolean indicating whether the strings in the two SVs are
identical.  Is UTF 8 and use bytes(fR aware and coerces its args to strings
if necessary.  If the flags has the SV_GMAGIC(fR bit set, it handles get magic, too.
        I32     sv_eq_flags(SVW sv1, SVW sv2, const U32 flags)

sv_force_normal_flags 8
Undo various types of fakery on an SV, where fakery means
more than a string: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an xpvmg(fR; if we're a copy on write scalar, this is the on write time when
we do the copy, and is also used locally; if this is a
vstring, drop the vstring magic.  If SV_COW_DROP_PV(fR is set
then a copy on write scalar drops its PV buffer (if any) and becomes
SvPOK_off(fR rather than making a copy.  (Used where this
scalar is about to be set to some other value.)  In addition,
the flags(fR parameter gets passed to sv_unref_flags()(fR
when unreffing.  sv_force_normal(fR calls this function
with flags set to 0.

This function is expected to be used to signal to perl that this SV is
about to be written to, and any extra book keeping needs to be taken care
of.  Hence, it croaks on read only values.
        void    sv_force_normal_flags(SV Wconst sv,
                                      const U32 flags)

sv_free 8
Decrement an SV's reference count, and if it drops to zero, call
sv_clear(fR to invoke destructors and free up any memory used by
the body; finally, deallocating the SV's head itself.
Normally called via a wrapper macro SvREFCNT_dec(fR.
        void    sv_free(SV Wconst sv)

sv_gets 8
Get a line from the filehandle and store it into the SV, optionally
appending to the currently stored string.  If append(fR is not 0, the
line is appended to the SV instead of overwriting it.  append(fR should
be set to the byte offset that the appended string should start at
in the SV (typically, SvCUR(sv)(fR is a suitable choice).
        charW   sv_gets(SV Wconst sv, PerlIO Wconst fp,
                        I32 append)

sv_get_backrefs 8
NOTE: this function is experimental and may change or be
removed without notice.

If sv(fR is the target of a weak reference then it returns the back
references structure associated with the sv; otherwise return NULL(fR.

When returning a non null result the type of the return is relevant. If it
is an AV then the elements of the AV are the weak reference RVs which
point at this item. If it is any other type then the item itself is the
weak reference.

See also Perl_sv_add_backref()(fR, Perl_sv_del_backref()(fR,
Perl_sv_kill_backrefs()(fR
        SVW     sv_get_backrefs(SV Wconst sv)

sv_grow 8
Expands the character buffer in the SV.  If necessary, uses sv_unref(fR and
upgrades the SV to SVt_PV(fR.  Returns a pointer to the character buffer.
Use the SvGROW(fR wrapper instead.
        charW   sv_grow(SV Wconst sv, STRLEN newlen)

sv_inc 8
Auto increment of the value in the SV, doing string to numeric conversion
if necessary.  Handles 'get' magic and operator overloading.
        void    sv_inc(SV Wconst sv)

sv_inc_nomg 8
Auto increment of the value in the SV, doing string to numeric conversion
if necessary.  Handles operator overloading.  Skips handling 'get' magic.
        void    sv_inc_nomg(SV Wconst sv)

sv_insert 8
Inserts a string at the specified offset/length within the SV.  Similar to
the Perl substr()(fR function.  Handles get magic.
        void    sv_insert(SV Wconst bigstr, const STRLEN offset,
                          const STRLEN len,
                          const char Wconst little,
                          const STRLEN littlelen)

sv_insert_flags 8
Same as sv_insert(fR, but the extra flags(fR are passed to the
SvPV_force_flags(fR that applies to bigstr(fR.
        void    sv_insert_flags(SV Wconst bigstr,
                                const STRLEN offset,
                                const STRLEN len,
                                const char Wlittle,
                                const STRLEN littlelen,
                                const U32 flags)

sv_isa 8
Returns a boolean indicating whether the SV is blessed into the specified
class.  This does not check for subtypes; use sv_derived_from(fR to verify
an inheritance relationship.
        int     sv_isa(SVW sv, const char Wconst name)

sv_isobject 8
Returns a boolean indicating whether the SV is an RV pointing to a blessed
object.  If the SV is not an RV, or if the object is not blessed, then this
will return false.
        int     sv_isobject(SVW sv)

sv_len 8
Returns the length of the string in the SV.  Handles magic and type
coercion and sets the UTF8 flag appropriately.  See also "SvCUR", which
gives raw access to the xpv_cur(fR slot.
        STRLEN  sv_len(SV Wconst sv)

sv_len_utf8 8
Returns the number of characters in the string in an SV, counting wide
UTF 8 bytes as a single character.  Handles magic and type coercion.
        STRLEN  sv_len_utf8(SV Wconst sv)

sv_magic 8
Adds magic to an SV.  First upgrades sv(fR to type SVt_PVMG(fR if
necessary, then adds a new magic item of type how(fR to the head of the
magic list.

See "sv_magicext" (which sv_magic(fR now calls) for a description of the
handling of the name(fR and namlen(fR arguments.

You need to use sv_magicext(fR to add magic to SvREADONLY(fR SVs and also
to add more than one instance of the same how(fR.
        void    sv_magic(SV Wconst sv, SV Wconst obj,
                         const int how, const char Wconst name,
                         const I32 namlen)

sv_magicext 8
Adds magic to an SV, upgrading it if necessary.  Applies the
supplied vtable(fR and returns a pointer to the magic added.

Note that sv_magicext(fR will allow things that sv_magic(fR will not.
In particular, you can add magic to SvREADONLY(fR SVs, and add more than
one instance of the same how(fR.

If namlen(fR is greater than zero then a savepvn(fR copy of name(fR is
stored, if namlen(fR is zero then name(fR is stored as is and   as another
special case   if (name && namlen == HEf_SVKEY)(fR then name(fR is assumed
to contain an SVW and is stored as is with its REFCNT(fR incremented.

(This is now used as a subroutine by sv_magic(fR.)
        MAGIC W sv_magicext(SV Wconst sv, SV Wconst obj,
                            const int how,
                            const MGVTBL Wconst vtbl,
                            const char Wconst name,
                            const I32 namlen)

sv_mortalcopy 8
Creates a new SV which is a copy of the original SV (using sv_setsv(fR).
The new SV is marked as mortal.  It will be destroyed soon, either by an
explicit call to FREETMPS(fR, or by an implicit call at places such as
statement boundaries.  See also "sv_newmortal" and "sv_2mortal".
        SVW     sv_mortalcopy(SV Wconst oldsv)

sv_newmortal 8
Creates a new null SV which is mortal.  The reference count of the SV is
set to 1.  It will be destroyed soon, either by an explicit call to
FREETMPS(fR, or by an implicit call at places such as statement boundaries.
See also "sv_mortalcopy" and "sv_2mortal".
        SVW     sv_newmortal()

sv_newref 8
Increment an SV's reference count.  Use the SvREFCNT_inc()(fR wrapper
instead.
        SVW     sv_newref(SV Wconst sv)

sv_pos_b2u 8
Converts the value pointed to by offsetp(fR from a count of bytes from the
start of the string, to a count of the equivalent number of UTF 8 chars.
Handles magic and type coercion.

Use sv_pos_b2u_flags(fR in preference, which correctly handles strings
longer than 2Gb.
        void    sv_pos_b2u(SV Wconst sv, I32 Wconst offsetp)

sv_pos_b2u_flags 8
Converts offset(fR from a count of bytes from the start of the string, to
a count of the equivalent number of UTF 8 chars.  Handles type coercion.
flags(fR is passed to SvPV_flags(fR, and usually should be
SV_GMAGIC|SV_CONST_RETURN(fR to handle magic.
        STRLEN  sv_pos_b2u_flags(SV Wconst sv,
                                 STRLEN const offset, U32 flags)

sv_pos_u2b 8
Converts the value pointed to by offsetp(fR from a count of UTF 8 chars from
the start of the string, to a count of the equivalent number of bytes; if
lenp(fR is non zero, it does the same to lenp(fR, but this time starting from
the offset, rather than from the start of the string.  Handles magic and
type coercion.

Use sv_pos_u2b_flags(fR in preference, which correctly handles strings longer
than 2Gb.
        void    sv_pos_u2b(SV Wconst sv, I32 Wconst offsetp,
                           I32 Wconst lenp)

sv_pos_u2b_flags 8
Converts the offset from a count of UTF 8 chars from
the start of the string, to a count of the equivalent number of bytes; if
lenp(fR is non zero, it does the same to lenp(fR, but this time starting from
offset(fR, rather than from the start
of the string.  Handles type coercion.
flags(fR is passed to SvPV_flags(fR, and usually should be
SV_GMAGIC|SV_CONST_RETURN(fR to handle magic.
        STRLEN  sv_pos_u2b_flags(SV Wconst sv, STRLEN uoffset,
                                 STRLEN Wconst lenp, U32 flags)

sv_pvbyten_force 8
The backend for the SvPVbytex_force(fR macro.  Always use the macro
instead.
        charW   sv_pvbyten_force(SV Wconst sv, STRLEN Wconst lp)

sv_pvn_force 8
Get a sensible string out of the SV somehow.
A private implementation of the SvPV_force(fR macro for compilers which
can't cope with complex macro expressions.  Always use the macro instead.
        charW   sv_pvn_force(SVW sv, STRLENW lp)

sv_pvn_force_flags 8
Get a sensible string out of the SV somehow.
If flags(fR has the SV_GMAGIC(fR bit set, will mg_get(fR on sv(fR if
appropriate, else not.  sv_pvn_force(fR and sv_pvn_force_nomg(fR are
implemented in terms of this function.
You normally want to use the various wrapper macros instead: see
"SvPV_force" and "SvPV_force_nomg".
        charW   sv_pvn_force_flags(SV Wconst sv,
                                   STRLEN Wconst lp,
                                   const I32 flags)

sv_pvutf8n_force 8
The backend for the SvPVutf8x_force(fR macro.  Always use the macro
instead.
        charW   sv_pvutf8n_force(SV Wconst sv, STRLEN Wconst lp)

sv_ref 8
Returns a SV describing what the SV passed in is a reference to.

dst can be a SV to be set to the description or NULL, in which case a
mortal SV is returned.

If ob is true and the SV is blessed, the description is the class
name, otherwise it is the type of the SV, SCALAR, ARRAY(s0 etc.
        SVW     sv_ref(SV Wdst, const SV Wconst sv,
                       const int ob)

sv_reftype 8
Returns a string describing what the SV is a reference to.

If ob is true and the SV is blessed, the string is the class name,
otherwise it is the type of the SV, SCALAR, ARRAY(s0 etc.
        const charW sv_reftype(const SV Wconst sv, const int ob)

sv_replace 8
Make the first argument a copy of the second, then delete the original.
The target SV physically takes over ownership of the body of the source SV
and inherits its flags; however, the target keeps any magic it owns,
and any magic in the source is discarded.
Note that this is a rather specialist SV copying operation; most of the
time you'll want to use sv_setsv(fR or one of its many macro front ends.
        void    sv_replace(SV Wconst sv, SV Wconst nsv)

sv_reset 8
Underlying implementation for the reset(fR Perl function.
Note that the perl level function is vaguely deprecated.
        void    sv_reset(const charW s, HV Wconst stash)

sv_rvunweaken 8
Unweaken a reference: Clear the SvWEAKREF(fR flag on this RV; remove
the backreference to this RV from the array of backreferences
associated with the target SV, increment the refcount of the target.
Silently ignores undef(fR and warns on non weak references.
        SVW     sv_rvunweaken(SV Wconst sv)

sv_rvweaken 8
Weaken a reference: set the SvWEAKREF(fR flag on this RV; give the
referred to SV PERL_MAGIC_backref(fR magic if it hasn't already; and
push a back reference to this RV onto the array of backreferences
associated with that magic.  If the RV is magical, set magic will be
called after the RV is cleared.  Silently ignores undef(fR and warns
on already weak references.
        SVW     sv_rvweaken(SV Wconst sv)

sv_setiv 8
Copies an integer into the given SV, upgrading first if necessary.
Does not handle 'set' magic.  See also "sv_setiv_mg".
        void    sv_setiv(SV Wconst sv, const IV num)

sv_setiv_mg 8
Like sv_setiv(fR, but also handles 'set' magic.
        void    sv_setiv_mg(SV Wconst sv, const IV i)

sv_setnv 8
Copies a double into the given SV, upgrading first if necessary.
Does not handle 'set' magic.  See also "sv_setnv_mg".
        void    sv_setnv(SV Wconst sv, const NV num)

sv_setnv_mg 8
Like sv_setnv(fR, but also handles 'set' magic.
        void    sv_setnv_mg(SV Wconst sv, const NV num)

sv_setpv 8
Copies a string into an SV.  The string must be terminated with a NUL(fR
character, and not contain embeded NUL(fR's.
Does not handle 'set' magic.  See "sv_setpv_mg".
        void    sv_setpv(SV Wconst sv, const char Wconst ptr)

sv_setpvf 8
Works like sv_catpvf(fR but copies the text into the SV instead of
appending it.  Does not handle 'set' magic.  See "sv_setpvf_mg".
        void    sv_setpvf(SV Wconst sv, const char Wconst pat,
                          ...)

sv_setpvf_mg 8
Like sv_setpvf(fR, but also handles 'set' magic.
        void    sv_setpvf_mg(SV Wconst sv,
                             const char Wconst pat, ...)

sv_setpviv 8
Copies an integer into the given SV, also updating its string value.
Does not handle 'set' magic.  See "sv_setpviv_mg".
        void    sv_setpviv(SV Wconst sv, const IV num)

sv_setpviv_mg 8
Like sv_setpviv(fR, but also handles 'set' magic.
        void    sv_setpviv_mg(SV Wconst sv, const IV iv)

sv_setpvn 8
Copies a string (possibly containing embedded NUL(fR characters) into an SV.
The len(fR parameter indicates the number of
bytes to be copied.  If the ptr(fR argument is NULL the SV will become
undefined.  Does not handle 'set' magic.  See "sv_setpvn_mg".
        void    sv_setpvn(SV Wconst sv, const char Wconst ptr,
                          const STRLEN len)

sv_setpvn_mg 8
Like sv_setpvn(fR, but also handles 'set' magic.
        void    sv_setpvn_mg(SV Wconst sv,
                             const char Wconst ptr,
                             const STRLEN len)

sv_setpvs 8
Like sv_setpvn(fR, but takes a literal string instead of a
string/length pair.
        void    sv_setpvs(SVW sv, "literal string" s)

sv_setpvs_mg 8
Like sv_setpvn_mg(fR, but takes a literal string instead of a
string/length pair.
        void    sv_setpvs_mg(SVW sv, "literal string" s)

sv_setpv_bufsize 8
Sets the SV to be a string of cur bytes length, with at least
len bytes available. Ensures that there is a null byte at SvEND.
Returns a char W pointer to the SvPV buffer.
        char  W sv_setpv_bufsize(SV Wconst sv, const STRLEN cur,
                                 const STRLEN len)

sv_setpv_mg 8
Like sv_setpv(fR, but also handles 'set' magic.
        void    sv_setpv_mg(SV Wconst sv, const char Wconst ptr)

sv_setref_iv 8
Copies an integer into a new SV, optionally blessing the SV.  The rv(fR
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The classname(fR argument indicates the package for the
blessing.  Set classname(fR to NULL(fR to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.
        SVW     sv_setref_iv(SV Wconst rv,
                             const char Wconst classname,
                             const IV iv)

sv_setref_nv 8
Copies a double into a new SV, optionally blessing the SV.  The rv(fR
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The classname(fR argument indicates the package for the
blessing.  Set classname(fR to NULL(fR to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.
        SVW     sv_setref_nv(SV Wconst rv,
                             const char Wconst classname,
                             const NV nv)

sv_setref_pv 8
Copies a pointer into a new SV, optionally blessing the SV.  The rv(fR
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  If the pv(fR argument is NULL(fR, then PL_sv_undef(fR will be placed
into the SV.  The classname(fR argument indicates the package for the
blessing.  Set classname(fR to NULL(fR to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

Do not use with other Perl types such as HV, AV, SV, CV, because those
objects will become corrupted by the pointer copy process.

Note that sv_setref_pvn(fR copies the string while this copies the pointer.
        SVW     sv_setref_pv(SV Wconst rv,
                             const char Wconst classname,
                             void Wconst pv)

sv_setref_pvn 8
Copies a string into a new SV, optionally blessing the SV.  The length of the
string must be specified with n(fR.  The rv(fR argument will be upgraded to
an RV.  That RV will be modified to point to the new SV.  The classname(fR
argument indicates the package for the blessing.  Set classname(fR to
NULL(fR to avoid the blessing.  The new SV will have a reference count
of 1, and the RV will be returned.

Note that sv_setref_pv(fR copies the pointer while this copies the string.
        SVW     sv_setref_pvn(SV Wconst rv,
                              const char Wconst classname,
                              const char Wconst pv,
                              const STRLEN n)

sv_setref_pvs 8
Like sv_setref_pvn(fR, but takes a literal string instead of
a string/length pair.
        SV W    sv_setref_pvs("literal string" s)

sv_setref_uv 8
Copies an unsigned integer into a new SV, optionally blessing the SV.  The rv(fR
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The classname(fR argument indicates the package for the
blessing.  Set classname(fR to NULL(fR to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.
        SVW     sv_setref_uv(SV Wconst rv,
                             const char Wconst classname,
                             const UV uv)

sv_setsv 8
Copies the contents of the source SV ssv(fR into the destination SV
dsv(fR.  The source SV may be destroyed if it is mortal, so don't use this
function if the source SV needs to be reused.  Does not handle 'set' magic on
destination SV.  Calls 'get' magic on source SV.  Loosely speaking, it
performs a copy by value, obliterating any previous content of the
destination.

You probably want to use one of the assortment of wrappers, such as
SvSetSV(fR, SvSetSV_nosteal(fR, SvSetMagicSV(fR and
SvSetMagicSV_nosteal(fR.
        void    sv_setsv(SV Wdstr, SV Wsstr)

sv_setsv_flags 8
Copies the contents of the source SV ssv(fR into the destination SV
dsv(fR.  The source SV may be destroyed if it is mortal, so don't use this
function if the source SV needs to be reused.  Does not handle 'set' magic.
Loosely speaking, it performs a copy by value, obliterating any previous
content of the destination.
If the flags(fR parameter has the SV_GMAGIC(fR bit set, will mg_get(fR on
ssv(fR if appropriate, else not.  If the flags(fR
parameter has the SV_NOSTEAL(fR bit set then the
buffers of temps will not be stolen.  sv_setsv(fR
and sv_setsv_nomg(fR are implemented in terms of this function.

You probably want to use one of the assortment of wrappers, such as
SvSetSV(fR, SvSetSV_nosteal(fR, SvSetMagicSV(fR and
SvSetMagicSV_nosteal(fR.

This is the primary function for copying scalars, and most other
copy ish functions and macros use this underneath.
        void    sv_setsv_flags(SV Wdstr, SV Wsstr,
                               const I32 flags)

sv_setsv_mg 8
Like sv_setsv(fR, but also handles 'set' magic.
        void    sv_setsv_mg(SV Wconst dstr, SV Wconst sstr)

sv_setuv 8
Copies an unsigned integer into the given SV, upgrading first if necessary.
Does not handle 'set' magic.  See also "sv_setuv_mg".
        void    sv_setuv(SV Wconst sv, const UV num)

sv_setuv_mg 8
Like sv_setuv(fR, but also handles 'set' magic.
        void    sv_setuv_mg(SV Wconst sv, const UV u)

sv_set_undef 8
Equivalent to sv_setsv(sv, &PL_sv_undef)(fR, but more efficient.
Doesn't handle set magic.

The perl equivalent is $sv = undef;(fR. Note that it doesn't free any string
buffer, unlike undef $sv(fR.

Introduced in perl 5.25.12.
        void    sv_set_undef(SV Wsv)

sv_tainted 8
Test an SV for taintedness.  Use SvTAINTED(fR instead.
        bool    sv_tainted(SV Wconst sv)

sv_true 8
Returns true if the SV has a true value by Perl's rules.
Use the SvTRUE(fR macro instead, which may call sv_true()(fR or may
instead use an in line version.
        I32     sv_true(SV Wconst sv)

sv_unmagic 8
Removes all magic of type type(fR from an SV.
        int     sv_unmagic(SV Wconst sv, const int type)

sv_unmagicext 8
Removes all magic of type type(fR with the specified vtbl(fR from an SV.
        int     sv_unmagicext(SV Wconst sv, const int type,
                              MGVTBL Wvtbl)

sv_unref_flags 8
Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of newSVrv(fR.  The cflags(fR argument can contain
SV_IMMEDIATE_UNREF(fR to force the reference count to be decremented
(otherwise the decrementing is conditional on the reference count being
different from one or the reference being a readonly SV).
See "SvROK_off".
        void    sv_unref_flags(SV Wconst ref, const U32 flags)

sv_untaint 8
Untaint an SV.  Use SvTAINTED_off(fR instead.
        void    sv_untaint(SV Wconst sv)

sv_upgrade 8
Upgrade an SV to a more complex form.  Generally adds a new body type to the
SV, then copies across as much information as possible from the old body.
It croaks if the SV is already in a more complex form than requested.  You
generally want to use the SvUPGRADE(fR macro wrapper, which checks the type
before calling sv_upgrade(fR, and hence does not croak.  See also
"svtype".
        void    sv_upgrade(SV Wconst sv, svtype new_type)

sv_usepvn_flags 8
Tells an SV to use ptr(fR to find its string value.  Normally the
string is stored inside the SV, but sv_usepvn allows the SV to use an
outside string.  ptr(fR should point to memory that was allocated
by Newx(fR.  It must be
the start of a Newx(fR ed block of memory, and not a pointer to the
middle of it (beware of OOK(fR and copy on write),
and not be from a non Newx(fR memory allocator like malloc(fR.  The
string length, len(fR, must be supplied.  By default this function
will Renew(fR (i.e. realloc, move) the memory pointed to by ptr(fR,
so that pointer should not be freed or used by the programmer after
giving it to sv_usepvn(fR, and neither should any pointers from behind
that pointer (e.g. ptr + 1) be used.

If flags & SV_SMAGIC(fR is true, will call SvSETMAGIC(fR.  If
flags & SV_HAS_TRAILING_NUL(fR is true, then ptr[len](fR must be NUL(fR,
and the realloc
will be skipped (i.e. the buffer is actually at least 1 byte longer than
len(fR, and already meets the requirements for storing in SvPVX(fR).
        void    sv_usepvn_flags(SV Wconst sv, charW ptr,
                                const STRLEN len,
                                const U32 flags)

sv_utf8_decode 8
NOTE: this function is experimental and may change or be
removed without notice.

If the PV of the SV is an octet sequence in Perl's extended UTF 8
and contains a multiple byte character, the SvUTF8(fR flag is turned on
so that it looks like a character.  If the PV contains only single byte
characters, the SvUTF8(fR flag stays off.
Scans PV for validity and returns FALSE if the PV is invalid UTF 8.
        bool    sv_utf8_decode(SV Wconst sv)

sv_utf8_downgrade 8
NOTE: this function is experimental and may change or be
removed without notice.

Attempts to convert the PV of an SV from characters to bytes.
If the PV contains a character that cannot fit
in a byte, this conversion will fail;
in this case, either returns false or, if fail_ok(fR is not
true, croaks.

This is not a general purpose Unicode to byte encoding interface:
use the Encode(fR extension for that.
        bool    sv_utf8_downgrade(SV Wconst sv,
                                  const bool fail_ok)

sv_utf8_encode 8
Converts the PV of an SV to UTF 8, but then turns the SvUTF8(fR
flag off so that it looks like octets again.
        void    sv_utf8_encode(SV Wconst sv)

sv_utf8_upgrade 8
Converts the PV of an SV to its UTF 8 encoded form.
Forces the SV to string form if it is not already.
Will mg_get(fR on sv(fR if appropriate.
Always sets the SvUTF8(fR flag to avoid future validity checks even
if the whole string is the same in UTF 8 as not.
Returns the number of bytes in the converted string

This is not a general purpose byte encoding to Unicode interface:
use the Encode extension for that.
        STRLEN  sv_utf8_upgrade(SV Wsv)

sv_utf8_upgrade_flags 8
Converts the PV of an SV to its UTF 8 encoded form.
Forces the SV to string form if it is not already.
Always sets the SvUTF8 flag to avoid future validity checks even
if all the bytes are invariant in UTF 8.
If flags(fR has SV_GMAGIC(fR bit set,
will mg_get(fR on sv(fR if appropriate, else not.

The SV_FORCE_UTF8_UPGRADE(fR flag is now ignored.

Returns the number of bytes in the converted string.

This is not a general purpose byte encoding to Unicode interface:
use the Encode extension for that.
        STRLEN  sv_utf8_upgrade_flags(SV Wconst sv,
                                      const I32 flags)

sv_utf8_upgrade_flags_grow 8
Like sv_utf8_upgrade_flags(fR, but has an additional parameter extra(fR, which is
the number of unused bytes the string of sv(fR is guaranteed to have free after
it upon return.  This allows the caller to reserve extra space that it intends
to fill, to avoid extra grows.

sv_utf8_upgrade(fR, sv_utf8_upgrade_nomg(fR, and sv_utf8_upgrade_flags(fR
are implemented in terms of this function.

Returns the number of bytes in the converted string (not including the spares).
        STRLEN  sv_utf8_upgrade_flags_grow(SV Wconst sv,
                                           const I32 flags,
                                           STRLEN extra)

sv_utf8_upgrade_nomg 8
Like sv_utf8_upgrade(fR, but doesn't do magic on sv(fR.
        STRLEN  sv_utf8_upgrade_nomg(SV Wsv)

sv_vcatpvf 8
Processes its arguments like sv_catpvfn(fR called with a non null C style
variable argument list, and appends the formatted output
to an SV.  Does not handle 'set' magic.  See "sv_vcatpvf_mg".

Usually used via its frontend sv_catpvf(fR.
        void    sv_vcatpvf(SV Wconst sv, const char Wconst pat,
                           va_list Wconst args)

sv_vcatpvfn 8
        void    sv_vcatpvfn(SV Wconst sv, const char Wconst pat,
                            const STRLEN patlen,
                            va_list Wconst args,
                            SV WWconst svargs,
                            const Size_t sv_count,
                            bool Wconst maybe_tainted)

sv_vcatpvfn_flags 8
Processes its arguments like vsprintf(fR and appends the formatted output
to an SV.  Uses an array of SVs if the C style variable argument list is
missing (NULL(fR). Argument reordering (using format specifiers like %2$d(fR
or %W2$d(fR) is supported only when using an array of SVs; using a C style
va_list(fR argument list with a format string that uses argument reordering
will yield an exception.

When running with taint checks enabled, indicates via
maybe_tainted(fR if results are untrustworthy (often due to the use of
locales).

If called as sv_vcatpvfn(fR or flags has the SV_GMAGIC(fR bit set, calls get magic.

It assumes that pat has the same utf8 ness as sv.  It's the caller's
responsibility to ensure that this is so.

Usually used via one of its frontends sv_vcatpvf(fR and sv_vcatpvf_mg(fR.
        void    sv_vcatpvfn_flags(SV Wconst sv,
                                  const char Wconst pat,
                                  const STRLEN patlen,
                                  va_list Wconst args,
                                  SV WWconst svargs,
                                  const Size_t sv_count,
                                  bool Wconst maybe_tainted,
                                  const U32 flags)

sv_vcatpvf_mg 8
Like sv_vcatpvf(fR, but also handles 'set' magic.

Usually used via its frontend sv_catpvf_mg(fR.
        void    sv_vcatpvf_mg(SV Wconst sv,
                              const char Wconst pat,
                              va_list Wconst args)

sv_vsetpvf 8
Works like sv_vcatpvf(fR but copies the text into the SV instead of
appending it.  Does not handle 'set' magic.  See "sv_vsetpvf_mg".

Usually used via its frontend sv_setpvf(fR.
        void    sv_vsetpvf(SV Wconst sv, const char Wconst pat,
                           va_list Wconst args)

sv_vsetpvfn 8
Works like sv_vcatpvfn(fR but copies the text into the SV instead of
appending it.

Usually used via one of its frontends sv_vsetpvf(fR and sv_vsetpvf_mg(fR.
        void    sv_vsetpvfn(SV Wconst sv, const char Wconst pat,
                            const STRLEN patlen,
                            va_list Wconst args,
                            SV WWconst svargs,
                            const Size_t sv_count,
                            bool Wconst maybe_tainted)

sv_vsetpvf_mg 8
Like sv_vsetpvf(fR, but also handles 'set' magic.

Usually used via its frontend sv_setpvf_mg(fR.
        void    sv_vsetpvf_mg(SV Wconst sv,
                              const char Wconst pat,
                              va_list Wconst args)

SV Flags

SVt_INVLIST 8
Type flag for scalars.  See svtype.
SVt_IV 8
Type flag for scalars.  See svtype.
SVt_NULL 8
Type flag for scalars.  See svtype.
SVt_NV 8
Type flag for scalars.  See svtype.
SVt_PV 8
Type flag for scalars.  See svtype.
SVt_PVAV 8
Type flag for arrays.  See svtype.
SVt_PVCV 8
Type flag for subroutines.  See svtype.
SVt_PVFM 8
Type flag for formats.  See svtype.
SVt_PVGV 8
Type flag for typeglobs.  See svtype.
SVt_PVHV 8
Type flag for hashes.  See svtype.
SVt_PVIO 8
Type flag for I/O objects.  See svtype.
SVt_PVIV 8
Type flag for scalars.  See svtype.
SVt_PVLV 8
Type flag for scalars.  See svtype.
SVt_PVMG 8
Type flag for scalars.  See svtype.
SVt_PVNV 8
Type flag for scalars.  See svtype.
SVt_REGEXP 8
Type flag for regular expressions.  See svtype.
svtype 8
An enum of flags for Perl types.  These are found in the file sv.h
in the svtype(fR enum.  Test these flags with the SvTYPE(fR macro.

The types are:
    SVt_NULL
    SVt_IV
    SVt_NV
    SVt_RV
    SVt_PV
    SVt_PVIV
    SVt_PVNV
    SVt_PVMG
    SVt_INVLIST
    SVt_REGEXP
    SVt_PVGV
    SVt_PVLV
    SVt_PVAV
    SVt_PVHV
    SVt_PVCV
    SVt_PVFM
    SVt_PVIO
These are most easily explained from the bottom up.

SVt_PVIO(fR is for I/O objects, SVt_PVFM(fR for formats, SVt_PVCV(fR for
subroutines, SVt_PVHV(fR for hashes and SVt_PVAV(fR for arrays.

All the others are scalar types, that is, things that can be bound to a
$(fR variable.  For these, the internal types are mostly orthogonal to
types in the Perl language.

Hence, checking SvTYPE(sv) < SVt_PVAV(fR is the best way to see whether
something is a scalar.

SVt_PVGV(fR represents a typeglob.  If !SvFAKE(sv)(fR, then it is a real,
incoercible typeglob.  If SvFAKE(sv)(fR, then it is a scalar to which a
typeglob has been assigned.  Assigning to it again will stop it from being
a typeglob.  SVt_PVLV(fR represents a scalar that delegates to another scalar
behind the scenes.  It is used, e.g., for the return value of substr(fR and
for tied hash and array elements.  It can hold any scalar value, including
a typeglob.  SVt_REGEXP(fR is for regular
expressions.  SVt_INVLIST(fR is for Perl
core internal use only.

SVt_PVMG(fR represents a normal scalar (not a typeglob, regular expression,
or delegate).  Since most scalars do not need all the internal fields of a
PVMG, we save memory by allocating smaller structs when possible.  All the
other types are just simpler forms of SVt_PVMG(fR, with fewer internal fields.
SVt_NULL(fR can only hold undef.  SVt_IV(fR can hold undef, an integer, or a
reference.  (SVt_RV(fR is an alias for SVt_IV(fR, which exists for backward
compatibility.)  SVt_NV(fR can hold any of those or a double.  SVt_PV(fR can only
hold undef(fR or a string.  SVt_PVIV(fR is a superset of SVt_PV(fR and SVt_IV(fR.
SVt_PVNV(fR is similar.  SVt_PVMG(fR can hold anything SVt_PVNV(fR can hold, but it
can, but does not have to, be blessed or magical.
SV Manipulation Functions

boolSV 8
Returns a true SV if b(fR is a true value, or a false SV if b(fR is 0.

See also "PL_sv_yes" and "PL_sv_no".
        SV W    boolSV(bool b)

croak_xs_usage 8
A specialised variant of croak()(fR for emitting the usage message for xsubs
    croak_xs_usage(cv, "eee_yow");
works out the package name and subroutine name from cv(fR, and then calls
croak()(fR.  Hence if cv(fR is &ouch::awk, it would call croak(fR as:
 Perl_croak(aTHX_ "Usage: %" SVf "::%" SVf "(%s)", "ouch" "awk",
                                                     "eee_yow");

        void    croak_xs_usage(const CV Wconst cv,
                               const char Wconst params)

get_sv 8
Returns the SV of the specified Perl scalar.  flags(fR are passed to
gv_fetchpv(fR.  If GV_ADD(fR is set and the
Perl variable does not exist then it will be created.  If flags(fR is zero
and the variable does not exist then NULL is returned.

NOTE: the perl_ form of this function is deprecated.
        SVW     get_sv(const char Wname, I32 flags)

newRV_inc 8
Creates an RV wrapper for an SV.  The reference count for the original SV is
incremented.
        SVW     newRV_inc(SVW sv)

newSVpadname 8
NOTE: this function is experimental and may change or be
removed without notice.

Creates a new SV containing the pad name.
        SVW     newSVpadname(PADNAME Wpn)

newSVpvn_utf8 8
Creates a new SV and copies a string (which may contain NUL(fR ((e0(fR)
characters) into it.  If utf8(fR is true, calls
SvUTF8_on(fR on the new SV.  Implemented as a wrapper around newSVpvn_flags(fR.
        SVW     newSVpvn_utf8(const charW s, STRLEN len,
                              U32 utf8)

sv_catpvn_nomg 8
Like sv_catpvn(fR but doesn't process magic.
        void    sv_catpvn_nomg(SVW sv, const charW ptr,
                               STRLEN len)

sv_catpv_nomg 8
Like sv_catpv(fR but doesn't process magic.
        void    sv_catpv_nomg(SVW sv, const charW ptr)

sv_catsv_nomg 8
Like sv_catsv(fR but doesn't process magic.
        void    sv_catsv_nomg(SVW dsv, SVW ssv)

SvCUR 8
Returns the length of the string which is in the SV.  See "SvLEN".
        STRLEN  SvCUR(SVW sv)

SvCUR_set 8
Set the current length of the string which is in the SV.  See "SvCUR"
and SvIV_set(fR>.
        void    SvCUR_set(SVW sv, STRLEN len)

sv_derived_from 8
Exactly like sv_derived_from_pv, but doesn't take a flags(fR parameter.
        bool    sv_derived_from(SVW sv, const char Wconst name)

sv_derived_from_pv 8
Exactly like sv_derived_from_pvn, but takes a nul terminated string 
instead of a string/length pair.
        bool    sv_derived_from_pv(SVW sv,
                                   const char Wconst name,
                                   U32 flags)

sv_derived_from_pvn 8
Returns a boolean indicating whether the SV is derived from the specified class
at the C level.  To check derivation at the Perl level, call isa()(fR as a
normal Perl method.

Currently, the only significant value for flags(fR is SVf_UTF8.
        bool    sv_derived_from_pvn(SVW sv,
                                    const char Wconst name,
                                    const STRLEN len, U32 flags)

sv_derived_from_sv 8
Exactly like sv_derived_from_pvn, but takes the name string in the form
of an SV instead of a string/length pair.
        bool    sv_derived_from_sv(SVW sv, SV Wnamesv,
                                   U32 flags)

sv_does 8
Like sv_does_pv, but doesn't take a flags(fR parameter.
        bool    sv_does(SVW sv, const char Wconst name)

sv_does_pv 8
Like sv_does_sv, but takes a nul terminated string instead of an SV.
        bool    sv_does_pv(SVW sv, const char Wconst name,
                           U32 flags)

sv_does_pvn 8
Like sv_does_sv, but takes a string/length pair instead of an SV.
        bool    sv_does_pvn(SVW sv, const char Wconst name,
                            const STRLEN len, U32 flags)

sv_does_sv 8
Returns a boolean indicating whether the SV performs a specific, named role.
The SV can be a Perl object or the name of a Perl class.
        bool    sv_does_sv(SVW sv, SVW namesv, U32 flags)

SvEND 8
Returns a pointer to the spot just after the last character in
the string which is in the SV, where there is usually a trailing
NUL(fR character (even though Perl scalars do not strictly require it).
See "SvCUR".  Access the character as W(SvEND(sv))(fR.

Warning: If SvCUR(fR is equal to SvLEN(fR, then SvEND(fR points to
unallocated memory.
        charW   SvEND(SVW sv)

SvGAMAGIC 8
Returns true if the SV has get magic or
overloading.  If either is true then
the scalar is active data, and has the potential to return a new value every
time it is accessed.  Hence you must be careful to
only read it once per user logical operation and work
with that returned value.  If neither is true then
the scalar's value cannot change unless written to.
        U32     SvGAMAGIC(SVW sv)

SvGROW 8
Expands the character buffer in the SV so that it has room for the
indicated number of bytes (remember to reserve space for an extra trailing
NUL(fR character).  Calls sv_grow(fR to perform the expansion if necessary.
Returns a pointer to the character
buffer.  SV must be of type >= SVt_PV(fR.  One
alternative is to call sv_grow(fR if you are not sure of the type of SV.

You might mistakenly think that len(fR is the number of bytes to add to the
existing size, but instead it is the total size sv(fR should be.
        char W  SvGROW(SVW sv, STRLEN len)

SvIOK 8
Returns a U32 value indicating whether the SV contains an integer.
        U32     SvIOK(SVW sv)

SvIOK_notUV 8
Returns a boolean indicating whether the SV contains a signed integer.
        bool    SvIOK_notUV(SVW sv)

SvIOK_off 8
Unsets the IV status of an SV.
        void    SvIOK_off(SVW sv)

SvIOK_on 8
Tells an SV that it is an integer.
        void    SvIOK_on(SVW sv)

SvIOK_only 8
Tells an SV that it is an integer and disables all other OK(fR bits.
        void    SvIOK_only(SVW sv)

SvIOK_only_UV 8
Tells an SV that it is an unsigned integer and disables all other OK(fR bits.
        void    SvIOK_only_UV(SVW sv)

SvIOKp 8
Returns a U32 value indicating whether the SV contains an integer.  Checks
the private setting.  Use SvIOK(fR instead.
        U32     SvIOKp(SVW sv)

SvIOK_UV 8
Returns a boolean indicating whether the SV contains an integer that must be
interpreted as unsigned.  A non negative integer whose value is within the
range of both an IV and a UV may be be flagged as either SvUOK(fR or SVIOK(fR.
        bool    SvIOK_UV(SVW sv)

SvIsCOW 8
Returns a U32 value indicating whether the SV is Copy On Write (either shared
hash key scalars, or full Copy On Write scalars if 5.9.0 is configured for
COW).
        U32     SvIsCOW(SVW sv)

SvIsCOW_shared_hash 8
Returns a boolean indicating whether the SV is Copy On Write shared hash key
scalar.
        bool    SvIsCOW_shared_hash(SVW sv)

SvIV 8
Coerces the given SV to IV and returns it.  The returned value in many
circumstances will get stored in sv(fR's IV slot, but not in all cases.  (Use
"sv_setiv" to make sure it does).

See "SvIVx" for a version which guarantees to evaluate sv(fR only once.
        IV      SvIV(SVW sv)

SvIV_nomg 8
Like SvIV(fR but doesn't process magic.
        IV      SvIV_nomg(SVW sv)

SvIV_set 8
Set the value of the IV pointer in sv to val.  It is possible to perform
the same function of this macro with an lvalue assignment to SvIVX(fR.
With future Perls, however, it will be more efficient to use 
SvIV_set(fR instead of the lvalue assignment to SvIVX(fR.
        void    SvIV_set(SVW sv, IV val)

SvIVX 8
Returns the raw value in the SV's IV slot, without checks or conversions.
Only use when you are sure SvIOK(fR is true.  See also "SvIV".
        IV      SvIVX(SVW sv)

SvIVx 8
Coerces the given SV to IV and returns it.  The returned value in many
circumstances will get stored in sv(fR's IV slot, but not in all cases.  (Use
"sv_setiv" to make sure it does).

This form guarantees to evaluate sv(fR only once.  Only use this if sv(fR is an
expression with side effects, otherwise use the more efficient SvIV(fR.
        IV      SvIVx(SVW sv)

SvLEN 8
Returns the size of the string buffer in the SV, not including any part
attributable to SvOOK(fR.  See "SvCUR".
        STRLEN  SvLEN(SVW sv)

SvLEN_set 8
Set the size of the string buffer for the SV. See "SvLEN".
        void    SvLEN_set(SVW sv, STRLEN len)

SvMAGIC_set 8
Set the value of the MAGIC pointer in sv(fR to val.  See "SvIV_set".
        void    SvMAGIC_set(SVW sv, MAGICW val)

SvNIOK 8
Returns a U32 value indicating whether the SV contains a number, integer or
double.
        U32     SvNIOK(SVW sv)

SvNIOK_off 8
Unsets the NV/IV status of an SV.
        void    SvNIOK_off(SVW sv)

SvNIOKp 8
Returns a U32 value indicating whether the SV contains a number, integer or
double.  Checks the private setting.  Use SvNIOK(fR instead.
        U32     SvNIOKp(SVW sv)

SvNOK 8
Returns a U32 value indicating whether the SV contains a double.
        U32     SvNOK(SVW sv)

SvNOK_off 8
Unsets the NV status of an SV.
        void    SvNOK_off(SVW sv)

SvNOK_on 8
Tells an SV that it is a double.
        void    SvNOK_on(SVW sv)

SvNOK_only 8
Tells an SV that it is a double and disables all other OK bits.
        void    SvNOK_only(SVW sv)

SvNOKp 8
Returns a U32 value indicating whether the SV contains a double.  Checks the
private setting.  Use SvNOK(fR instead.
        U32     SvNOKp(SVW sv)

SvNV 8
Coerces the given SV to NV and returns it.  The returned value in many
circumstances will get stored in sv(fR's NV slot, but not in all cases.  (Use
"sv_setnv" to make sure it does).

See "SvNVx" for a version which guarantees to evaluate sv(fR only once.
        NV      SvNV(SVW sv)

SvNV_nomg 8
Like SvNV(fR but doesn't process magic.
        NV      SvNV_nomg(SVW sv)

SvNV_set 8
Set the value of the NV pointer in sv(fR to val.  See "SvIV_set".
        void    SvNV_set(SVW sv, NV val)

SvNVX 8
Returns the raw value in the SV's NV slot, without checks or conversions.
Only use when you are sure SvNOK(fR is true.  See also "SvNV".
        NV      SvNVX(SVW sv)

SvNVx 8
Coerces the given SV to NV and returns it.  The returned value in many
circumstances will get stored in sv(fR's NV slot, but not in all cases.  (Use
"sv_setnv" to make sure it does).

This form guarantees to evaluate sv(fR only once.  Only use this if sv(fR is an
expression with side effects, otherwise use the more efficient SvNV(fR.
        NV      SvNVx(SVW sv)

SvOK 8
Returns a U32 value indicating whether the value is defined.  This is
only meaningful for scalars.
        U32     SvOK(SVW sv)

SvOOK 8
Returns a U32 indicating whether the pointer to the string buffer is offset.
This hack is used internally to speed up removal of characters from the
beginning of a SvPV(fR.  When SvOOK(fR is true, then the start of the
allocated string buffer is actually SvOOK_offset()(fR bytes before SvPVX(fR.
This offset used to be stored in SvIVX(fR, but is now stored within the spare
part of the buffer.
        U32     SvOOK(SVW sv)

SvOOK_offset 8
Reads into len(fR the offset from SvPVX(fR back to the true start of the
allocated buffer, which will be non zero if sv_chop(fR has been used to
efficiently remove characters from start of the buffer.  Implemented as a
macro, which takes the address of len(fR, which must be of type STRLEN(fR.
Evaluates sv(fR more than once.  Sets len(fR to 0 if SvOOK(sv)(fR is false.
        void    SvOOK_offset(SVWsv, STRLEN len)

SvPOK 8
Returns a U32 value indicating whether the SV contains a character
string.
        U32     SvPOK(SVW sv)

SvPOK_off 8
Unsets the PV status of an SV.
        void    SvPOK_off(SVW sv)

SvPOK_on 8
Tells an SV that it is a string.
        void    SvPOK_on(SVW sv)

SvPOK_only 8
Tells an SV that it is a string and disables all other OK(fR bits.
Will also turn off the UTF 8 status.
        void    SvPOK_only(SVW sv)

SvPOK_only_UTF8 8
Tells an SV that it is a string and disables all other OK(fR bits,
and leaves the UTF 8 status as it was.
        void    SvPOK_only_UTF8(SVW sv)

SvPOKp 8
Returns a U32 value indicating whether the SV contains a character string.
Checks the private setting.  Use SvPOK(fR instead.
        U32     SvPOKp(SVW sv)

SvPV 8
Returns a pointer to the string in the SV, or a stringified form of
the SV if the SV does not contain a string.  The SV may cache the
stringified version becoming SvPOK(fR.  Handles 'get' magic.  The
len(fR variable will be set to the length of the string (this is a macro, so
don't use &len).  See also "SvPVx" for a version which guarantees to
evaluate sv(fR only once.

Note that there is no guarantee that the return value of SvPV()(fR is
equal to SvPVX(sv)(fR, or that SvPVX(sv)(fR contains valid data, or that
successive calls to SvPV(sv)(fR will return the same pointer value each
time.  This is due to the way that things like overloading and
Copy On Write are handled.  In these cases, the return value may point to
a temporary buffer or similar.  If you absolutely need the SvPVX(fR field to
be valid (for example, if you intend to write to it), then see
"SvPV_force".
        charW   SvPV(SVW sv, STRLEN len)

SvPVbyte 8
Like SvPV(fR, but converts sv(fR to byte representation first if necessary.
        charW   SvPVbyte(SVW sv, STRLEN len)

SvPVbyte_force 8
Like SvPV_force(fR, but converts sv(fR to byte representation first if necessary.
        charW   SvPVbyte_force(SVW sv, STRLEN len)

SvPVbyte_nolen 8
Like SvPV_nolen(fR, but converts sv(fR to byte representation first if necessary.
        charW   SvPVbyte_nolen(SVW sv)

SvPVbytex 8
Like SvPV(fR, but converts sv(fR to byte representation first if necessary.
Guarantees to evaluate sv(fR only once; use the more efficient SvPVbyte(fR
otherwise.
        charW   SvPVbytex(SVW sv, STRLEN len)

SvPVbytex_force 8
Like SvPV_force(fR, but converts sv(fR to byte representation first if necessary.
Guarantees to evaluate sv(fR only once; use the more efficient SvPVbyte_force(fR
otherwise.
        charW   SvPVbytex_force(SVW sv, STRLEN len)

SvPVCLEAR 8
Ensures that sv is a SVt_PV and that its SvCUR is 0, and that it is
properly null terminated. Equivalent to sv_setpvs(""), but more efficient.
        char W  SvPVCLEAR(SVW sv)

SvPV_force 8
Like SvPV(fR but will force the SV into containing a string (SvPOK(fR), and
only a string (SvPOK_only(fR), by hook or by crook.  You need force if you are
going to update the SvPVX(fR directly.  Processes get magic.

Note that coercing an arbitrary scalar into a plain PV will potentially
strip useful data from it.  For example if the SV was SvROK(fR, then the
referent will have its reference count decremented, and the SV itself may
be converted to an SvPOK(fR scalar with a string buffer containing a value
such as "ARRAY(0x1234)".
        charW   SvPV_force(SVW sv, STRLEN len)

SvPV_force_nomg 8
Like SvPV_force(fR, but doesn't process get magic.
        charW   SvPV_force_nomg(SVW sv, STRLEN len)

SvPV_nolen 8
Like SvPV(fR but doesn't set a length variable.
        charW   SvPV_nolen(SVW sv)

SvPV_nomg 8
Like SvPV(fR but doesn't process magic.
        charW   SvPV_nomg(SVW sv, STRLEN len)

SvPV_nomg_nolen 8
Like SvPV_nolen(fR but doesn't process magic.
        charW   SvPV_nomg_nolen(SVW sv)

SvPV_set 8
This is probably not what you want to use, you probably wanted
sv_usepvn_flags or sv_setpvn or sv_setpvs.

Set the value of the PV pointer in sv(fR to the Perl allocated
NUL(fR terminated string val(fR.  See also "SvIV_set".

Remember to free the previous PV buffer. There are many things to check.
Beware that the existing pointer may be involved in copy on write or other
mischief, so do SvOOK_off(sv)(fR and use sv_force_normal(fR or
SvPV_force(fR (or check the SvIsCOW(fR flag) first to make sure this
modification is safe. Then finally, if it is not a COW, call SvPV_free(fR to
free the previous PV buffer.
        void    SvPV_set(SVW sv, charW val)

SvPVutf8 8
Like SvPV(fR, but converts sv(fR to UTF 8 first if necessary.
        charW   SvPVutf8(SVW sv, STRLEN len)

SvPVutf8x 8
Like SvPV(fR, but converts sv(fR to UTF 8 first if necessary.
Guarantees to evaluate sv(fR only once; use the more efficient SvPVutf8(fR
otherwise.
        charW   SvPVutf8x(SVW sv, STRLEN len)

SvPVutf8x_force 8
Like SvPV_force(fR, but converts sv(fR to UTF 8 first if necessary.
Guarantees to evaluate sv(fR only once; use the more efficient SvPVutf8_force(fR
otherwise.
        charW   SvPVutf8x_force(SVW sv, STRLEN len)

SvPVutf8_force 8
Like SvPV_force(fR, but converts sv(fR to UTF 8 first if necessary.
        charW   SvPVutf8_force(SVW sv, STRLEN len)

SvPVutf8_nolen 8
Like SvPV_nolen(fR, but converts sv(fR to UTF 8 first if necessary.
        charW   SvPVutf8_nolen(SVW sv)

SvPVX 8
Returns a pointer to the physical string in the SV.  The SV must contain a
string.  Prior to 5.9.3 it is not safe
to execute this macro unless the SV's
type >= SVt_PV(fR.

This is also used to store the name of an autoloaded subroutine in an XS
AUTOLOAD routine.  See Autoloading with XSUBs in perlguts.
        charW   SvPVX(SVW sv)

SvPVx 8
A version of SvPV(fR which guarantees to evaluate sv(fR only once.
Only use this if sv(fR is an expression with side effects, otherwise use the
more efficient SvPV(fR.
        charW   SvPVx(SVW sv, STRLEN len)

SvREADONLY 8
Returns true if the argument is readonly, otherwise returns false.
Exposed to to perl code via Internals::SvREADONLY().
        U32     SvREADONLY(SVW sv)

SvREADONLY_off 8
Mark an object as not readonly. Exactly what this mean depends on the
object type. Exposed to perl code via Internals::SvREADONLY().
        U32     SvREADONLY_off(SVW sv)

SvREADONLY_on 8
Mark an object as readonly. Exactly what this means depends on the object
type. Exposed to perl code via Internals::SvREADONLY().
        U32     SvREADONLY_on(SVW sv)

SvREFCNT 8
Returns the value of the object's reference count. Exposed
to perl code via Internals::SvREFCNT().
        U32     SvREFCNT(SVW sv)

SvREFCNT_dec 8
Decrements the reference count of the given SV.  sv(fR may be NULL(fR.
        void    SvREFCNT_dec(SVW sv)

SvREFCNT_dec_NN 8
Same as SvREFCNT_dec(fR, but can only be used if you know sv(fR
is not NULL(fR.  Since we don't have to check the NULLness, it's faster
and smaller.
        void    SvREFCNT_dec_NN(SVW sv)

SvREFCNT_inc 8
Increments the reference count of the given SV, returning the SV.

All of the following SvREFCNT_inc(fRW macros are optimized versions of
SvREFCNT_inc(fR, and can be replaced with SvREFCNT_inc(fR.
        SVW     SvREFCNT_inc(SVW sv)

SvREFCNT_inc_NN 8
Same as SvREFCNT_inc(fR, but can only be used if you know sv(fR
is not NULL(fR.  Since we don't have to check the NULLness, it's faster
and smaller.
        SVW     SvREFCNT_inc_NN(SVW sv)

SvREFCNT_inc_simple 8
Same as SvREFCNT_inc(fR, but can only be used with expressions without side
effects.  Since we don't have to store a temporary value, it's faster.
        SVW     SvREFCNT_inc_simple(SVW sv)

SvREFCNT_inc_simple_NN 8
Same as SvREFCNT_inc_simple(fR, but can only be used if you know sv(fR
is not NULL(fR.  Since we don't have to check the NULLness, it's faster
and smaller.
        SVW     SvREFCNT_inc_simple_NN(SVW sv)

SvREFCNT_inc_simple_void 8
Same as SvREFCNT_inc_simple(fR, but can only be used if you don't need the
return value.  The macro doesn't need to return a meaningful value.
        void    SvREFCNT_inc_simple_void(SVW sv)

SvREFCNT_inc_simple_void_NN 8
Same as SvREFCNT_inc(fR, but can only be used if you don't need the return
value, and you know that sv(fR is not NULL(fR.  The macro doesn't need
to return a meaningful value, or check for NULLness, so it's smaller
and faster.
        void    SvREFCNT_inc_simple_void_NN(SVW sv)

SvREFCNT_inc_void 8
Same as SvREFCNT_inc(fR, but can only be used if you don't need the
return value.  The macro doesn't need to return a meaningful value.
        void    SvREFCNT_inc_void(SVW sv)

SvREFCNT_inc_void_NN 8
Same as SvREFCNT_inc(fR, but can only be used if you don't need the return
value, and you know that sv(fR is not NULL(fR.  The macro doesn't need
to return a meaningful value, or check for NULLness, so it's smaller
and faster.
        void    SvREFCNT_inc_void_NN(SVW sv)

sv_report_used 8
Dump the contents of all SVs not yet freed (debugging aid).
        void    sv_report_used()

SvROK 8
Tests if the SV is an RV.
        U32     SvROK(SVW sv)

SvROK_off 8
Unsets the RV status of an SV.
        void    SvROK_off(SVW sv)

SvROK_on 8
Tells an SV that it is an RV.
        void    SvROK_on(SVW sv)

SvRV 8
Dereferences an RV to return the SV.
        SVW     SvRV(SVW sv)

SvRV_set 8
Set the value of the RV pointer in sv(fR to val.  See "SvIV_set".
        void    SvRV_set(SVW sv, SVW val)

sv_setsv_nomg 8
Like sv_setsv(fR but doesn't process magic.
        void    sv_setsv_nomg(SVW dsv, SVW ssv)

SvSTASH 8
Returns the stash of the SV.
        HVW     SvSTASH(SVW sv)

SvSTASH_set 8
Set the value of the STASH pointer in sv(fR to val.  See "SvIV_set".
        void    SvSTASH_set(SVW sv, HVW val)

SvTAINT 8
Taints an SV if tainting is enabled, and if some input to the current
expression is taintedusually a variable, but possibly also implicit
inputs such as locale settings.  SvTAINT(fR propagates that taintedness to
the outputs of an expression in a pessimistic fashion; i.e., without paying
attention to precisely which outputs are influenced by which inputs.
        void    SvTAINT(SVW sv)

SvTAINTED 8
Checks to see if an SV is tainted.  Returns TRUE if it is, FALSE if
not.
        bool    SvTAINTED(SVW sv)

SvTAINTED_off 8
Untaints an SV.  Be very careful with this routine, as it short circuits
some of Perl's fundamental security features.  XS module authors should not
use this function unless they fully understand all the implications of
unconditionally untainting the value.  Untainting should be done in the
standard perl fashion, via a carefully crafted regexp, rather than directly
untainting variables.
        void    SvTAINTED_off(SVW sv)

SvTAINTED_on 8
Marks an SV as tainted if tainting is enabled.
        void    SvTAINTED_on(SVW sv)

SvTRUE 8
Returns a boolean indicating whether Perl would evaluate the SV as true or
false.  See "SvOK" for a defined/undefined test.  Handles 'get' magic
unless the scalar is already SvPOK(fR, SvIOK(fR or SvNOK(fR (the public, not the
private flags).
        bool    SvTRUE(SVW sv)

SvTRUE_nomg 8
Returns a boolean indicating whether Perl would evaluate the SV as true or
false.  See "SvOK" for a defined/undefined test.  Does not handle 'get' magic.
        bool    SvTRUE_nomg(SVW sv)

SvTYPE 8
Returns the type of the SV.  See "svtype".
        svtype  SvTYPE(SVW sv)

SvUOK 8
Returns a boolean indicating whether the SV contains an integer that must be
interpreted as unsigned.  A non negative integer whose value is within the
range of both an IV and a UV may be be flagged as either SvUOK(fR or SVIOK(fR.
        bool    SvUOK(SVW sv)

SvUPGRADE 8
Used to upgrade an SV to a more complex form.  Uses sv_upgrade(fR to
perform the upgrade if necessary.  See "svtype".
        void    SvUPGRADE(SVW sv, svtype type)

SvUTF8 8
Returns a U32 value indicating the UTF 8 status of an SV.  If things are set up
properly, this indicates whether or not the SV contains UTF 8 encoded data.
You should use this after a call to SvPV()(fR or one of its variants, in
case any call to string overloading updates the internal flag.

If you want to take into account the bytes pragma, use "DO_UTF8"
instead.
        U32     SvUTF8(SVW sv)

sv_utf8_upgrade_nomg 8
Like sv_utf8_upgrade(fR, but doesn't do magic on sv(fR.
        STRLEN  sv_utf8_upgrade_nomg(SV Wsv)

SvUTF8_off 8
Unsets the UTF 8 status of an SV (the data is not changed, just the flag).
Do not use frivolously.
        void    SvUTF8_off(SV Wsv)

SvUTF8_on 8
Turn on the UTF 8 status of an SV (the data is not changed, just the flag).
Do not use frivolously.
        void    SvUTF8_on(SV Wsv)

SvUV 8
Coerces the given SV to UV and returns it.  The returned value in many
circumstances will get stored in sv(fR's UV slot, but not in all cases.  (Use
"sv_setuv" to make sure it does).

See "SvUVx" for a version which guarantees to evaluate sv(fR only once.
        UV      SvUV(SVW sv)

SvUV_nomg 8
Like SvUV(fR but doesn't process magic.
        UV      SvUV_nomg(SVW sv)

SvUV_set 8
Set the value of the UV pointer in sv(fR to val.  See "SvIV_set".
        void    SvUV_set(SVW sv, UV val)

SvUVX 8
Returns the raw value in the SV's UV slot, without checks or conversions.
Only use when you are sure SvIOK(fR is true.  See also "SvUV".
        UV      SvUVX(SVW sv)

SvUVx 8
Coerces the given SV to UV and returns it.  The returned value in many
circumstances will get stored in sv(fR's UV slot, but not in all cases.  (Use
"sv_setuv" to make sure it does).

This form guarantees to evaluate sv(fR only once.  Only use this if sv(fR is an
expression with side effects, otherwise use the more efficient SvUV(fR.
        UV      SvUVx(SVW sv)

SvVOK 8
Returns a boolean indicating whether the SV contains a v string.
        bool    SvVOK(SVW sv)

Unicode Support

Unicode Support in perlguts has an introduction to this API.

See also Character classification,
and Character case changing.
Various functions outside this section also work specially with Unicode.
Search for the string utf8 in this document.
BOM_UTF8 8
This is a macro that evaluates to a string constant of the  UTF 8 bytes that
define the Unicode BYTE ORDER MARK (U+FEFF) for the platform that perl
is compiled on.  This allows code to use a mnemonic for this character that
works on both ASCII and EBCDIC platforms.
sizeof(BOM_UTF8)   1(fR can be used to get its length in
bytes.
bytes_cmp_utf8 8
Compares the sequence of characters (stored as octets) in b(fR, blen(fR with the
sequence of characters (stored as UTF 8)
in u(fR, ulen(fR.  Returns 0 if they are
equal,  1 or  2 if the first string is less than the second string, +1 or +2
if the first string is greater than the second string.

 1 or +1 is returned if the shorter string was identical to the start of the
longer string.   2 or +2 is returned if
there was a difference between characters
within the strings.
        int     bytes_cmp_utf8(const U8 Wb, STRLEN blen,
                               const U8 Wu, STRLEN ulen)

bytes_from_utf8 8
NOTE: this function is experimental and may change or be
removed without notice.

Converts a potentially UTF 8 encoded string s(fR of length Wlenp into native
byte encoding.  On input, the boolean Wis_utf8p gives whether or not s(fR is
actually encoded in UTF 8.

Unlike utf8_to_bytes but like bytes_to_utf8, this is non destructive of
the input string.

Do nothing if Wis_utf8p is 0, or if there are code points in the string
not expressible in native byte encoding.  In these cases, Wis_utf8p and
Wlenp are unchanged, and the return value is the original s(fR.

Otherwise, Wis_utf8p is set to 0, and the return value is a pointer to a
newly created string containing a downgraded copy of s(fR, and whose length is
returned in Wlenp, updated.  The new string is NUL(fR terminated.  The
caller is responsible for arranging for the memory used by this string to get
freed.

Upon successful return, the number of variants in the string can be computed by
having saved the value of Wlenp before the call, and subtracting the
after call value of Wlenp from it.
        U8W     bytes_from_utf8(const U8 Ws, STRLEN Wlenp,
                                bool Wis_utf8p)

bytes_to_utf8 8
NOTE: this function is experimental and may change or be
removed without notice.

Converts a string s(fR of length Wlenp bytes from the native encoding into
UTF 8.
Returns a pointer to the newly created string, and sets Wlenp to
reflect the new length in bytes.  The caller is responsible for arranging for
the memory used by this string to get freed.

Upon successful return, the number of variants in the string can be computed by
having saved the value of Wlenp before the call, and subtracting it from the
after call value of Wlenp.

A NUL(fR character will be written after the end of the string.

If you want to convert to UTF 8 from encodings other than
the native (Latin1 or EBCDIC),
see sv_recode_to_utf8().
        U8W     bytes_to_utf8(const U8 Ws, STRLEN Wlenp)

DO_UTF8 8
Returns a bool giving whether or not the PV in sv(fR is to be treated as being
encoded in UTF 8.

You should use this after a call to SvPV()(fR or one of its variants, in
case any call to string overloading updates the internal UTF 8 encoding flag.
        bool    DO_UTF8(SVW sv)

foldEQ_utf8 8
Returns true if the leading portions of the strings s1(fR and s2(fR (either or
both of which may be in UTF 8) are the same case insensitively; false
otherwise.  How far into the strings to compare is determined by other input
parameters.

If u1(fR is true, the string s1(fR is assumed to be in UTF 8 encoded Unicode;
otherwise it is assumed to be in native 8 bit encoding.  Correspondingly for
u2(fR with respect to s2(fR.

If the byte length l1(fR is non zero, it says how far into s1(fR to check for
fold equality.  In other words, s1(fR+l1(fR will be used as a goal to reach.
The scan will not be considered to be a match unless the goal is reached, and
scanning won't continue past that goal.  Correspondingly for l2(fR with respect
to s2(fR.

If pe1(fR is non NULL(fR and the pointer it points to is not NULL(fR, that
pointer is considered an end pointer to the position 1 byte past the maximum
point in s1(fR beyond which scanning will not continue under any circumstances.
(This routine assumes that UTF 8 encoded input strings are not malformed;
malformed input can cause it to read past pe1(fR).  This means that if both
l1(fR and pe1(fR are specified, and pe1(fR is less than s1(fR+l1(fR, the match
will never be successful because it can never
get as far as its goal (and in fact is asserted against).  Correspondingly for
pe2(fR with respect to s2(fR.

At least one of s1(fR and s2(fR must have a goal (at least one of l1(fR and
l2(fR must be non zero), and if both do, both have to be
reached for a successful match.   Also, if the fold of a character is multiple
characters, all of them must be matched (see tr21 reference below for
'folding').

Upon a successful match, if pe1(fR is non NULL(fR,
it will be set to point to the beginning of the next character of s1(fR
beyond what was matched.  Correspondingly for pe2(fR and s2(fR.

For case insensitiveness, the casefolding of Unicode is used
instead of upper/lowercasing both the characters, see
<http://www.unicode.org/unicode/reports/tr21/> (Case Mappings).
        I32     foldEQ_utf8(const char Ws1, char WWpe1, UV l1,
                            bool u1, const char Ws2, char WWpe2,
                            UV l2, bool u2)

is_ascii_string 8
This is a misleadingly named synonym for is_utf8_invariant_string.
On ASCII ish platforms, the name isn't misleading: the ASCII range characters
are exactly the UTF 8 invariants.  But EBCDIC machines have more invariants
than just the ASCII characters, so is_utf8_invariant_string(fR is preferred.
        bool    is_ascii_string(const U8W const s, STRLEN len)

is_c9strict_utf8_string 8
Returns TRUE if the first len(fR bytes of string s(fR form a valid
UTF 8 encoded string that conforms to
Unicode Corrigendum #9 <http://www.unicode.org/versions/corrigendum9.html>;
otherwise it returns FALSE.  If len(fR is 0, it will be calculated using
strlen(s) (which means if you use this option, that s(fR can't have embedded
NUL(fR characters and has to have a terminating NUL(fR byte).  Note that all
characters being ASCII constitute 'a valid UTF 8 string'.

This function returns FALSE for strings containing any code points above the
Unicode max of 0x10FFFF or surrogate code points, but accepts non character
code points per
Corrigendum #9 <http://www.unicode.org/versions/corrigendum9.html>.

See also
"is_utf8_invariant_string",
"is_utf8_invariant_string_loc",
"is_utf8_string",
"is_utf8_string_flags",
"is_utf8_string_loc",
"is_utf8_string_loc_flags",
"is_utf8_string_loclen",
"is_utf8_string_loclen_flags",
"is_utf8_fixed_width_buf_flags",
"is_utf8_fixed_width_buf_loc_flags",
"is_utf8_fixed_width_buf_loclen_flags",
"is_strict_utf8_string",
"is_strict_utf8_string_loc",
"is_strict_utf8_string_loclen",
"is_c9strict_utf8_string_loc",
and
"is_c9strict_utf8_string_loclen".
        bool    is_c9strict_utf8_string(const U8 Ws, STRLEN len)

is_c9strict_utf8_string_loc 8
Like "is_c9strict_utf8_string" but stores the location of the failure (in
the case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer.

See also "is_c9strict_utf8_string_loclen".
        bool    is_c9strict_utf8_string_loc(const U8 Ws,
                                            STRLEN len,
                                            const U8 WWep)

is_c9strict_utf8_string_loclen 8
Like "is_c9strict_utf8_string" but stores the location of the failure (in
the case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer, and the number of UTF 8 encoded
characters in the el(fR pointer.

See also "is_c9strict_utf8_string_loc".
        bool    is_c9strict_utf8_string_loclen(const U8 Ws,
                                               STRLEN len,
                                               const U8 WWep,
                                               STRLEN Wel)

isC9_STRICT_UTF8_CHAR 8
Evaluates to non zero if the first few bytes of the string starting at s(fR and
looking no further than e   1(fR are well formed UTF 8 that represents some
Unicode non surrogate code point; otherwise it evaluates to 0.  If non zero,
the value gives how many bytes starting at s(fR comprise the code point's
representation.  Any bytes remaining before e(fR, but beyond the ones needed to
form the first code point in s(fR, are not examined.

The largest acceptable code point is the Unicode maximum 0x10FFFF.  This
differs from "isSTRICT_UTF8_CHAR" only in that it accepts non character
code points.  This corresponds to
Unicode Corrigendum #9 <http://www.unicode.org/versions/corrigendum9.html>.
which said that non character code points are merely discouraged rather than
completely forbidden in open interchange.  See
Noncharacter code points in perlunicode.

Use "isUTF8_CHAR" to check for Perl's extended UTF 8; and
"isUTF8_CHAR_flags" for a more customized definition.

Use "is_c9strict_utf8_string", "is_c9strict_utf8_string_loc", and
"is_c9strict_utf8_string_loclen" to check entire strings.
        STRLEN  isC9_STRICT_UTF8_CHAR(const U8 Ws, const U8 We)

is_invariant_string 8
This is a somewhat misleadingly named synonym for is_utf8_invariant_string.
is_utf8_invariant_string(fR is preferred, as it indicates under what conditions
the string is invariant.
        bool    is_invariant_string(const U8W const s,
                                    STRLEN len)

isSTRICT_UTF8_CHAR 8
Evaluates to non zero if the first few bytes of the string starting at s(fR and
looking no further than e   1(fR are well formed UTF 8 that represents some
Unicode code point completely acceptable for open interchange between all
applications; otherwise it evaluates to 0.  If non zero, the value gives how
many bytes starting at s(fR comprise the code point's representation.  Any
bytes remaining before e(fR, but beyond the ones needed to form the first code
point in s(fR, are not examined.

The largest acceptable code point is the Unicode maximum 0x10FFFF, and must not
be a surrogate nor a non character code point.  Thus this excludes any code
point from Perl's extended UTF 8.

This is used to efficiently decide if the next few bytes in s(fR is
legal Unicode acceptable UTF 8 for a single character.

Use "isC9_STRICT_UTF8_CHAR" to use the Unicode Corrigendum
#9 <http://www.unicode.org/versions/corrigendum9.html> definition of allowable
code points; "isUTF8_CHAR" to check for Perl's extended UTF 8;
and "isUTF8_CHAR_flags" for a more customized definition.

Use "is_strict_utf8_string", "is_strict_utf8_string_loc", and
"is_strict_utf8_string_loclen" to check entire strings.
        STRLEN  isSTRICT_UTF8_CHAR(const U8 Ws, const U8 We)

is_strict_utf8_string 8
Returns TRUE if the first len(fR bytes of string s(fR form a valid
UTF 8 encoded string that is fully interchangeable by any application using
Unicode rules; otherwise it returns FALSE.  If len(fR is 0, it will be
calculated using strlen(s) (which means if you use this option, that s(fR
can't have embedded NUL(fR characters and has to have a terminating NUL(fR
byte).  Note that all characters being ASCII constitute 'a valid UTF 8 string'.

This function returns FALSE for strings containing any
code points above the Unicode max of 0x10FFFF, surrogate code points, or
non character code points.

See also
"is_utf8_invariant_string",
"is_utf8_invariant_string_loc",
"is_utf8_string",
"is_utf8_string_flags",
"is_utf8_string_loc",
"is_utf8_string_loc_flags",
"is_utf8_string_loclen",
"is_utf8_string_loclen_flags",
"is_utf8_fixed_width_buf_flags",
"is_utf8_fixed_width_buf_loc_flags",
"is_utf8_fixed_width_buf_loclen_flags",
"is_strict_utf8_string_loc",
"is_strict_utf8_string_loclen",
"is_c9strict_utf8_string",
"is_c9strict_utf8_string_loc",
and
"is_c9strict_utf8_string_loclen".
        bool    is_strict_utf8_string(const U8 Ws, STRLEN len)

is_strict_utf8_string_loc 8
Like "is_strict_utf8_string" but stores the location of the failure (in the
case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer.

See also "is_strict_utf8_string_loclen".
        bool    is_strict_utf8_string_loc(const U8 Ws,
                                          STRLEN len,
                                          const U8 WWep)

is_strict_utf8_string_loclen 8
Like "is_strict_utf8_string" but stores the location of the failure (in the
case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer, and the number of UTF 8
encoded characters in the el(fR pointer.

See also "is_strict_utf8_string_loc".
        bool    is_strict_utf8_string_loclen(const U8 Ws,
                                             STRLEN len,
                                             const U8 WWep,
                                             STRLEN Wel)

is_utf8_fixed_width_buf_flags 8
Returns TRUE if the fixed width buffer starting at s(fR with length len(fR
is entirely valid UTF 8, subject to the restrictions given by flags(fR;
otherwise it returns FALSE.

If flags(fR is 0, any well formed UTF 8, as extended by Perl, is accepted
without restriction.  If the final few bytes of the buffer do not form a
complete code point, this will return TRUE anyway, provided that
"is_utf8_valid_partial_char_flags" returns TRUE for them.

If flags(fR in non zero, it can be any combination of the
UTF8_DISALLOW_foo(fR flags accepted by "utf8n_to_uvchr", and with the
same meanings.

This function differs from "is_utf8_string_flags" only in that the latter
returns FALSE if the final few bytes of the string don't form a complete code
point.
        bool    is_utf8_fixed_width_buf_flags(
                    const U8 W const s, STRLEN len,
                    const U32 flags
                )

is_utf8_fixed_width_buf_loclen_flags 8
Like "is_utf8_fixed_width_buf_loc_flags" but stores the number of
complete, valid characters found in the el(fR pointer.
        bool    is_utf8_fixed_width_buf_loclen_flags(
                    const U8 W const s, STRLEN len,
                    const U8 WWep, STRLEN Wel, const U32 flags
                )

is_utf8_fixed_width_buf_loc_flags 8
Like "is_utf8_fixed_width_buf_flags" but stores the location of the
failure in the ep(fR pointer.  If the function returns TRUE, Wep will point
to the beginning of any partial character at the end of the buffer; if there is
no partial character Wep will contain s(fR+len(fR.

See also "is_utf8_fixed_width_buf_loclen_flags".
        bool    is_utf8_fixed_width_buf_loc_flags(
                    const U8 W const s, STRLEN len,
                    const U8 WWep, const U32 flags
                )

is_utf8_invariant_string 8
Returns TRUE if the first len(fR bytes of the string s(fR are the same
regardless of the UTF 8 encoding of the string (or UTF EBCDIC encoding on
EBCDIC machines); otherwise it returns FALSE.  That is, it returns TRUE if they
are UTF 8 invariant.  On ASCII ish machines, all the ASCII characters and only
the ASCII characters fit this definition.  On EBCDIC machines, the ASCII range
characters are invariant, but so also are the C1 controls.

If len(fR is 0, it will be calculated using strlen(s), (which means if you
use this option, that s(fR can't have embedded NUL(fR characters and has to
have a terminating NUL(fR byte).

See also
"is_utf8_string",
"is_utf8_string_flags",
"is_utf8_string_loc",
"is_utf8_string_loc_flags",
"is_utf8_string_loclen",
"is_utf8_string_loclen_flags",
"is_utf8_fixed_width_buf_flags",
"is_utf8_fixed_width_buf_loc_flags",
"is_utf8_fixed_width_buf_loclen_flags",
"is_strict_utf8_string",
"is_strict_utf8_string_loc",
"is_strict_utf8_string_loclen",
"is_c9strict_utf8_string",
"is_c9strict_utf8_string_loc",
and
"is_c9strict_utf8_string_loclen".
        bool    is_utf8_invariant_string(const U8W const s,
                                         STRLEN len)

is_utf8_invariant_string_loc 8
Like "is_utf8_invariant_string" but upon failure, stores the location of
the first UTF 8 variant character in the ep(fR pointer; if all characters are
UTF 8 invariant, this function does not change the contents of Wep.
        bool    is_utf8_invariant_string_loc(const U8W const s,
                                             STRLEN len,
                                             const U8 WW ep)

is_utf8_string 8
Returns TRUE if the first len(fR bytes of string s(fR form a valid
Perl extended UTF 8 string; returns FALSE otherwise.  If len(fR is 0, it will
be calculated using strlen(s) (which means if you use this option, that s(fR
can't have embedded NUL(fR characters and has to have a terminating NUL(fR
byte).  Note that all characters being ASCII constitute 'a valid UTF 8 string'.

This function considers Perl's extended UTF 8 to be valid.  That means that
code points above Unicode, surrogates, and non character code points are
considered valid by this function.  Use "is_strict_utf8_string",
"is_c9strict_utf8_string", or "is_utf8_string_flags" to restrict what
code points are considered valid.

See also
"is_utf8_invariant_string",
"is_utf8_invariant_string_loc",
"is_utf8_string_loc",
"is_utf8_string_loclen",
"is_utf8_fixed_width_buf_flags",
"is_utf8_fixed_width_buf_loc_flags",
"is_utf8_fixed_width_buf_loclen_flags",
        bool    is_utf8_string(const U8 Ws, STRLEN len)

is_utf8_string_flags 8
Returns TRUE if the first len(fR bytes of string s(fR form a valid
UTF 8 string, subject to the restrictions imposed by flags(fR;
returns FALSE otherwise.  If len(fR is 0, it will be calculated
using strlen(s) (which means if you use this option, that s(fR can't have
embedded NUL(fR characters and has to have a terminating NUL(fR byte).  Note
that all characters being ASCII constitute 'a valid UTF 8 string'.

If flags(fR is 0, this gives the same results as "is_utf8_string"; if
flags(fR is UTF8_DISALLOW_ILLEGAL_INTERCHANGE(fR, this gives the same results
as "is_strict_utf8_string"; and if flags(fR is
UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE(fR, this gives the same results as
"is_c9strict_utf8_string".  Otherwise flags(fR may be any
combination of the UTF8_DISALLOW_foo(fR flags understood by
"utf8n_to_uvchr", with the same meanings.

See also
"is_utf8_invariant_string",
"is_utf8_invariant_string_loc",
"is_utf8_string",
"is_utf8_string_loc",
"is_utf8_string_loc_flags",
"is_utf8_string_loclen",
"is_utf8_string_loclen_flags",
"is_utf8_fixed_width_buf_flags",
"is_utf8_fixed_width_buf_loc_flags",
"is_utf8_fixed_width_buf_loclen_flags",
"is_strict_utf8_string",
"is_strict_utf8_string_loc",
"is_strict_utf8_string_loclen",
"is_c9strict_utf8_string",
"is_c9strict_utf8_string_loc",
and
"is_c9strict_utf8_string_loclen".
        bool    is_utf8_string_flags(const U8 Ws, STRLEN len,
                                     const U32 flags)

is_utf8_string_loc 8
Like "is_utf8_string" but stores the location of the failure (in the
case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer.

See also "is_utf8_string_loclen".
        bool    is_utf8_string_loc(const U8 Ws,
                                   const STRLEN len,
                                   const U8 WWep)

is_utf8_string_loclen 8
Like "is_utf8_string" but stores the location of the failure (in the
case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer, and the number of UTF 8
encoded characters in the el(fR pointer.

See also "is_utf8_string_loc".
        bool    is_utf8_string_loclen(const U8 Ws, STRLEN len,
                                      const U8 WWep, STRLEN Wel)

is_utf8_string_loclen_flags 8
Like "is_utf8_string_flags" but stores the location of the failure (in the
case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer, and the number of UTF 8
encoded characters in the el(fR pointer.

See also "is_utf8_string_loc_flags".
        bool    is_utf8_string_loclen_flags(const U8 Ws,
                                            STRLEN len,
                                            const U8 WWep,
                                            STRLEN Wel,
                                            const U32 flags)

is_utf8_string_loc_flags 8
Like "is_utf8_string_flags" but stores the location of the failure (in the
case of utf8ness failure) or the location s(fR+len(fR (in the case of
utf8ness success) in the ep(fR pointer.

See also "is_utf8_string_loclen_flags".
        bool    is_utf8_string_loc_flags(const U8 Ws,
                                         STRLEN len,
                                         const U8 WWep,
                                         const U32 flags)

is_utf8_valid_partial_char 8
Returns 0 if the sequence of bytes starting at s(fR and looking no further than
e   1(fR is the UTF 8 encoding, as extended by Perl, for one or more code
points.  Otherwise, it returns 1 if there exists at least one non empty
sequence of bytes that when appended to sequence s(fR, starting at position
e(fR causes the entire sequence to be the well formed UTF 8 of some code point;
otherwise returns 0.

In other words this returns TRUE if s(fR points to a partial UTF 8 encoded code
point.

This is useful when a fixed length buffer is being tested for being well formed
UTF 8, but the final few bytes in it don't comprise a full character; that is,
it is split somewhere in the middle of the final code point's UTF 8
representation.  (Presumably when the buffer is refreshed with the next chunk
of data, the new first bytes will complete the partial code point.)   This
function is used to verify that the final bytes in the current buffer are in
fact the legal beginning of some code point, so that if they aren't, the
failure can be signalled without having to wait for the next read.
        bool    is_utf8_valid_partial_char(const U8 W const s,
                                           const U8 W const e)

is_utf8_valid_partial_char_flags 8
Like "is_utf8_valid_partial_char", it returns a boolean giving whether
or not the input is a valid UTF 8 encoded partial character, but it takes an
extra parameter, flags(fR, which can further restrict which code points are
considered valid.

If flags(fR is 0, this behaves identically to
"is_utf8_valid_partial_char".  Otherwise flags(fR can be any combination
of the UTF8_DISALLOW_foo(fR flags accepted by "utf8n_to_uvchr".  If
there is any sequence of bytes that can complete the input partial character in
such a way that a non prohibited character is formed, the function returns
TRUE; otherwise FALSE.  Non character code points cannot be determined based on
partial character input.  But many  of the other possible excluded types can be
determined from just the first one or two bytes.
        bool    is_utf8_valid_partial_char_flags(
                    const U8 W const s, const U8 W const e,
                    const U32 flags
                )

isUTF8_CHAR 8
Evaluates to non zero if the first few bytes of the string starting at s(fR and
looking no further than e   1(fR are well formed UTF 8, as extended by Perl,
that represents some code point; otherwise it evaluates to 0.  If non zero, the
value gives how many bytes starting at s(fR comprise the code point's
representation.  Any bytes remaining before e(fR, but beyond the ones needed to
form the first code point in s(fR, are not examined.

The code point can be any that will fit in a UV on this machine, using Perl's
extension to official UTF 8 to represent those higher than the Unicode maximum
of 0x10FFFF.  That means that this macro is used to efficiently decide if the
next few bytes in s(fR is legal UTF 8 for a single character.

Use "isSTRICT_UTF8_CHAR" to restrict the acceptable code points to those
defined by Unicode to be fully interchangeable across applications;
"isC9_STRICT_UTF8_CHAR" to use the Unicode Corrigendum
#9 <http://www.unicode.org/versions/corrigendum9.html> definition of allowable
code points; and "isUTF8_CHAR_flags" for a more customized definition.

Use "is_utf8_string", "is_utf8_string_loc", and
"is_utf8_string_loclen" to check entire strings.

Note that it is deprecated to use code points higher than what will fit in an
IV.  This macro does not raise any warnings for such code points, treating them
as valid.

Note also that a UTF 8 INVARIANT character (i.e. ASCII on non EBCDIC machines)
is a valid UTF 8 character.
        STRLEN  isUTF8_CHAR(const U8 Ws, const U8 We)

isUTF8_CHAR_flags 8
Evaluates to non zero if the first few bytes of the string starting at s(fR and
looking no further than e   1(fR are well formed UTF 8, as extended by Perl,
that represents some code point, subject to the restrictions given by flags(fR;
otherwise it evaluates to 0.  If non zero, the value gives how many bytes
starting at s(fR comprise the code point's representation.  Any bytes remaining
before e(fR, but beyond the ones needed to form the first code point in s(fR,
are not examined.

If flags(fR is 0, this gives the same results as "isUTF8_CHAR";
if flags(fR is UTF8_DISALLOW_ILLEGAL_INTERCHANGE(fR, this gives the same results
as "isSTRICT_UTF8_CHAR";
and if flags(fR is UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE(fR, this gives
the same results as "isC9_STRICT_UTF8_CHAR".
Otherwise flags(fR may be any combination of the UTF8_DISALLOW_foo(fR flags
understood by "utf8n_to_uvchr", with the same meanings.

The three alternative macros are for the most commonly needed validations; they
are likely to run somewhat faster than this more general one, as they can be
inlined into your code.

Use is_utf8_string_flags, is_utf8_string_loc_flags, and
is_utf8_string_loclen_flags to check entire strings.
        STRLEN  isUTF8_CHAR_flags(const U8 Ws, const U8 We,
                                   const U32 flags)

pv_uni_display 8
Build to the scalar dsv(fR a displayable version of the string spv(fR,
length len(fR, the displayable version being at most pvlim(fR bytes long
(if longer, the rest is truncated and "..." will be appended).

The flags(fR argument can have UNI_DISPLAY_ISPRINT(fR set to display
isPRINT()(fRable characters as themselves, UNI_DISPLAY_BACKSLASH(fR
to display the (e([nrfta((](fR as the backslashed versions (like "(n")
(UNI_DISPLAY_BACKSLASH(fR is preferred over UNI_DISPLAY_ISPRINT(fR for "((").
UNI_DISPLAY_QQ(fR (and its alias UNI_DISPLAY_REGEX(fR) have both
UNI_DISPLAY_BACKSLASH(fR and UNI_DISPLAY_ISPRINT(fR turned on.

The pointer to the PV of the dsv(fR is returned.

See also sv_uni_display.
        charW   pv_uni_display(SV Wdsv, const U8 Wspv,
                               STRLEN len, STRLEN pvlim,
                               UV flags)

REPLACEMENT_CHARACTER_UTF8 8
This is a macro that evaluates to a string constant of the  UTF 8 bytes that
define the Unicode REPLACEMENT CHARACTER (U+FFFD) for the platform that perl
is compiled on.  This allows code to use a mnemonic for this character that
works on both ASCII and EBCDIC platforms.
sizeof(REPLACEMENT_CHARACTER_UTF8)   1(fR can be used to get its length in
bytes.
sv_cat_decode 8
encoding(fR is assumed to be an Encode(fR object, the PV of ssv(fR is
assumed to be octets in that encoding and decoding the input starts
from the position which (PV + Woffset)(fR pointed to.  dsv(fR will be
concatenated with the decoded UTF 8 string from ssv(fR.  Decoding will terminate
when the string tstr(fR appears in decoding output or the input ends on
the PV of ssv(fR.  The value which offset(fR points will be modified
to the last input position on ssv(fR.

Returns TRUE if the terminator was found, else returns FALSE.
        bool    sv_cat_decode(SVW dsv, SV Wencoding, SV Wssv,
                              int Woffset, charW tstr, int tlen)

sv_recode_to_utf8 8
encoding(fR is assumed to be an Encode(fR object, on entry the PV
of sv(fR is assumed to be octets in that encoding, and sv(fR
will be converted into Unicode (and UTF 8).

If sv(fR already is UTF 8 (or if it is not POK(fR), or if encoding(fR
is not a reference, nothing is done to sv(fR.  If encoding(fR is not
an Encode::XS(fR Encoding object, bad things will happen.
(See cpan/Encode/encoding.pm and Encode.)

The PV of sv(fR is returned.
        charW   sv_recode_to_utf8(SVW sv, SV Wencoding)

sv_uni_display 8
Build to the scalar dsv(fR a displayable version of the scalar sv(fR,
the displayable version being at most pvlim(fR bytes long
(if longer, the rest is truncated and ... will be appended).

The flags(fR argument is as in pv_uni_display().

The pointer to the PV of the dsv(fR is returned.
        charW   sv_uni_display(SV Wdsv, SV Wssv, STRLEN pvlim,
                               UV flags)

to_utf8_fold 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Instead use toFOLD_utf8_safe.
        UV      to_utf8_fold(const U8 Wp, U8W ustrp,
                             STRLEN Wlenp)

to_utf8_lower 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Instead use toLOWER_utf8_safe.
        UV      to_utf8_lower(const U8 Wp, U8W ustrp,
                              STRLEN Wlenp)

to_utf8_title 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Instead use toTITLE_utf8_safe.
        UV      to_utf8_title(const U8 Wp, U8W ustrp,
                              STRLEN Wlenp)

to_utf8_upper 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Instead use toUPPER_utf8_safe.
        UV      to_utf8_upper(const U8 Wp, U8W ustrp,
                              STRLEN Wlenp)

utf8n_to_uvchr 8
THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Most code should use utf8_to_uvchr_buf() rather than call this directly.

Bottom level UTF 8 decode routine.
Returns the native code point value of the first character in the string s(fR,
which is assumed to be in UTF 8 (or UTF EBCDIC) encoding, and no longer than
curlen(fR bytes; Wretlen (if retlen(fR isn't NULL) will be set to
the length, in bytes, of that character.

The value of flags(fR determines the behavior when s(fR does not point to a
well formed UTF 8 character.  If flags(fR is 0, encountering a malformation
causes zero to be returned and Wretlen is set so that (s(fR + Wretlen)
is the next possible position in s(fR that could begin a non malformed
character.  Also, if UTF 8 warnings haven't been lexically disabled, a warning
is raised.  Some UTF 8 input sequences may contain multiple malformations.
This function tries to find every possible one in each call, so multiple
warnings can be raised for the same sequence.

Various ALLOW flags can be set in flags(fR to allow (and not warn on)
individual types of malformations, such as the sequence being overlong (that
is, when there is a shorter sequence that can express the same code point;
overlong sequences are expressly forbidden in the UTF 8 standard due to
potential security issues).  Another malformation example is the first byte of
a character not being a legal first byte.  See utf8.h for the list of such
flags.  Even if allowed, this function generally returns the Unicode
REPLACEMENT CHARACTER when it encounters a malformation.  There are flags in
utf8.h to override this behavior for the overlong malformations, but don't
do that except for very specialized purposes.

The UTF8_CHECK_ONLY(fR flag overrides the behavior when a non allowed (by other
flags) malformation is found.  If this flag is set, the routine assumes that
the caller will raise a warning, and this function will silently just set
retlen(fR to ( 1(fR (cast to STRLEN(fR) and return zero.

Note that this API requires disambiguation between successful decoding a NUL(fR
character, and an error return (unless the UTF8_CHECK_ONLY(fR flag is set), as
in both cases, 0 is returned, and, depending on the malformation, retlen(fR may
be set to 1.  To disambiguate, upon a zero return, see if the first byte of
s(fR is 0 as well.  If so, the input was a NUL(fR; if not, the input had an
error.  Or you can use "utf8n_to_uvchr_error".

Certain code points are considered problematic.  These are Unicode surrogates,
Unicode non characters, and code points above the Unicode maximum of 0x10FFFF.
By default these are considered regular code points, but certain situations
warrant special handling for them, which can be specified using the flags(fR
parameter.  If flags(fR contains UTF8_DISALLOW_ILLEGAL_INTERCHANGE(fR, all
three classes are treated as malformations and handled as such.  The flags
UTF8_DISALLOW_SURROGATE(fR, UTF8_DISALLOW_NONCHAR(fR, and
UTF8_DISALLOW_SUPER(fR (meaning above the legal Unicode maximum) can be set to
disallow these categories individually.  UTF8_DISALLOW_ILLEGAL_INTERCHANGE(fR
restricts the allowed inputs to the strict UTF 8 traditionally defined by
Unicode.  Use UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE(fR to use the strictness
definition given by
Unicode Corrigendum #9 <http://www.unicode.org/versions/corrigendum9.html>.
The difference between traditional strictness and C9 strictness is that the
latter does not forbid non character code points.  (They are still discouraged,
however.)  For more discussion see Noncharacter code points in perlunicode.

The flags UTF8_WARN_ILLEGAL_INTERCHANGE(fR,
UTF8_WARN_ILLEGAL_C9_INTERCHANGE(fR, UTF8_WARN_SURROGATE(fR,
UTF8_WARN_NONCHAR(fR, and UTF8_WARN_SUPER(fR will cause warning messages to be
raised for their respective categories, but otherwise the code points are
considered valid (not malformations).  To get a category to both be treated as
a malformation and raise a warning, specify both the WARN and DISALLOW flags.
(But note that warnings are not raised if lexically disabled nor if
UTF8_CHECK_ONLY(fR is also specified.)

Extremely high code points were never specified in any standard, and require an
extension to UTF 8 to express, which Perl does.  It is likely that programs
written in something other than Perl would not be able to read files that
contain these; nor would Perl understand files written by something that uses a
different extension.  For these reasons, there is a separate set of flags that
can warn and/or disallow these extremely high code points, even if other
above Unicode ones are accepted.  They are the UTF8_WARN_PERL_EXTENDED(fR and
UTF8_DISALLOW_PERL_EXTENDED(fR flags.  For more information see
"UTF8_GOT_PERL_EXTENDED(fR".  Of course UTF8_DISALLOW_SUPER(fR will treat all
above Unicode code points, including these, as malformations.
(Note that the Unicode standard considers anything above 0x10FFFF to be
illegal, but there are standards predating it that allow up to 0x7FFF_FFFF
(2WW31  1))

A somewhat misleadingly named synonym for UTF8_WARN_PERL_EXTENDED(fR is
retained for backward compatibility: UTF8_WARN_ABOVE_31_BIT(fR.  Similarly,
UTF8_DISALLOW_ABOVE_31_BIT(fR is usable instead of the more accurately named
UTF8_DISALLOW_PERL_EXTENDED(fR.  The names are misleading because these flags
can apply to code points that actually do fit in 31 bits.  This happens on
EBCDIC platforms, and sometimes when the overlong
malformation is also present.  The new names accurately
describe the situation in all cases.

All other code points corresponding to Unicode characters, including private
use and those yet to be assigned, are never considered malformed and never
warn.
        UV      utf8n_to_uvchr(const U8 Ws, STRLEN curlen,
                               STRLEN Wretlen, const U32 flags)

utf8n_to_uvchr_error 8
THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Most code should use utf8_to_uvchr_buf() rather than call this directly.

This function is for code that needs to know what the precise malformation(s)
are when an error is found.  If you also need to know the generated warning
messages, use utf8n_to_uvchr_msgs() instead.

It is like "utf8n_to_uvchr" but it takes an extra parameter placed after
all the others, errors(fR.  If this parameter is 0, this function behaves
identically to "utf8n_to_uvchr".  Otherwise, errors(fR should be a pointer
to a U32(fR variable, which this function sets to indicate any errors found.
Upon return, if Werrors is 0, there were no errors found.  Otherwise,
Werrors is the bit wise OR(fR of the bits described in the list below.  Some
of these bits will be set if a malformation is found, even if the input
flags(fR parameter indicates that the given malformation is allowed; those
exceptions are noted:
The input sequence is not standard UTF 8, but a Perl extension.  This bit is
set only if the input flags(fR parameter contains either the
UTF8_DISALLOW_PERL_EXTENDED(fR or the UTF8_WARN_PERL_EXTENDED(fR flags.

Code points above 0x7FFF_FFFF (2WW31   1) were never specified in any standard,
and so some extension must be used to express them.  Perl uses a natural
extension to UTF 8 to represent the ones up to 2WW36 1, and invented a further
extension to represent even higher ones, so that any code point that fits in a
64 bit word can be represented.  Text using these extensions is not likely to
be portable to non Perl code.  We lump both of these extensions together and
refer to them as Perl extended UTF 8.  There exist other extensions that people
have invented, incompatible with Perl's.

On EBCDIC platforms starting in Perl v5.24, the Perl extension for representing
extremely high code points kicks in at 0x3FFF_FFFF (2WW30  1), which is lower
than on ASCII.  Prior to that, code points 2WW31 and higher were simply
unrepresentable, and a different, incompatible method was used to represent
code points between 2WW30 and 2WW31   1.

On both platforms, ASCII and EBCDIC, UTF8_GOT_PERL_EXTENDED(fR is set if
Perl extended UTF 8 is used.

In earlier Perls, this bit was named UTF8_GOT_ABOVE_31_BIT(fR, which you still
may use for backward compatibility.  That name is misleading, as this flag may
be set when the code point actually does fit in 31 bits.  This happens on
EBCDIC platforms, and sometimes when the overlong
malformation is also present.  The new name accurately
describes the situation in all cases.
The input sequence was malformed in that the first byte was a a UTF 8
continuation byte.
The input curlen(fR parameter was 0.
The input sequence was malformed in that there is some other sequence that
evaluates to the same code point, but that sequence is shorter than this one.

Until Unicode 3.1, it was legal for programs to accept this malformation, but
it was discovered that this created security issues.
The code point represented by the input UTF 8 sequence is for a Unicode
non character code point.
This bit is set only if the input flags(fR parameter contains either the
UTF8_DISALLOW_NONCHAR(fR or the UTF8_WARN_NONCHAR(fR flags.
The input sequence was malformed in that a non continuation type byte was found
in a position where only a continuation type one should be.
The input sequence was malformed in that it is for a code point that is not
representable in the number of bits available in an IV on the current platform.
The input sequence was malformed in that curlen(fR is smaller than required for
a complete sequence.  In other words, the input is for a partial character
sequence.
The input sequence was malformed in that it is for a non Unicode code point;
that is, one above the legal Unicode maximum.
This bit is set only if the input flags(fR parameter contains either the
UTF8_DISALLOW_SUPER(fR or the UTF8_WARN_SUPER(fR flags.
The input sequence was malformed in that it is for a  Unicode UTF 16 surrogate
code point.
This bit is set only if the input flags(fR parameter contains either the
UTF8_DISALLOW_SURROGATE(fR or the UTF8_WARN_SURROGATE(fR flags.
To do your own error handling, call this function with the UTF8_CHECK_ONLY(fR
flag to suppress any warnings, and then examine the Werrors return.
        UV      utf8n_to_uvchr_error(const U8 Ws, STRLEN curlen,
                                     STRLEN Wretlen,
                                     const U32 flags,
                                     U32 W errors)
utf8n_to_uvchr_msgs 8
NOTE: this function is experimental and may change or be
removed without notice.

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Most code should use utf8_to_uvchr_buf() rather than call this directly.

This function is for code that needs to know what the precise malformation(s)
are when an error is found, and wants the corresponding warning and/or error
messages to be returned to the caller rather than be displayed.  All messages
that would have been displayed if all lexcial warnings are enabled will be
returned.

It is just like "utf8n_to_uvchr_error" but it takes an extra parameter
placed after all the others, msgs(fR.  If this parameter is 0, this function
behaves identically to "utf8n_to_uvchr_error".  Otherwise, msgs(fR should
be a pointer to an AV W(fR variable, in which this function creates a new AV to
contain any appropriate messages.  The elements of the array are ordered so
that the first message that would have been displayed is in the 0th element,
and so on.  Each element is a hash with three key value pairs, as follows:
The text of the message as a SVpv(fR.
The warning category (or categories) packed into a SVuv(fR.
A single flag bit associated with this message, in a SVuv(fR.
The bit corresponds to some bit in the Werrors return value,
such as UTF8_GOT_LONG(fR.
It's important to note that specifying this parameter as non null will cause
any warnings this function would otherwise generate to be suppressed, and
instead be placed in Wmsgs.  The caller can check the lexical warnings state
(or not) when choosing what to do with the returned messages.

If the flag UTF8_CHECK_ONLY(fR is passed, no warnings are generated, and hence
no AV is created.

The caller, of course, is responsible for freeing any returned AV.
        UV      utf8n_to_uvchr_msgs(const U8 Ws, STRLEN curlen,
                                    STRLEN Wretlen,
                                    const U32 flags,
                                    U32 W errors, AV WW msgs)
utf8n_to_uvuni 8
Instead use utf8_to_uvchr_buf, or rarely, utf8n_to_uvchr.

This function was useful for code that wanted to handle both EBCDIC and
ASCII platforms with Unicode properties, but starting in Perl v5.20, the
distinctions between the platforms have mostly been made invisible to most
code, so this function is quite unlikely to be what you want.  If you do need
this precise functionality, use instead
NATIVE_TO_UNI(utf8_to_uvchr_buf(...))(fR
or NATIVE_TO_UNI(utf8n_to_uvchr(...))(fR.
        UV      utf8n_to_uvuni(const U8 Ws, STRLEN curlen,
                               STRLEN Wretlen, U32 flags)

UTF8SKIP 8
returns the number of bytes in the UTF 8 encoded character whose first (perhaps
only) byte is pointed to by s(fR.
        STRLEN  UTF8SKIP(charW s)

utf8_distance 8
Returns the number of UTF 8 characters between the UTF 8 pointers a(fR
and b(fR.

WARNING: use only if you WknowW that the pointers point inside the
same UTF 8 buffer.
        IV      utf8_distance(const U8 Wa, const U8 Wb)

utf8_hop 8
Return the UTF 8 pointer s(fR displaced by off(fR characters, either
forward or backward.

WARNING: do not use the following unless you WknowW off(fR is within
the UTF 8 data pointed to by s(fR WandW that on entry s(fR is aligned
on the first byte of character or just after the last byte of a character.
        U8W     utf8_hop(const U8 Ws, SSize_t off)

utf8_hop_back 8
Return the UTF 8 pointer s(fR displaced by up to off(fR characters,
backward.

off(fR must be non positive.

s(fR must be after or equal to start(fR.

When moving backward it will not move before start(fR.

Will not exceed this limit even if the string is not valid (s 1UTF 8.
        U8W     utf8_hop_back(const U8 Ws, SSize_t off,
                              const U8 Wstart)

utf8_hop_forward 8
Return the UTF 8 pointer s(fR displaced by up to off(fR characters,
forward.

off(fR must be non negative.

s(fR must be before or equal to end(fR.

When moving forward it will not move beyond end(fR.

Will not exceed this limit even if the string is not valid (s 1UTF 8.
        U8W     utf8_hop_forward(const U8 Ws, SSize_t off,
                                 const U8 Wend)

utf8_hop_safe 8
Return the UTF 8 pointer s(fR displaced by up to off(fR characters,
either forward or backward.

When moving backward it will not move before start(fR.

When moving forward it will not move beyond end(fR.

Will not exceed those limits even if the string is not valid (s 1UTF 8.
        U8W     utf8_hop_safe(const U8 Ws, SSize_t off,
                              const U8 Wstart, const U8 Wend)

UTF8_IS_INVARIANT 8
Evaluates to 1 if the byte c(fR represents the same character when encoded in
UTF 8 as when not; otherwise evaluates to 0.  UTF 8 invariant characters can be
copied as is when converting to/from UTF 8, saving time.

In spite of the name, this macro gives the correct result if the input string
from which c(fR comes is not encoded in UTF 8.

See "UVCHR_IS_INVARIANT" for checking if a UV is invariant.
        bool    UTF8_IS_INVARIANT(char c)

UTF8_IS_NONCHAR 8
Evaluates to non zero if the first few bytes of the string starting at s(fR and
looking no further than e   1(fR are well formed UTF 8 that represents one
of the Unicode non character code points; otherwise it evaluates to 0.  If
non zero, the value gives how many bytes starting at s(fR comprise the code
point's representation.
        bool    UTF8_IS_NONCHAR(const U8 Ws, const U8 We)

UTF8_IS_SUPER 8
Recall that Perl recognizes an extension to UTF 8 that can encode code
points larger than the ones defined by Unicode, which are 0..0x10FFFF.

This macro evaluates to non zero if the first few bytes of the string starting
at s(fR and looking no further than e   1(fR are from this UTF 8 extension;
otherwise it evaluates to 0.  If non zero, the value gives how many bytes
starting at s(fR comprise the code point's representation.

0 is returned if the bytes are not well formed extended UTF 8, or if they
represent a code point that cannot fit in a UV on the current platform.  Hence
this macro can give different results when run on a 64 bit word machine than on
one with a 32 bit word size.

Note that it is deprecated to have code points that are larger than what can
fit in an IV on the current machine.
        bool    UTF8_IS_SUPER(const U8 Ws, const U8 We)

UTF8_IS_SURROGATE 8
Evaluates to non zero if the first few bytes of the string starting at s(fR and
looking no further than e   1(fR are well formed UTF 8 that represents one
of the Unicode surrogate code points; otherwise it evaluates to 0.  If
non zero, the value gives how many bytes starting at s(fR comprise the code
point's representation.
        bool    UTF8_IS_SURROGATE(const U8 Ws, const U8 We)

utf8_length 8
Returns the number of characters in the sequence of UTF 8 encoded bytes starting
at s(fR and ending at the byte just before e(fR.  If <s> and <e> point to the
same place, it returns 0 with no warning raised.

If e < s(fR or if the scan would end up past e(fR, it raises a UTF8 warning
and returns the number of valid characters.
        STRLEN  utf8_length(const U8W s, const U8 We)

utf8_to_bytes 8
NOTE: this function is experimental and may change or be
removed without notice.

Converts a string "s" of length Wlenp from UTF 8 into native byte encoding.
Unlike bytes_to_utf8, this over writes the original string, and
updates Wlenp to contain the new length.
Returns zero on failure (leaving "s" unchanged) setting Wlenp to  1.

Upon successful return, the number of variants in the string can be computed by
having saved the value of Wlenp before the call, and subtracting the
after call value of Wlenp from it.

If you need a copy of the string, see bytes_from_utf8.
        U8W     utf8_to_bytes(U8 Ws, STRLEN Wlenp)

utf8_to_uvchr 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Returns the native code point of the first character in the string s(fR
which is assumed to be in UTF 8 encoding; retlen(fR will be set to the
length, in bytes, of that character.

Some, but not all, UTF 8 malformations are detected, and in fact, some
malformed input could cause reading beyond the end of the input buffer, which
is why this function is deprecated.  Use utf8_to_uvchr_buf instead.

If s(fR points to one of the detected malformations, and UTF8 warnings are
enabled, zero is returned and Wretlen is set (if retlen(fR isn't
NULL(fR) to  1.  If those warnings are off, the computed value if well defined (or
the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and Wretlen
is set (if retlen(fR isn't NULL) so that (s(fR + Wretlen) is the
next possible position in s(fR that could begin a non malformed character.
See utf8n_to_uvchr for details on when the REPLACEMENT CHARACTER is returned.
        UV      utf8_to_uvchr(const U8 Ws, STRLEN Wretlen)

utf8_to_uvchr_buf 8
Returns the native code point of the first character in the string s(fR which
is assumed to be in UTF 8 encoding; send(fR points to 1 beyond the end of s(fR.
Wretlen will be set to the length, in bytes, of that character.

If s(fR does not point to a well formed UTF 8 character and UTF8 warnings are
enabled, zero is returned and Wretlen is set (if retlen(fR isn't
NULL(fR) to  1.  If those warnings are off, the computed value, if well defined
(or the Unicode REPLACEMENT CHARACTER if not), is silently returned, and
Wretlen is set (if retlen(fR isn't NULL(fR) so that (s(fR + Wretlen) is
the next possible position in s(fR that could begin a non malformed character.
See utf8n_to_uvchr for details on when the REPLACEMENT CHARACTER is
returned.
        UV      utf8_to_uvchr_buf(const U8 Ws, const U8 Wsend,
                                  STRLEN Wretlen)

utf8_to_uvuni_buf 8
DEPRECATED!  It is planned to remove this function from a
future release of Perl.  Do not use it for new code; remove it from
existing code.

Only in very rare circumstances should code need to be dealing in Unicode
(as opposed to native) code points.  In those few cases, use
NATIVE_TO_UNI(utf8_to_uvchr_buf(...))(fR instead.  If you
are not absolutely sure this is one of those cases, then assume it isn't and
use plain utf8_to_uvchr_buf(fR instead.

Returns the Unicode (not native) code point of the first character in the
string s(fR which
is assumed to be in UTF 8 encoding; send(fR points to 1 beyond the end of s(fR.
retlen(fR will be set to the length, in bytes, of that character.

If s(fR does not point to a well formed UTF 8 character and UTF8 warnings are
enabled, zero is returned and Wretlen is set (if retlen(fR isn't
NULL) to  1.  If those warnings are off, the computed value if well defined (or
the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and Wretlen
is set (if retlen(fR isn't NULL) so that (s(fR + Wretlen) is the
next possible position in s(fR that could begin a non malformed character.
See utf8n_to_uvchr for details on when the REPLACEMENT CHARACTER is returned.
        UV      utf8_to_uvuni_buf(const U8 Ws, const U8 Wsend,
                                  STRLEN Wretlen)

UVCHR_IS_INVARIANT 8
Evaluates to 1 if the representation of code point cp(fR is the same whether or
not it is encoded in UTF 8; otherwise evaluates to 0.  UTF 8 invariant
characters can be copied as is when converting to/from UTF 8, saving time.
cp(fR is Unicode if above 255; otherwise is platform native.
        bool    UVCHR_IS_INVARIANT(UV cp)

UVCHR_SKIP 8
returns the number of bytes required to represent the code point cp(fR when
encoded as UTF 8.  cp(fR is a native (ASCII or EBCDIC) code point if less than
255; a Unicode code point otherwise.
        STRLEN  UVCHR_SKIP(UV cp)

uvchr_to_utf8 8
Adds the UTF 8 representation of the native code point uv(fR to the end
of the string d(fR; d(fR should have at least UVCHR_SKIP(uv)+1(fR (up to
UTF8_MAXBYTES+1(fR) free bytes available.  The return value is the pointer to
the byte after the end of the new character.  In other words,
    d = uvchr_to_utf8(d, uv);
is the recommended wide native character aware way of saying
    W(d++) = uv;
This function accepts any code point from 0..IV_MAX(fR as input.
IV_MAX(fR is typically 0x7FFF_FFFF in a 32 bit word.

It is possible to forbid or warn on non Unicode code points, or those that may
be problematic by using uvchr_to_utf8_flags.
        U8W     uvchr_to_utf8(U8 Wd, UV uv)

uvchr_to_utf8_flags 8
Adds the UTF 8 representation of the native code point uv(fR to the end
of the string d(fR; d(fR should have at least UVCHR_SKIP(uv)+1(fR (up to
UTF8_MAXBYTES+1(fR) free bytes available.  The return value is the pointer to
the byte after the end of the new character.  In other words,
    d = uvchr_to_utf8_flags(d, uv, flags);
or, in most cases,
    d = uvchr_to_utf8_flags(d, uv, 0);
This is the Unicode aware way of saying
    W(d++) = uv;
If flags(fR is 0, this function accepts any code point from 0..IV_MAX(fR as
input.  IV_MAX(fR is typically 0x7FFF_FFFF in a 32 bit word.

Specifying flags(fR can further restrict what is allowed and not warned on, as
follows:

If uv(fR is a Unicode surrogate code point and UNICODE_WARN_SURROGATE(fR is set,
the function will raise a warning, provided UTF8 warnings are enabled.  If
instead UNICODE_DISALLOW_SURROGATE(fR is set, the function will fail and return
NULL.  If both flags are set, the function will both warn and return NULL.

Similarly, the UNICODE_WARN_NONCHAR(fR and UNICODE_DISALLOW_NONCHAR(fR flags
affect how the function handles a Unicode non character.

And likewise, the UNICODE_WARN_SUPER(fR and UNICODE_DISALLOW_SUPER(fR flags
affect the handling of code points that are above the Unicode maximum of
0x10FFFF.  Languages other than Perl may not be able to accept files that
contain these.

The flag UNICODE_WARN_ILLEGAL_INTERCHANGE(fR selects all three of
the above WARN flags; and UNICODE_DISALLOW_ILLEGAL_INTERCHANGE(fR selects all
three DISALLOW flags.  UNICODE_DISALLOW_ILLEGAL_INTERCHANGE(fR restricts the
allowed inputs to the strict UTF 8 traditionally defined by Unicode.
Similarly, UNICODE_WARN_ILLEGAL_C9_INTERCHANGE(fR and
UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE(fR are shortcuts to select the
above Unicode and surrogate flags, but not the non character ones, as
defined in
Unicode Corrigendum #9 <http://www.unicode.org/versions/corrigendum9.html>.
See Noncharacter code points in perlunicode.

Extremely high code points were never specified in any standard, and require an
extension to UTF 8 to express, which Perl does.  It is likely that programs
written in something other than Perl would not be able to read files that
contain these; nor would Perl understand files written by something that uses a
different extension.  For these reasons, there is a separate set of flags that
can warn and/or disallow these extremely high code points, even if other
above Unicode ones are accepted.  They are the UNICODE_WARN_PERL_EXTENDED(fR
and UNICODE_DISALLOW_PERL_EXTENDED(fR flags.  For more information see
"UTF8_GOT_PERL_EXTENDED(fR".  Of course UNICODE_DISALLOW_SUPER(fR will
treat all above Unicode code points, including these, as malformations.  (Note
that the Unicode standard considers anything above 0x10FFFF to be illegal, but
there are standards predating it that allow up to 0x7FFF_FFFF (2WW31  1))

A somewhat misleadingly named synonym for UNICODE_WARN_PERL_EXTENDED(fR is
retained for backward compatibility: UNICODE_WARN_ABOVE_31_BIT(fR.  Similarly,
UNICODE_DISALLOW_ABOVE_31_BIT(fR is usable instead of the more accurately named
UNICODE_DISALLOW_PERL_EXTENDED(fR.  The names are misleading because on EBCDIC
platforms,these flags can apply to code points that actually do fit in 31 bits.
The new names accurately describe the situation in all cases.
        U8W     uvchr_to_utf8_flags(U8 Wd, UV uv, UV flags)

uvchr_to_utf8_flags_msgs 8
NOTE: this function is experimental and may change or be
removed without notice.

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.

Most code should use "uvchr_to_utf8_flags"()(fR rather than call this directly.

This function is for code that wants any warning and/or error messages to be
returned to the caller rather than be displayed.  All messages that would have
been displayed if all lexcial warnings are enabled will be returned.

It is just like "uvchr_to_utf8_flags" but it takes an extra parameter
placed after all the others, msgs(fR.  If this parameter is 0, this function
behaves identically to "uvchr_to_utf8_flags".  Otherwise, msgs(fR should
be a pointer to an HV W(fR variable, in which this function creates a new HV to
contain any appropriate messages.  The hash has three key value pairs, as
follows:
The text of the message as a SVpv(fR.
The warning category (or categories) packed into a SVuv(fR.
A single flag bit associated with this message, in a SVuv(fR.
The bit corresponds to some bit in the Werrors return value,
such as UNICODE_GOT_SURROGATE(fR.
It's important to note that specifying this parameter as non null will cause
any warnings this function would otherwise generate to be suppressed, and
instead be placed in Wmsgs.  The caller can check the lexical warnings state
(or not) when choosing what to do with the returned messages.

The caller, of course, is responsible for freeing any returned HV.
        U8W     uvchr_to_utf8_flags_msgs(U8 Wd, UV uv, UV flags,
                                         HV WW msgs)
uvoffuni_to_utf8_flags 8
THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Instead, Almost all code should use uvchr_to_utf8 or
uvchr_to_utf8_flags(fR.

This function is like them, but the input is a strict Unicode
(as opposed to native) code point.  Only in very rare circumstances should code
not be using the native code point.

For details, see the description for uvchr_to_utf8_flags.
        U8W     uvoffuni_to_utf8_flags(U8 Wd, UV uv,
                                       const UV flags)

uvuni_to_utf8_flags 8
Instead you almost certainly want to use uvchr_to_utf8 or
uvchr_to_utf8_flags.

This function is a deprecated synonym for uvoffuni_to_utf8_flags,
which itself, while not deprecated, should be used only in isolated
circumstances.  These functions were useful for code that wanted to handle
both EBCDIC and ASCII platforms with Unicode properties, but starting in Perl
v5.20, the distinctions between the platforms have mostly been made invisible
to most code, so this function is quite unlikely to be what you want.
        U8W     uvuni_to_utf8_flags(U8 Wd, UV uv, UV flags)

valid_utf8_to_uvchr 8
Like "utf8_to_uvchr_buf", but should only be called when it is known that
the next character in the input UTF 8 string s(fR is well formed (e.g.,
it passes "isUTF8_CHAR".  Surrogates, non character code points, and
non Unicode code points are allowed.
        UV      valid_utf8_to_uvchr(const U8 Ws, STRLEN Wretlen)
newXSproto 8
Used by xsubpp(fR to hook up XSUBs as Perl subs.  Adds Perl prototypes to
the subs.
XS_APIVERSION_BOOTCHECK 8
Macro to verify that the perl api version an XS module has been compiled against
matches the api version of the perl interpreter it's being loaded into.
                XS_APIVERSION_BOOTCHECK;

XS_VERSION 8
The version identifier for an XS module.  This is usually
handled automatically by ExtUtils::MakeMaker(fR.  See
"XS_VERSION_BOOTCHECK".
XS_VERSION_BOOTCHECK 8
Macro to verify that a PM module's $VERSION variable matches the XS
module's XS_VERSION(fR variable.  This is usually handled automatically by
xsubpp(fR.  See The VERSIONCHECK: Keyword in perlxs.
                XS_VERSION_BOOTCHECK;

Warning and Dieing

ckWARN 8
Returns a boolean as to whether or not warnings are enabled for the warning
category w(fR.  If the category is by default enabled even if not within the
scope of use warnings(fR, instead use the ckWARN_d macro.
        bool    ckWARN(U32 w)

ckWARN2 8
Like "ckWARN", but takes two warnings categories as input, and returns
TRUE if either is enabled.  If either category is by default enabled even if
not within the scope of use warnings(fR, instead use the ckWARN2_d
macro.  The categories must be completely independent, one may not be
subclassed from the other.
        bool    ckWARN2(U32 w1, U32 w2)

ckWARN3 8
Like "ckWARN2", but takes three warnings categories as input, and returns
TRUE if any is enabled.  If any of the categories is by default enabled even
if not within the scope of use warnings(fR, instead use the ckWARN3_d
macro.  The categories must be completely independent, one may not be
subclassed from any other.
        bool    ckWARN3(U32 w1, U32 w2, U32 w3)

ckWARN4 8
Like "ckWARN3", but takes four warnings categories as input, and returns
TRUE if any is enabled.  If any of the categories is by default enabled even
if not within the scope of use warnings(fR, instead use the ckWARN4_d
macro.  The categories must be completely independent, one may not be
subclassed from any other.
        bool    ckWARN4(U32 w1, U32 w2, U32 w3, U32 w4)

ckWARN_d 8
Like "ckWARN", but for use if and only if the warning category is by
default enabled even if not within the scope of use warnings(fR.
        bool    ckWARN_d(U32 w)

ckWARN2_d 8
Like "ckWARN2", but for use if and only if either warning category is by
default enabled even if not within the scope of use warnings(fR.
        bool    ckWARN2_d(U32 w1, U32 w2)

ckWARN3_d 8
Like "ckWARN3", but for use if and only if any of the warning categories
is by default enabled even if not within the scope of use warnings(fR.
        bool    ckWARN3_d(U32 w1, U32 w2, U32 w3)

ckWARN4_d 8
Like "ckWARN4", but for use if and only if any of the warning categories
is by default enabled even if not within the scope of use warnings(fR.
        bool    ckWARN4_d(U32 w1, U32 w2, U32 w3, U32 w4)

croak 8
This is an XS interface to Perl's die(fR function.

Take a sprintf style format pattern and argument list.  These are used to
generate a string message.  If the message does not end with a newline,
then it will be extended with some indication of the current location
in the code, as described for mess_sv.

The error message will be used as an exception, by default
returning control to the nearest enclosing eval(fR, but subject to
modification by a $SIG{__DIE__} handler.  In any case, the croak(fR
function never returns normally.

For historical reasons, if pat(fR is null then the contents of ERRSV(fR
($@) will be used as an error message or object instead of building an
error message from arguments.  If you want to throw a non string object,
or build an error message in an SV yourself, it is preferable to use
the croak_sv function, which does not involve clobbering ERRSV(fR.
        void    croak(const char Wpat, ...)

croak_no_modify 8
Exactly equivalent to Perl_croak(aTHX_ "%s", PL_no_modify)(fR, but generates
terser object code than using Perl_croak(fR.  Less code used on exception code
paths reduces CPU cache pressure.
        void    croak_no_modify()

croak_sv 8
This is an XS interface to Perl's die(fR function.

baseex(fR is the error message or object.  If it is a reference, it
will be used as is.  Otherwise it is used as a string, and if it does
not end with a newline then it will be extended with some indication of
the current location in the code, as described for mess_sv.

The error message or object will be used as an exception, by default
returning control to the nearest enclosing eval(fR, but subject to
modification by a $SIG{__DIE__} handler.  In any case, the croak_sv(fR
function never returns normally.

To die with a simple string message, the croak function may be
more convenient.
        void    croak_sv(SV Wbaseex)

die 8
Behaves the same as croak, except for the return type.
It should be used only where the OP W(fR return type is required.
The function never actually returns.
        OP W    die(const char Wpat, ...)

die_sv 8
Behaves the same as croak_sv, except for the return type.
It should be used only where the OP W(fR return type is required.
The function never actually returns.
        OP W    die_sv(SV Wbaseex)

vcroak 8
This is an XS interface to Perl's die(fR function.

pat(fR and args(fR are a sprintf style format pattern and encapsulated
argument list.  These are used to generate a string message.  If the
message does not end with a newline, then it will be extended with
some indication of the current location in the code, as described for
mess_sv.

The error message will be used as an exception, by default
returning control to the nearest enclosing eval(fR, but subject to
modification by a $SIG{__DIE__} handler.  In any case, the croak(fR
function never returns normally.

For historical reasons, if pat(fR is null then the contents of ERRSV(fR
($@) will be used as an error message or object instead of building an
error message from arguments.  If you want to throw a non string object,
or build an error message in an SV yourself, it is preferable to use
the croak_sv function, which does not involve clobbering ERRSV(fR.
        void    vcroak(const char Wpat, va_list Wargs)

vwarn 8
This is an XS interface to Perl's warn(fR function.

pat(fR and args(fR are a sprintf style format pattern and encapsulated
argument list.  These are used to generate a string message.  If the
message does not end with a newline, then it will be extended with
some indication of the current location in the code, as described for
mess_sv.

The error message or object will by default be written to standard error,
but this is subject to modification by a $SIG{__WARN__} handler.

Unlike with vcroak, pat(fR is not permitted to be null.
        void    vwarn(const char Wpat, va_list Wargs)

warn 8
This is an XS interface to Perl's warn(fR function.

Take a sprintf style format pattern and argument list.  These are used to
generate a string message.  If the message does not end with a newline,
then it will be extended with some indication of the current location
in the code, as described for mess_sv.

The error message or object will by default be written to standard error,
but this is subject to modification by a $SIG{__WARN__} handler.

Unlike with croak, pat(fR is not permitted to be null.
        void    warn(const char Wpat, ...)

warn_sv 8
This is an XS interface to Perl's warn(fR function.

baseex(fR is the error message or object.  If it is a reference, it
will be used as is.  Otherwise it is used as a string, and if it does
not end with a newline then it will be extended with some indication of
the current location in the code, as described for mess_sv.

The error message or object will by default be written to standard error,
but this is subject to modification by a $SIG{__WARN__} handler.

To warn with a simple string message, the warn function may be
more convenient.
        void    warn_sv(SV Wbaseex)

Undocumented functions

The following functions have been flagged as part of the public API,
but are currently undocumented.  Use them at your own risk, as the
interfaces are subject to change.  Functions that are not listed in this
document are not intended for public use, and should NOT be used under any
circumstances.

If you feel you need to use one of these functions, first send email to
perl5 porters@perl.org <mailto:perl5 porters@perl.org>.  It may be
that there is a good reason for the function not being documented, and it
should be removed from this list; or it may just be that no one has gotten
around to documenting it.  In the latter case, you will be asked to submit a
patch to document the function.  Once your patch is accepted, it will indicate
that the interface is stable (unless it is explicitly marked otherwise) and
usable by you.
GetVars 4
Gv_AMupdate 4
PerlIO_clearerr 4
PerlIO_close 4
PerlIO_context_layers 4
PerlIO_eof 4
PerlIO_error 4
PerlIO_fileno 4
PerlIO_fill 4
PerlIO_flush 4
PerlIO_get_base 4
PerlIO_get_bufsiz 4
PerlIO_get_cnt 4
PerlIO_get_ptr 4
PerlIO_read 4
PerlIO_seek 4
PerlIO_set_cnt 4
PerlIO_set_ptrcnt 4
PerlIO_setlinebuf 4
PerlIO_stderr 4
PerlIO_stdin 4
PerlIO_stdout 4
PerlIO_tell 4
PerlIO_unread 4
PerlIO_write 4
_variant_byte_number 4
amagic_call 4
amagic_deref_call 4
any_dup 4
atfork_lock 4
atfork_unlock 4
av_arylen_p 4
av_iter_p 4
block_gimme 4
call_atexit 4
call_list 4
calloc 4
cast_i32 4
cast_iv 4
cast_ulong 4
cast_uv 4
ck_warner 4
ck_warner_d 4
ckwarn 4
ckwarn_d 4
clear_defarray 4
clone_params_del 4
clone_params_new 4
croak_memory_wrap 4
croak_nocontext 4
csighandler 4
cx_dump 4
cx_dup 4
cxinc 4
deb 4
deb_nocontext 4
debop 4
debprofdump 4
debstack 4
debstackptrs 4
delimcpy 4
despatch_signals 4
die_nocontext 4
dirp_dup 4
do_aspawn 4
do_binmode 4
do_close 4
do_gv_dump 4
do_gvgv_dump 4
do_hv_dump 4
do_join 4
do_magic_dump 4
do_op_dump 4
do_open 4
do_open9 4
do_openn 4
do_pmop_dump 4
do_spawn 4
do_spawn_nowait 4
do_sprintf 4
do_sv_dump 4
doing_taint 4
doref 4
dounwind 4
dowantarray 4
dump_eval 4
dump_form 4
dump_indent 4
dump_mstats 4
dump_sub 4
dump_vindent 4
filter_add 4
filter_del 4
filter_read 4
foldEQ_latin1 4
form_nocontext 4
fp_dup 4
fprintf_nocontext 4
free_global_struct 4
free_tmps 4
get_context 4
get_mstats 4
get_op_descs 4
get_op_names 4
get_ppaddr 4
get_vtbl 4
gp_dup 4
gp_free 4
gp_ref 4
gv_AVadd 4
gv_HVadd 4
gv_IOadd 4
gv_SVadd 4
gv_add_by_type 4
gv_autoload4 4
gv_autoload_pv 4
gv_autoload_pvn 4
gv_autoload_sv 4
gv_check 4
gv_dump 4
gv_efullname 4
gv_efullname3 4
gv_efullname4 4
gv_fetchfile 4
gv_fetchfile_flags 4
gv_fetchpv 4
gv_fetchpvn_flags 4
gv_fetchsv 4
gv_fullname 4
gv_fullname3 4
gv_fullname4 4
gv_handler 4
gv_name_set 4
he_dup 4
hek_dup 4
hv_common 4
hv_common_key_len 4
hv_delayfree_ent 4
hv_eiter_p 4
hv_eiter_set 4
hv_free_ent 4
hv_ksplit 4
hv_name_set 4
hv_placeholders_get 4
hv_placeholders_set 4
hv_rand_set 4
hv_riter_p 4
hv_riter_set 4
ibcmp_utf8 4
init_global_struct 4
init_stacks 4
init_tm 4
instr 4
is_lvalue_sub 4
leave_scope 4
load_module_nocontext 4
magic_dump 4
malloc 4
markstack_grow 4
mess_nocontext 4
mfree 4
mg_dup 4
mg_size 4
mini_mktime 4
moreswitches 4
mro_get_from_name 4
mro_get_private_data 4
mro_set_mro 4
mro_set_private_data 4
my_atof 4
my_atof2 4
my_chsize 4
my_cxt_index 4
my_cxt_init 4
my_dirfd 4
my_exit 4
my_failure_exit 4
my_fflush_all 4
my_fork 4
my_lstat 4
my_pclose 4
my_popen 4
my_popen_list 4
my_setenv 4
my_socketpair 4
my_stat 4
my_strftime 4
newANONATTRSUB 4
newANONHASH 4
newANONLIST 4
newANONSUB 4
newATTRSUB 4
newAVREF 4
newCVREF 4
newFORM 4
newGVREF 4
newGVgen 4
newGVgen_flags 4
newHVREF 4
newHVhv 4
newIO 4
newMYSUB 4
newPROG 4
newRV 4
newSUB 4
newSVREF 4
newSVpvf_nocontext 4
new_stackinfo 4
op_refcnt_lock 4
op_refcnt_unlock 4
parser_dup 4
perl_alloc_using 4
perl_clone_using 4
pmop_dump 4
pop_scope 4
pregcomp 4
pregexec 4
pregfree 4
pregfree2 4
printf_nocontext 4
ptr_table_fetch 4
ptr_table_free 4
ptr_table_new 4
ptr_table_split 4
ptr_table_store 4
push_scope 4
re_compile 4
re_dup_guts 4
re_intuit_start 4
re_intuit_string 4
realloc 4
reentrant_free 4
reentrant_init 4
reentrant_retry 4
reentrant_size 4
ref 4
reg_named_buff_all 4
reg_named_buff_exists 4
reg_named_buff_fetch 4
reg_named_buff_firstkey 4
reg_named_buff_nextkey 4
reg_named_buff_scalar 4
regdump 4
regdupe_internal 4
regexec_flags 4
regfree_internal 4
reginitcolors 4
regnext 4
repeatcpy 4
rsignal 4
rsignal_state 4
runops_debug 4
runops_standard 4
rvpv_dup 4
safesyscalloc 4
safesysfree 4
safesysmalloc 4
safesysrealloc 4
save_I16 4
save_I32 4
save_I8 4
save_adelete 4
save_aelem 4
save_aelem_flags 4
save_alloc 4
save_aptr 4
save_ary 4
save_bool 4
save_clearsv 4
save_delete 4
save_destructor 4
save_destructor_x 4
save_freeop 4
save_freepv 4
save_freesv 4
save_generic_pvref 4
save_generic_svref 4
save_hash 4
save_hdelete 4
save_helem 4
save_helem_flags 4
save_hints 4
save_hptr 4
save_int 4
save_item 4
save_iv 4
save_list 4
save_long 4
save_mortalizesv 4
save_nogv 4
save_op 4
save_padsv_and_mortalize 4
save_pptr 4
save_pushi32ptr 4
save_pushptr 4
save_pushptrptr 4
save_re_context 4
save_scalar 4
save_set_svflags 4
save_shared_pvref 4
save_sptr 4
save_svref 4
save_vptr 4
savestack_grow 4
savestack_grow_cnt 4
scan_num 4
scan_vstring 4
seed 4
set_context 4
share_hek 4
si_dup 4
ss_dup 4
stack_grow 4
start_subparse 4
str_to_version 4
sv_2iv 4
sv_2pv 4
sv_2uv 4
sv_catpvf_mg_nocontext 4
sv_catpvf_nocontext 4
sv_dup 4
sv_dup_inc 4
sv_peek 4
sv_pvn_nomg 4
sv_setpvf_mg_nocontext 4
sv_setpvf_nocontext 4
sys_init 4
sys_init3 4
sys_intern_clear 4
sys_intern_dup 4
sys_intern_init 4
sys_term 4
taint_env 4
taint_proper 4
unlnk 4
unsharepvn 4
uvuni_to_utf8 4
vdeb 4
vform 4
vload_module 4
vnewSVpvf 4
vwarner 4
warn_nocontext 4
warner 4
warner_nocontext 4
whichsig 4
whichsig_pv 4
whichsig_pvn 4
whichsig_sv 4
AUTHORS

Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@corp.hp.com>.  It is now maintained as part of Perl itself.

With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.

API Listing originally by Dean Roehrich <roehrich@cray.com>.

Updated to be autogenerated from comments in the source by Benjamin Stuhl.
SEE ALSO

perlguts, perlxs, perlxstut, perlintern

