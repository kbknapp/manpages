
NAME
rofi - A window switcher, application launcher, ssh dialog and dmenu replacement

SYNOPSIS
rofi [ -show mode ]|[ -dmenu ]|[ -e msg ] [ CONFIGURATION ]

DESCRIPTION
rofi is an X11 pop-up window switcher, run dialog, dmenu replacement, and more. It focuses on being fast to use and have minimal distraction. It supports keyboard and mouse navigation, type to filter, tokenized search and more.

USAGE
rofi's main functionality is to assist in your workflow, allowing you to quickly switch between windows, start applications or log into a remote machine via ssh. There are different modi for different types of actions.
rofi can also function as (drop-in) replacement for dmenu(1).

Running rofi
To launch rofi directly in a certain mode, specify a mode with rofi -show <mode>. To show the run dialog:

 4
rofi -show run
 0

Emulating dmenu
rofi can emulate dmenu(1) (a dynamic menu for X) when launched with the -dmenu flag.
The website for dmenu can be found here http://tools.suckless.org/dmenu/.
rofi does not aim to be 100% compatible with dmenu. There are simply too many different flavors of dmenu. The idea is that the basic usage command-line flags are obeyed, theme-related flags are not. Besides, rofi offers some extended features (like multi-select, highlighting, message bar, extra key bindings).

Display Error message
rofi error dialog can also be called from the command line.

 4
rofi -e "my message"
 0
Markup support can be enabled, see CONFIGURATION options.

CONFIGURATION
There are currently three methods of setting configuration options (evaluated in order below):

o 4
System configuration file (for example /etc/rofi.conf).

o 4
Xresources: A method of storing key values in the Xserver. See here https://en.wikipedia.org/wiki/X_resources for more information.

o 4
Rasi theme file: The new theme format can be used to set configuration values.

o 4
Configuration File: This uses the same format as the Xresources file. By default it looks in XDG_USER_CONFIG_DIR/rofi/config, but can be overridden on commandline. By default XDG_USER_CONFIG_DIR defaults to $HOME/.config. (See rofi -h for current location). This is the recommended way of configuring rofi.

o 4
Command-line options: Arguments passed to rofi.

 0
TIP: To get a template config file run: rofi -dump-xresources > rofi-example.config. NOTE: In version 1.4.0 we support configuration in a new format, a config for this can be generated by: rofi -dump-config
The Xresources file expects options starting with rofi. followed by its name. An example to set the number of lines:

 4
rofi.lines: 10
 0
Command line options override settings from Xresources file. The same option set as argument â€” prefixed with a '-':

 4
rofi -lines 10
 0
To get a list of available options formatted as Xresources entries, run:

 4
rofi -dump-xresources
 0
The configuration system supports the following types:

o 4
string

o 4
integer (signed and unsigned)

o 4
char

o 4
Boolean

 0
Boolean options have a non-default command-line syntax. Example to enable option X:

 4
-X
 0
To disable option X:

 4
-no-X
 0
Below is a list of the most important options:

General
-help
The help option shows the full list of commandline options and the current set value. These include dynamic (run-time generated) options.
-dump-xresources
Dump the current active configuration in Xresources format to the command-line. This does not validate all passed values (for example, colors).
-threads num
Specify the number of threads rofi should use:

o 4
0: Autodetect the number of supported hardware threads.

o 4
1: Disable threading

o 4
2..N: Specify the maximum number of threads to use in the thread pool.

 0
-dmenu
Run rofi in dmenu mode. This allows for interactive scripts. In dmenu mode, rofi reads from STDIN, and output to STDOUT. A simple example, displaying three pre-defined options:

 4
echo -e "Option #1\nOption #2\nOption #3" | rofi -dmenu
 0
Or get the options from a script:

 4
~/my_script.sh | rofi -dmenu
 0
-show mode
Open rofi in a certain mode. Available modes are window, run, drun, ssh, combi. The special argument keys can be used to open a searchable list of supported key bindings (see KEY BINDINGS)
To show the run-dialog:

 4
rofi -show run
 0
-modi mode1,mode1
Specify an ordered, comma-separated list of modes to enable. Enabled modes can be changed at runtime. Default key is Ctrl+Tab. If no modes are specified, all modes will be enabled. To only show the run and ssh launcher:

 4
rofi -modi "run,ssh" -show run
 0
Custom modes can be added using the internal 'script' mode. Each mode has two parameters:

 4
<name>:<script>
 0
Example: Have a mode 'Workspaces' using the i3_switch_workspaces.sh script:

 4
rofi -modi "window,run,ssh,Workspaces:i3_switch_workspaces.sh" -show Workspaces
 0
Notes: The I3 Window manager does not like commas in the command when specifying an exec command. For that case '#' can be used as an separator.
-case-sensitive
Start in case sensitive mode. This option can be changed at run-time using the -kb-toggle-case-sensitivity key binding.
-cycle
Cycle through the result list. Default is 'true'.
-filter filter
Filter the list by setting text in input bar to filter
-config filename
Load an alternative configuration file.
-scroll-method method
Select the scrolling method. 0: Per page, 1: continuous.
-[no-]show-match
Show the indicator that shows what part of the string is matched.

 4
Default: *true*
 0
-no-lazy-grab
Disables lazy grab, this forces the keyboard being grabbed before gui is shown.
-no-plugins
Disable plugin loading.
-plugin-path directory
Specify the directory where rofi should look for plugins.
-show-icons
Show application icons in drun and window modes.
-icon-theme
Specify icon theme to be used. If not specified default theme from DE is used, Adwaita and gnome themes act as fallback themes.

Matching
-matching method
Specify the matching algorithm used. Current the following methods are supported.

o 4
normal: match the int string

o 4
regex: match a regex input

o 4
glob: match a glob pattern

o 4
fuzzy: do a fuzzy match

Default: normal

 0
Note: glob matching might be slow for larger lists
-tokenize
Tokenize the input.
-drun-match-fields field1,field2,...
When using drun, match only with the specified Desktop entry fields. The different fields are:

o 4
name: the application's name

o 4
generic: the application's generic name

o 4
exec: the application's executable

o 4
categories: the application's categories

o 4
comment: the application comment

o 4
all: all of the above

Default: name,generic,exec,categories

 0
-drun-display-format
The format string for the drun dialog:

o 4
name: the application's name

o 4
generic: the application's generic name

o 4
exec: the application's executable

o 4
categories: the application's categories

o 4
comment: the application comment

Default: {name} [({generic})]

 0
-[no-]drun-show-actions
Show actions present in the Desktop files.

 4
Default: false
 0
-window-match-fields field1,field2,...
When using window mode, match only with the specified fields. The different fields are:

o 4
title: window's title

o 4
class: window's class

o 4
role: window's role

o 4
name: window's name

o 4
desktop: window's current desktop

o 4
all: all of the above

Default: all

 0

Layout
Most of the following options are deprecated and should not be used. Please use the new theme format to customize rofi. More information about the new format can be found in the rofi-theme(5) manpage.
-lines
Maximum number of lines to show before scrolling.

 4
rofi -lines 25
 0
Default: 15
-columns
Number of columns to show before scrolling.

 4
rofi -columns 2
 0
Default: 1
-width [value]
Set width of menu. [value] is specified in percentage.

 4
rofi -width 60
 0
If [value] is larger then 100, size is set in pixels. Example to span a full-HD monitor:

 4
rofi -width 1920
 0
If [value] is negative, it tries to estimates a character width. To show 30 characters in a row:

 4
rofi -width -30
 0
Character width is a rough estimate, and might not be correct, but should work for most monospaced fonts.
Default: 50
-location
Specify where the window should be located. The numbers map to the following locations on screen:

 4
  1 2 3
  8 0 4
  7 6 5
 0
Default: 0
-fixed-num-lines
Keep a fixed number of visible lines (See the -lines option.)
-padding
Define the inner margin of the window.
Default: 5
-fullscreen
Use the full-screen height and width.
-sidebar-mode
Open in sidebar-mode. In this mode a list of all enabled modes is shown at the bottom. (See -modi option) To show sidebar, use:

 4
rofi -show run -sidebar-mode -lines 0
 0
-auto-select
When one entry is left, automatically select it.
-m num
-m name
-monitor num
-monitor name
Select monitor to display rofi on. It accepts as input: primary (if primary output is set), the xrandr output name, or integer number (in order of detection). Negative numbers are handled differently:

o 4
-1: the currently focused monitor.

o 4
-2: the currently focused window (that is, rofi will be displayed on top of the focused window).

o 4
-3: Position at mouse (overrides the location setting to get normal context menu behavior.)

o 4
-4: the monitor with the focused window.

o 4
-5: the monitor that shows the mouse pointer.

Default: -5

 0
See rofi -h output for the detected monitors, their position, and size.
-theme filename
Path to the new theme file format. This overrides the old theme settings.
-theme-str string
Allow theme parts to be specified on the command line as an override.
For example:

 4
rofi -theme-str '#window { fullscreen: true; }'
 0
This option can be specified multiple times.
-dpi number
Override the default DPI setting. If set to 0, it tries to auto-detect based on X11 screen size (similar to i3 and GTK). If set to 1, it tries to auto-detect based on the size of the monitor that rofi is displayed on (similar to latest Qt 5).

PATTERN setting
-terminal
Specify which terminal to start.

 4
rofi -terminal xterm
 0
Pattern: {terminal} Default: x-terminal-emulator
-ssh-client client
Override the used ssh client.
Pattern: {ssh-client} Default: ssh

SSH settings
-ssh-command cmd
Set the command to execute when starting a ssh session. The pattern {host} is replaced by the selected ssh entry.
Pattern: {ssh-client} Default: {terminal} -e {ssh-client} {host}
-parse-hosts
Parse the /etc/hosts file for entries.
Default: disabled
-parse-known-hosts -no-parse-known-hosts
Parse the ~/.ssh/known_hosts file for entries.
Default: enabled

Run settings
-run-command cmd
Set command ({cmd}) to execute when running an application. See PATTERN.
Default: {cmd}
-run-shell-command cmd
Set command to execute when running an application in a shell. See PATTERN.
Default: {terminal} -e {cmd}
-run-list-command cmd
If set, use an external tool to generate list of executable commands. Uses run-command.
Default: {cmd}

Window switcher settings
-window-format format
Format what is being displayed for windows.
format: {field[:len]}
field:

o 4
w: desktop name

o 4
t: title of window

o 4
n: name

o 4
r: role

o 4
c: class

 0
len: maximum field length (0 for auto-size). If length and window width are negative, field length is width - len. if length is positive, the entry will be truncated or padded to fill that length.
default: {w} {c} {t}
-window-command cmd
Set command to execute on selected window for a custom action. See PATTERN.
Default: "xkill -id {window}"

Combi settings
-combi-modi mode1,mode2
The modi to combine in combi mode. For syntax to see -modi. To get one merge view, of window,run, and ssh:

 4
rofi -show combi -combi-modi "window,run,ssh" -modi combi
 0
Notes: The I3 Window manager does not like commas in the command when specifying an exec command. For that case '#' can be used as a separator.

History and Sorting
-disable-history -no-disable-history (re-enable history)
Disable history
-sort to enable -no-sort to disable
Enable, disable sorting. This setting can be changed at runtime (see -kb-toggle-sort).
-sorting-method 'method' to specify the sorting method.
There are 2 sorting method:

o 4
levenshtein (Default)

o 4
fzf sorting.

 0

Dmenu specific
-sep separator
Separator for dmenu. Example: To show a list of 'a' to 'e' with '|' as a separator:

 4
echo "a|b|c|d|e" | rofi -sep '|' -dmenu
 0
-p prompt
Specify the prompt to show in dmenu mode. For example, select 'monkey', a,b,c,d, or e.

 4
echo "a|b|c|d|e" | rofi -sep '|' -dmenu -p "monkey:"
 0
Default: dmenu
-selected-row selected row
Select a certain row.
Default: 0
-l number of lines to show
Maximum number of lines the menu may show before scrolling.

 4
rofi -lines 25
 0
Default: 15
-i
Makes dmenu searches case-insensitive
-a X
Active row, mark row X as active (starting at 0). You can specify single element: -a 3 A range: -a 3-8 or a set of rows: -a 0,2 or any combination: -a 0,2-3,9
-u X
Urgent row, mark row X as urgent (starting at 0). You can specify single element: -u 3 A range: -u 3-8 or a set of rows: -u 0,2 or any combination: -u 0,2-3,9
-only-match
Only return a selected item, do not allow custom entry. This mode always returns an entry, or returns directly when no entries given.
-no-custom
Only return a selected item, do not allow custom entry. This mode returns directly when no entries given.
-format format
Allows the output of dmenu to be customized (N is the total number of input entries):

o 4
's' selected string

o 4
'i' index (0 - (N-1))

o 4
'd' index (1 - N)

o 4
'q' quote string

o 4
'f' filter string (user input)

o 4
'F' quoted filter string (user input)

 0
Default: 's'
-select string
Select first line that matches the given string
-mesg string
Add a message line below the filter entry box. Supports pango markup. For more information on supported markup see here https://developer.gnome.org/pango/stable/PangoMarkupFormat.html
-normal-window
Make rofi react like a normal application window. Useful for scripts like Clerk that are basically an application.
-dump
Dump the filtered list to stdout and quit. This can be used to get the list as rofi would filter it. Use together with -filter command.
-input file
Reads from file instead of stdin.
-password
Hide the input text. This should not be considered secure!
-markup-rows
Tell rofi that DMenu input is pango markup encoded, and should be rendered. See here https://developer.gnome.org/pango/stable/PangoMarkupFormat.html for details about pango markup.
-multi-select
Allow multiple lines to be selected. Adds a small selection indicator to the left of each entry.
-sync
Force rofi mode to first read all data from stdin before showing the selection window. This is original dmenu behavior.
Note: the default asynchronous mode will also be automatically disabled if used with conflicting options, such as -dump, -only-match or -auto-select.
-async-pre-read number
Reads the first 25 entries blocking, then switches to async mode. This makes it feel more 'snappy'.
default: 25

Message dialog
-e message
Pops up a message dialog (used internally for showing errors) with message. Message can be multi-line.

Other
-pid path
Make rofi create a pid file and check this on startup. The pid file prevents multiple rofi instances from running simultaneously. This is useful when running rofi from a key-binding daemon.
-fake-transparency
Enable fake transparency. This only works with transparent background color in the theme.
-fake-background
Select what to use as background for fake transparency. This can be 'background', 'screenshot' or a path to an image file (currently only supports png).
-display-{mode} string
Set the name to use for mode. This is used as prompt and in combi-browser.
-click-to-exit -no-click-to-exit
Click the mouse outside of the rofi window to exit.
Default: enabled

Debug
-no-config
Disable parsing of configuration. This runs rofi in stock mode.
-no-plugins
Disables the loading of plugins.
To get a trace with (lots of) debug information, set the following environment variable when executing rofi:

 4
G_MESSAGES_DEBUG=all
 0
The trace can be filtered by only outputting the relevant domains, for example:

 4
G_MESSAGES_DEBUG=Dialogs.DRun
 0
For more information on debugging, see the wiki https://github.com/DaveDavenport/rofi/wiki/Debugging%20Rofi

PATTERN
To launch commands (for example, when using the ssh launcher), the user can enter the used command-line. The following keys can be used that will be replaced at runtime:

o 4
{host}: the host to connect to

o 4
{terminal}: the configured terminal (see -terminal-emulator)

o 4
{ssh-client}: the configured ssh client (see -ssh-client)

o 4
{cmd}: the command to execute

o 4
{window}: the window ID of the selected window (in window-command)

 0

DMENU REPLACEMENT
If argv[0] (calling command) is dmenu, rofi will start in dmenu mode. This way it can be used as a drop-in replacement for dmenu. Just copy or symlink rofi to dmenu in $PATH.

 4
ln -s /usr/bin/rofi /usr/bin/dmenu
 0

THEMING
The theme format below describes the old (pre version 1.4) theme format. Please see rofi-theme(5) manpage for an updated manual.
The theme setup allows you to specify colors per state, similar to i3 Currently 3 states exist:

o 4
normal: normal row

o 4
urgent: highlighted row (urgent)

o 4
active: highlighted row (active)

 0
For each state, the following 5 colors must be set:

o 4
bg: background color row

o 4
fg: text color

o 4
bgalt: background color alternating row

o 4
hlfg: foreground color selected row

o 4
hlbg: background color selected row

 0
The window background and border color should be specified separately. The key color-window contains a tuple background,border,separator. An example for Xresources file:

 4
! State:           'bg',     'fg',     'bgalt',  'hlbg',   'hlfg'
rofi.color-normal: #fdf6e3,  #002b36,  #eee8d5,  #586e75,  #eee8d5
rofi.color-urgent: #fdf6e3,  #dc322f,  #eee8d5,  #dc322f,  #fdf6e3
rofi.color-active: #fdf6e3,  #268bd2,  #eee8d5,  #268bd2,  #fdf6e3

!                  'background', 'border', 'separator'
rofi.color-window: #fdf6e3,      #002b36,  #002b36
 0
Same settings can also be specified on command-line:

 4
rofi -color-normal "#fdf6e3,#002b36,#eee8d5,#586e75,#eee8d5"
 0

COLORS
RGB colors can be specified by either their X11 name or hexadecimal notation. For example:

 4
white
 0
Or:

 4
#FFFFFF
 0
ARGB colors are also supported. These can be used to create a transparent window if (1) your Xserver supports TrueColor, and (2) you are running a composite manager. For example: argb:FF444444
Or:

 4
#FF444444
 0
The first two fields specify the alpha level. This determines the amount of transparency (00 everything, FF nothing). The other fields represent the actual color, in hex.
Transparency can be used within rofi, for example if the selected background color is 50% transparent, the background color of the window will be visible through it.

KEY BINDINGS
rofi has the following key bindings:

o 4
Ctrl-v, Insert: Paste from clipboard

o 4
Ctrl-Shift-v, Shift-Insert: Paste primary selection

o 4
Ctrl-u: Clear the line

o 4
Ctrl-a: Beginning of line

o 4
Ctrl-e: End of line

o 4
Ctrl-f, Right: Forward one character

o 4
Alt-f, Ctrl-Right: Forward one word

o 4
Ctrl-b, Left: Back one character

o 4
Alt-b, Ctrl-Left: Back one word

o 4
Ctrl-d, Delete: Delete character

o 4
Ctrl-Alt-d: Delete word

o 4
Ctrl-h, Backspace, Shift-Backspace: Backspace (delete previous character)

o 4
Ctrl-Alt-h: Delete previous word

o 4
Ctrl-j,Ctrl-m,Enter: Accept entry

o 4
Ctrl-n,Down: Select next entry

o 4
Ctrl-p,Up: Select previous entry

o 4
Page Up: Go to previous page

o 4
Page Down: Go to next page

o 4
Ctrl-Page Up: Go to previous column

o 4
Ctrl-Page Down: Go to next column

o 4
Ctrl-Enter: Use entered text as a command (in ssh/run modi)

o 4
Shift-Enter: Launch the application in a terminal (in run mode)

o 4
Shift-Enter: Return the selected entry and move to the next item while keeping rofi open. (in dmenu)

o 4
Shift-Right: Switch to the next modi. The list can be customized with the -switchers argument.

o 4
Shift-Left: Switch to the previous modi. The list can be customized with the -switchers argument.

o 4
Ctrl-Tab: Switch to the next modi. The list can be customized with the -switchers argument.

o 4
Ctrl-Shift-Tab: Switch to the previous modi. The list can be customized with the -switchers argument.

o 4
Ctrl-space: Set selected item as input text.

o 4
Shift-Del: Delete entry from history.

o 4
grave: Toggle case sensitivity.

o 4
Alt-grave: Toggle sorting.

o 4
Alt-Shift-S: Take a screenshot and store it in the Pictures directory.

 0
To get a full list of key bindings on the commandline, see rofi -h. The options starting with -kb are keybindings. Key bindings can be modified using the configuration systems. To get a searchable list of key bindings, run rofi -show keys.
A key binding starting with ! will act when all keys have been released.

Available Modi

Window
Show a list of all the windows and allow switching between them. Pressing the delete-entry binding (shift-delete) will close the window. Pressing the accept-custom binding (control-enter or shift-enter) will run a command on the window. (See option window-command );

WindowCD
Shows a list of the windows on the current desktop and allows switching between them. Pressing the delete-entry binding (shift-delete) will kill the window. Pressing the accept-custom binding (control-enter or shift-enter) will run a command on the window. (See option window-command );

Run
Shows a list of executables in $PATH and can launch them (optional in a terminal). Pressing the delete-entry binding (shift-delete) will remove this entry from the run history. Pressing the accept-custom binding (control-enter or shift-enter) will run the command in a terminal.

DRun
Same as the run launches, but the list is created from the installed desktop files. It automatically launches them in a terminal if specified in the Desktop File. Pressing the delete-entry binding (shift-delete) will remove this entry from the run history. Pressing the accept-custom binding (control-enter or shift-enter) with custom input (no entry matching) will run the command in a terminal.

SSH
Shows a list of SSH targets based on your ssh config file, and allows to quickly ssh into them.

Keys
Shows a searchable list of key bindings.

Script
Allows custom scripted Modi to be added.

FAQ

The text in the window switcher is not nicely lined out.
Try using a mono-space font.

The window is completely black.
Check quotes used on the commandline: you might have used â€œ ("smart quotes") instead of " ("machine quotes").

What does the icon in the top right show?
The indicator shows:

 4
` ` Case insensitive and no sorting.
`-` Case sensitivity enabled, no sorting.
`+` Case insensitive and Sorting enabled
`Â±` Sorting and Case sensitivity enabled"
 0

EXAMPLES
Some basic usage examples of rofi:
Show the run dialog:

 4
rofi -modi run -show run
 0
Show the the run dialog, and allow switching to Desktop File run dialog (drun):

 4
rofi -modi run,drun -show run
 0
Combine the run and Desktop File run dialog (drun):

 4
rofi -modi combi -show combi -combi-modi run,drun
 0
Combine the run and Desktop File run dialog (drun), and allow switching to window switcher:

 4
rofi -modi combi,window -show combi -combi-modi run,drun
 0
Run rofi full monitor width at the top of the monitor like a dropdown menu:

 4
rofi -show run -width 100 -location 1 -lines 5 -bw 2 -yoffset -2
 0
Get a colored list of available wi-fi networks:

 4
tty-pipe nmcli device wifi | out2html -p | rofi -dmenu -markup-rows
 0
Pop up a text message claiming that this is the end:

 4
rofi -e "This is the end"
 0
Pop up a text message in red, bold font claiming that this is still the end:

 4
rofi -e "<span color='red'><b>This is still the end</b></span>" -markup
 0
Show all key bindings:

 4
rofi -show keys
 0
Use qalc to get a simple calculator in rofi:

 4
 rofi -show calc -modi "calc:qalc +u8 -nocurrencies"
 0

i3
In i3 http://i3wm.org/ you want to bind rofi to be launched on key release. Otherwise, it cannot grab the keyboard. See also the i3 manual http://i3wm.org/docs/userguide.html:
Some tools (such as import or xdotool) might be unable to run upon a KeyPress event, because the keyboard/pointer is still grabbed. For these situations, the --release flag can be used, as it will execute the command after the keys have been released.

LICENSE
MIT/X11

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
WEBSITE
rofi website can be found here https://davedavenport.github.io/rofi/

SUPPORT
rofi support can be obtained here irc://irc.freenode.net/#rofi (#rofi on irc.freenode.net), or via the forum https://reddit.com/r/qtools//

DEBUGGING
Please see this https://github.com/DaveDavenport/rofi/wiki/Debugging%20Rofi wiki entry.

ISSUE TRACKER
rofi issue tracker can be found here https://github.com/DaveDavenport/rofi/issues
When creating an issue, please read this https://github.com/DaveDavenport/rofi/blob/master/.github/CONTRIBUTING.md first.

SEE ALSO
rofi-sensible-terminal(1), dmenu(1), rofi-theme(5), rofi-theme-selector(1)

AUTHOR
Qball Cow qball@gmpclient.org
Rasmus Steinke rasi@xssn.at
Quentin Glidic sardemff7+rofi@sardemff7.net
Original code based on work by: Sean Pringle sean.pringle@gmail.com
For a full list of authors, check the AUTHORS file.

