
ssh-agent is a program to hold private keys used for public key authentication
(RSA, DSA, ECDSA, Ed25519).
ssh-agent is usually started in the beginning of an X-session or a login session, and
all other windows or programs are started as clients to the ssh-agent
program.
Through use of environment variables the agent can be located
and automatically used for authentication when logging in to other
machines using
The agent initially does not have any private keys.
Keys are added using

(see

in

for details)
or

Multiple identities may be stored in
ssh-agent concurrently and

will automatically use them if present.

is also used to remove keys from
ssh-agent and to query the keys that are held in one.

The options are as follows:
Bind the agent to the

socket

The default is
Generate C-shell commands on

This is the default if

looks like it's a csh style of shell.

Foreground mode.
When this option is specified
ssh-agent will not fork.

Debug mode.
When this option is specified
ssh-agent will not fork and will write debug information to standard error.

Specifies the hash algorithm used when displaying key fingerprints.
Valid options are:

and

The default is
Kill the current agent (given by the

environment variable).

Specify a pattern-list of acceptable paths for PKCS#11 shared libraries
that may be added using the

option to

The default is to allow loading PKCS#11 libraries from

PKCS#11 libraries that do not match the whitelist will be refused.
See PATTERNS in

for a description of pattern-list syntax.

Generate Bourne shell commands on

This is the default if

does not look like it's a csh style of shell.

Set a default value for the maximum lifetime of identities added to the agent.
The lifetime may be specified in seconds or in a time format specified in

A lifetime specified for an identity with

overrides this value.
Without this option the default maximum lifetime is forever.
If a command line is given, this is executed as a subprocess of the agent.
When the command dies, so does the agent.

The idea is that the agent is run in the user's local PC, laptop, or
terminal.
Authentication data need not be stored on any other
machine, and authentication passphrases never go over the network.
However, the connection to the agent is forwarded over SSH
remote logins, and the user can thus use the privileges given by the
identities anywhere in the network in a secure way.

There are two main ways to get an agent set up:
The first is that the agent starts a new subcommand into which some environment
variables are exported, eg

The second is that the agent prints the needed shell commands (either

or

syntax can be generated) which can be evaluated in the calling shell, eg

for Bourne-type shells such as

or

and

for

and derivatives.

Later

looks at these variables and uses them to establish a connection to the agent.

The agent will never send a private key over its request channel.
Instead, operations that require a private key will be performed
by the agent, and the result will be returned to the requester.
This way, private keys are not exposed to clients using the agent.

A

socket is created and the name of this socket is stored in the

environment
variable.
The socket is made accessible only to the current user.
This method is easily abused by root or another instance of the same
user.

The

environment variable holds the agent's process ID.

The agent exits automatically when the command given on the command
line terminates.
sockets used to contain the connection to the authentication agent.
These sockets should only be readable by the owner.
The sockets should get automatically removed when the agent exits.
OpenSSH is a derivative of the original and free ssh 1.2.12 release by
and

removed many bugs, re-added newer features and created OpenSSH.

contributed the support for SSH protocol versions 1.5 and 2.0.

