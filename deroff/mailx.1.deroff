
  .ds str-Lb-libterminfo Terminal Information Library (libterminfo, -lterminfo)
S-nail (\%MailBackward incompatibility has to be expected -

will use

rules, for example, and shell metacharacters will become meaningful.
Many old-style commands accept new syntax via

one of the

New and old behaviour is flagged [v15-compat]
one of the many

will choose new behaviour when applicable; when set with value,

is default behaviour.
[Obsolete]
or

enables obsoletion warnings.
\%Mailreceiving mail.
It is intended to provide the functionality of the POSIX

command, but is MIME capable and optionally offers extensions for
line editing, S/MIME, SMTP and POP3, among others.
\%Mailthe user to deal with them in any order.
It offers many

and

for manipulating messages and sending mail.
It provides the user simple editing capabilities to ease the composition
of outgoing messages, and increasingly powerful and reliable
non-interactive scripting capabilities.
Explicitly control which of the

shall be

d (loaded): if the letter

is (case-insensitively) part of the

then the system wide

is sourced, likewise the letter

controls sourcing of the user's personal

file, whereas the letters

and

explicitly forbid sourcing of any resource files.
Scripts should use this option: to avoid environmental noise they should

from any configuration and create a script-specific environment, setting
any of the desired

via

and running configurating commands via

This option overrides
Executes an

command for the given user email account

after program startup is complete (all resource files are loaded, any

setting is being established, but

commands have not been evaluated yet).
Being a special incarnation of

macros for the purpose of bundling longer-lived

tings, activating such an email account also switches to the accounts
(most likely the

If the operation fails the program will exit if it is used
non-interactively, or if any of

or

are set.
  Fl Fl attach Ns =..
Attach

to the message (for compose mode opportunities refer to

and
(also see

will be performed, except that shell variables are not expanded.
Shall

not be accessible but contain a

character, then anything before the last

will be used as the filename, anything thereafter as a character set
specification.

If an input character set is specified,

but no output character set, then the given input character set is fixed
as-is, and no conversion will be applied;
giving the empty string or the special string hyphen-minus

will be treated as if

has been specified (the default).

If an output character set has also been given then the conversion will
be performed exactly as specified and on-the-fly, not considering the
file type and content.
As an exception the empty string or hyphen-minus

select the default conversion algorithm (see

no conversion is performed on-the-fly,

and its contents will be MIME-classified

Only this mode is supported without support for character set conversions

does not mention
([Obsolete]line-buffered input even in batch mode enable batch mode via
Send a blind carbon copy to recipient

if the

ting of

one of the

allows; the
flag is supported.
The option may be used multiple times.
Also see the section
Create a custom header which persists for an entire session.
A custom header consists of the field name followed by a colon

and the field content body, e.g.,

Standard header field names cannot be overwritten by custom headers.
Runtime adjustable custom headers are available via the variable

and in compose mode

one of the

as well as

are the most flexible and powerful options to manage message headers.
This option may be used multiple times.
Just like

except it places the argument in the list of carbon copies.
([Option]
Almost enable a sandbox mode with the internal variable

the same can be achieved via

or
and thus discard messages with an empty message part body.
Just check if mail is present (in the system

or the one specified via

if yes, return an exit status of zero, a non-zero value otherwise.
To restrict the set of mails to consider in this evaluation a message
specification can be added with the option
Save the message to send in a file named after the local part of the
first recipient's address (instead of in
Read in the contents of the user's
(or the specified file) for processing;
when \%Mail(but be aware of the

option).
The optional

argument will undergo some special

(as via

Note that

is not an argument to the flag

but is instead taken from the command line after option processing has
been completed.
In order to use a

that starts with a hyphen-minus, prefix with a relative path, as in
Display a summary of

for the given

(depending on
or

or as specified via

A configurable summary view is available via the option

This mode does not honour
Show a brief usage summary; use

for a list long options.
to ignore tty interrupt signals.
Display a summary of

of all messages that match the given

in the

found by the same algorithm used by

then exit.
See the section

for the format of

This mode does not honour
If the

option has been given in addition no header summary is produced,
but \%Mail
matched any messages

or not

note that any verbose output is suppressed in this mode and must instead
be enabled explicitly (e.g., by using the option
Special send mode that will flag standard input with the MIME

set to the given known
and use it as the main message body.
 Using this option will bypass processing of

and

Also see
Special send mode that will MIME classify the specified

and use it as the main message body.
 Using this option will bypass processing of

and

Also see
inhibit the initial display of message headers when reading mail or
editing a mailbox

by calling

for the internal variable
Standard flag that inhibits reading the system wide

upon startup.
The option

allows more control over the startup sequence; also see
Special send mode that will initialize the message body with the
contents of the specified

which may be standard input

only in non-interactive context.
Also see
Any mailbox

aka

opened will be in read-only mode.
Whereas the source address that appears in the

header of a message (or in the

header if the former contains multiple addresses) is honoured by the
built-in SMTP transport, it is not used by a file-based

(Mail-Transfer-Agent) for the RFC 5321 reverse-path used for relaying
and delegating a message to its destination(s), for delivery errors
etc., but it instead uses the local identity of the initiating user.

When this command line option is used the given single addressee

will be assigned to the internal variable

but in addition the command line option

will be passed to a file-based

whenever a message is sent.
Shall

include a user name the address components will be separated and
the name part will be passed to a file-based

individually via

Even though not a recipient the
flag is supported.

If an empty string is passed as

then the content of the variable

(or, if that contains multiple addresses,

will be evaluated and used for this purpose whenever the file-based

is contacted.
By default, without

that is, neither

nor

command line options are used when contacting a file-based MTA, unless
this automatic deduction is enforced by

ing the internal variable
Remarks: many default installations and sites disallow overriding the
local user identity like this unless either the MTA has been configured
accordingly or the user is member of a group with special privileges.
Passing an invalid address will cause an error.
(or, with a prefix string

as documented in
iable and optionally assign

if supported;  the entire expression is evaluated as if specified
within dollar-single-quotes (see

if the internal variable

is set.
If the operation fails the program will exit if any of

or

are set.
Settings established via

cannot be changed from within

or an account switch initiated by

They will become mutable again before commands registered via

are executed.
Specify the subject of the message to be sent.
Newline (NL) and carriage-return (CR) bytes are invalid and will be
normalized to space (SP) characters.
Add

to the list of receivers targeted by

for now supported are only
and

Field and body (address) are separated by a colon

and optionally blank (space, tabulator) characters.
The
flag is supported.

is parsed like a message header address line, as if it would be part of
a template message fed in via

and the same modifier suffix is supported.
This option may be used multiple times.
The message given (on standard input) is expected to contain, separated
from the message body by an empty line, one or multiple message headers.
Headers can span multiple consecutive lines if follow lines start with
any amount of whitespace.
A line starting with the number sign

in the first column is ignored.
Message recipients can be given via the message headers
(the

modifier enforces treatment as a single addressee, e.g.,

or

they will be added to any recipients specified on the command line,
and are likewise subject to

validity checks.
If a message subject is specified via

then it will be used in favour of one given on the command line.

More optional headers are

(possibly overriding
and / or option
and

by default created automatically dependent on message context, will
be used if specified (a special address massage will however still occur
for the latter).
Any other custom header field (also see
and

is passed through entirely
unchanged, and in conjunction with the options

or

it is possible to embed

Also see
Initially read the
of

appropriate privileges presumed; effectively identical to
Show \%Mail
and exit.
The command

will also show the list of
ting the internal variable

enables display of some informational context messages.
Using it twice increases the level of verbosity.
Add the given (or multiple for a multiline argument)

to a list of commands to be executed before normal operation starts.
The commands will be evaluated as a unit, just as via

Correlates with

and
Add the given (or multiple for a multiline argument)

to a list of commands to be executed after normal operation has started.
The commands will be evaluated successively in the given order, and as
if given on the program's standard input.
In conjunction with

they will be evaluated after the template mail has been fully read.
Enable

in compose mode even in non-interactive use cases.
This can be used to, e.g., automatically format the composed message
text before sending the message:

$ ( echo 'line    one. Word.     Word2.';\
    echo '~| /usr/bin/fmt -tuw66' ) |\
  LC_ALL=C \%mail
Enables batch mode: standard input is made line buffered, the complete
set of (interactive) commands is available, processing of

is enabled in compose mode, and diverse

are adjusted for batch necessities, exactly as if done via
as well as
and

(the latter three to

Also, the values of

and

are looked up, and acted upon.
The following prepares an email message in a batched dry run:

$ LC_ALL=C printf 'm bob\n~s ubject\nText\n~.\nx\n' |\
  LC_ALL=C \%mail
This flag forces termination of option processing in order to prevent

(attacks).
It also forcefully puts \%Mail
All given

arguments and all receivers established via

and

as well as

are subject to the checks established by

one of the

they all support the flag

If the setting of

allows their recognition all

arguments given at the end of the command line after a

separator will be passed through to a file-based

(Mail-Transfer-Agent) and persist for the entire session.

constraints do not apply to the content of
\%Mail
Mail, itself a successor to the Research

mail which

according to

It thus represents the user side of the

mail system, whereas the system side (Mail-Transfer-Agent, MTA) was
traditionally taken by

and most MTAs provide a binary of this name for compatibility purposes.
If the [Option]
is included in the

of \%Maildelivery.

Because \%Mail
it is likely that some configuration settings have to be adjusted before
using it is a smooth experience.
(Rather complete configuration examples can be found in the section

The provided global

(one of the

template bends those standard imposed settings of the

a bit towards more user friendliness and safety, however.

For example, it
and

in order to suppress the automatic moving of messages to the
that would otherwise occur (see

and

to not remove empty system MBOX mailbox files (or all empty such files if
mode has been enabled) to avoid mangling of file permissions when files
eventually get recreated.

It also enables

in order to synchronize \%Mail
when sending mails.
It

s

to enter interactive startup even if the initial mailbox is empty,

to allow editing of headers as well as

to not strip down addresses in compose mode, and

to include the message that is being responded to when

ing, which is indented by an

that also deviates from standard imposed settings.

is fully enabled, too.

Some random remarks.
The file mode creation mask can be managed explicitly via the variable

Files and shell pipe output can be

d for evaluation, also during startup from within the
To send a message to one or more people, using a local or built-in

(Mail-Transfer-Agent) transport to actually deliver the generated mail
message, \%Mailpeople to whom the mail will be sent, and the command line options

and

can be used to add (blind) carbon copy receivers:

# Via sendmail(1)
$ \%mail
# But... try it in an isolated dry-run mode (-d) first
$ LC_ALL=C \%mail   -b bcc@exam.ple -c cc@exam.ple \
   -Sfullnames -. \
   '(Lovely) Bob <bob@exam.ple>' eric@exam.ple

# With SMTP
$ LC_ALL=C \%mail    -S mta=smtps://mylogin@exam.ple:465 -Ssmtp-auth=none \
    -S from=scriptreply@exam.ple \
    -a /etc/mail.rc \
    -. eric@exam.ple < /tmp/letter.txt
If standard input is a terminal rather than the message to be sent,
the user is expected to type in the message contents.
In this compose mode \%Mail
special - these are so-called

which can be used to read in files, process shell commands, add and edit
attachments and more; e.g.,

or

will start the

text

respectively, to revise the message in its current state,

allows editing of the most important message headers, with the potent

custom headers can be created, for example (more specifically than with

and

[Option]
gives an overview of most other available command escapes.

The command escape

(see there) will call hooks, insert automatic injections and receivers,
leave compose mode and send the message once it is completed.
Aborting letter composition is possible with either of

or

the latter of which will save the message in the file denoted by

unless

is set.
And unless

is set the effect of

can also be achieved by typing end-of-transmission (EOT) via
at the beginning of an empty line, and

is always reachable by typing end-of-text (ETX) twice via
A number of

and

can be used to alter default behavior.
E.g., messages are sent asynchronously, without supervision, unless the
internal variable

is set, therefore send errors will not be recognizable until then.

ting (also via
will automatically startup an editor when compose mode is entered, and
editing of headers additionally to plain body content can be enabled via

 some, but not all headers can be created, edited or deleted in an
editor, then.

and

will cause the user to be prompted actively for (blind) carbon-copy
recipients, respectively, and (the default)

will request confirmation whether the message shall be sent.

The envelope sender address is defined by

explicitly defining an originating

may be desirable, especially with the built-in SMTP Mail-Transfer-Agent
for outgoing message and MIME part content are configurable via

whereas input data is assumed to be in

Message data will be passed over the wire in a

MIME parts aka attachments need to be assigned a

usually taken out of

Saving a copy of sent messages in a

mailbox may be desirable - as for most mailbox

targets the value will undergo

Some introductional

or

sandbox dry-run tests will prove correctness.

Message recipients (as specified on the command line or defined in
or

these support the

modifier to enforce treatment as a single addressee, e.g.,

are subject to

filtering, and may not only be email addressees but can also be names of
mailboxes and even complete shell command pipe specifications.
If the variable

is not set then only network addresses (see

for a description of mail addresses) and plain user names (including MTA
aliases) may be used, other types will be filtered out, giving a warning
message.
A network address that contains no domain-, but only a valid local user

in angle brackets will be automatically expanded to a valid address when

is set to a non-empty value; setting it to the empty value instructs
\%Mail
will perform the necessary expansion.
The command

may help to generate standard compliant network addresses.

If the variable

is set then an extended set of recipient addresses will be accepted:
Any name that starts with a vertical bar

character specifies a command pipe - the command string following the

is executed and the message is sent to its standard input;
Likewise, any name that consists only of hyphen-minus

or starts with the character solidus

or the character sequence dot solidus

is treated as a file, regardless of the remaining content.
Any other name which contains a commercial at

character is a network address;
Any other name which starts with a plus sign

character is a mailbox name;
Any other name which contains a solidus

character but no exclamation mark

or percent sign

character before is also a mailbox name;
What remains is treated as a network address.

$ echo bla | \%mail$ echo bla | \%mail$ echo safe | LC_ALL=C \
    \%mail      --set mime-force-sendout \
      -Sexpandaddr=fail,-all,+addr,failinvaddr -s test \
      -. bob@exam.ple
To create file-carbon-copies the special recipient header

may be used as often as desired.
Its entire value (or body in standard terms) is interpreted as a

target, after having been subject to

Beside using the command escape

(to create a

header) this is the only way to create a file-carbon-copy without
introducing an ambiguity regarding the interpretation of the address,
e.g., to use file names with leading vertical bars or commercial ats.
Like all other recipients

is subject to the checks of

Any local file and pipe command addressee honours the setting of
It is possible to create personal distribution lists via the

command, so that, for instance, the user can send mail to

and have it go to a group of people.
Different to the alias mechanism of a local

which is often tracked in a file

documented in

and the names of which are subject to the

constraint of

personal aliases will be expanded by \%MailThey are thus a convenient alternative to specifying each addressee by
itself, correlate with the active set of

and are subject to

filtering.

? alias  cohorts  bill jkf mark kridle@ucbcory ~/cohorts.mbox
? alias  mark  mark@exam.ple
For the purpose of arranging a complete environment of settings that can
be switched to with a single command or command line option there are

Alternatively it is also possible to use a flat configuration, making use
of so-called variable chains which automatically pick

or

context-dependent variable variants: for example addressing

would find
and

in order.
See

and
The compose mode hooks

and

may be set to

d macros and provide reliable and increasingly powerful mechanisms to
perform automated message adjustments dependent on message context,
for example addition of message signatures

or creation of additional receiver lists (also by setting

To achieve that the command

may be used in order to query and adjust status of message(s).
The splice hook can also make use of

( The compose mode hooks work for

and variants;

and

only provide the hooks

and

which are pretty restricted due to the nature of the operation.)

To avoid environmental noise scripts should

\%Mailenvironment, ideally with the command line options

to disable any configuration file in conjunction with repetitions of

to specify variables:

$ env LC_ALL=C \%mail    -Sv15-compat -Ssendwait \
    -Sttycharset=utf-8 -Smime-force-sendout \
    -Sexpandaddr=fail,-all,failinvaddr \
    -S mta=smtps://mylogin@exam.ple:465 -Ssmtp-auth=login \
    -S from=scriptreply@exam.ple \
    -s 'Subject to go' -a attachment_file \
    -Sfullnames -. \
    'Recipient 1 <rec1@exam.ple>' rec2@exam.ple \
    < content_file
As shown, scripts can

a locale environment, the above specifies the all-compatible 7-bit clean
but will nonetheless take and send UTF-8 in the message text by using

If character set conversion is compiled in

includes the term

invalid (according to

character input data would normally cause errors; setting

will instead, as a last resort, classify the input as binary data, and
therefore allow message creation to be successful.
(Such content can then be inspected either by installing a

handler for

or possibly automatically through
In interactive mode, which is introduced in the next section, messages
can be sent by calling the

command with a list of recipient addresses:

$ \%mail"/var/spool/mail/user": 0 messages
? mail "Recipient 1 <rec1@exam.ple>", rec2@exam.ple
...
? # Will do the right thing (tm)
? m rec1@exam.ple rec2@exam.ple
When invoked without addressees \%Mailmails may be read.
When used like that the user's system

(for more on mailbox types please see the command

is read in and a one line header of each message therein is displayed if
the variable

is set.
The visual style of this summary of

can be adjusted through the variable

and the possible sorting criterion via

Scrolling through

fuls of

can be performed with the command

If the initially opened mailbox is empty \%Mailimmediately (after displaying a message) unless the variable

is set.

At the

the command

will give a listing of all available commands and

will [Option]If the [Option]
one can type
and see the actual expansion of

and what its purpose is, i.e., commands can be abbreviated
(note that POSIX defines some abbreviations, so that the alphabetical
order of commands does not necessarily relate to the abbreviations; it is
however possible to define overwrites with

These commands can also produce a more

output.

Messages are given numbers (starting at 1) which uniquely identify
messages; the current message - the

- will either be the first new message, or the first unread message,
or the first message of the mailbox; the internal variable

will instead cause usage of the last message for this purpose.
The command

will display a

ful of header summaries containing the

whereas

will display only the summaries of the given messages, defaulting to the
Message content can be displayed with the command
alias

Here the variable

controls whether and when \%Mail
for display instead of directly writing to the user terminal

the sole difference to the command

which will always use the

The command

will instead only show the first

of a message (maybe even compressed if

is set).
Message display experience may improve by setting and adjusting

and also see
By default the current message

is displayed, but like with many other commands it is possible to give
a fancy message specification (see

e.g.,

will display all unread messages,

will display the
will type the messages 1 and 5,

will type the messages 1 through 5, and

and

will display the previous and the next message, respectively.
The command

(a more substantial alias for

will display a header summary of the given message specification list
instead of their content, e.g., the following will search for subjects:
In the default setup all header fields of a message will be

d, but fields can be white- or blacklisted for a variety of
applications by using the command

e.g., to restrict their display to a very restricted set for
In order to display all header fields of a message regardless of
currently active ignore or retain lists, use the commands

and
will show the raw message content.
Note that historically the global

not only adjusts the list of displayed headers, but also sets

( A yet somewhat restricted) Reliable scriptable message
inspection is available via
Dependent upon the configuration a line editor (see the section

aims at making the user experience with the many

a bit nicer.
When reading the system

or when

(or

specified a mailbox explicitly prefixed with the special

modifier (to propagate it to a
then messages which have been read

will be automatically moved to a
the user's

file, when the mailbox is left, either by changing the active mailbox or
by quitting \%Mailto the secondary mailbox is not performed when the variable

is set.
Messages can also be explicitly

d to other mailboxes, whereas

keeps the original message.

can be used to write out data content of specific parts of messages.

After examining a message the user can

to the sender and all recipients (which will also be placed in

unless

is set), or

exclusively to the sender(s).
The command

knows how to apply a special addressee massage, see

Dependent on the presence and value of

the message being replied to will be included in a quoted form.

ing a message will allow editing the new message: the original message
will be contained in the message body, adjusted according to

It is possible to

or

messages: the former will add a series of

headers, whereas the latter will not; different to newly created
messages editing is not possible and no copy will be saved even with

unless the additional variable

is set.
When sending, replying or forwarding messages comments and full names
will be stripped from recipient addresses unless the internal variable

is set.

Of course messages can be

and they can spring into existence again via

or when the \%Mail
or

commands to perform a quick program termation.
To end a mail processing session regulary and perform a full program
exit one may issue the command

It will, among others, move read messages to the
as necessary, discard deleted messages in the current mailbox,
and update the [Option]
line editor
Messages which are HTML-only become more and more common, and of course
many messages come bundled with a bouquet of MIME (Multipurpose Internet
Mail Extensions) parts.
To get a notion of MIME types \%Mailonto which the content of

will be added (as configured and allowed by

Types can also become registered with the command

To improve interaction with faulty MIME part declarations which are
often seen in real-life messages, setting

will allow verification of the given assertion, and possible provision
of an alternative, better MIME type.

Whereas \%Maildisplaying HTML messages (indicated by

in

it cannot handle MIME types other than plain text itself.
Instead programs need to become registered to deal with specific MIME
types or file extensions.
These programs may either prepare plain text versions of their input in
order to enable \%Mailmessage visualization (a mode which is called

or display the content themselves, for example in an external graphical
window: such handlers will only be considered by and for the command
To install a handler program for a specific MIME type an according

variable needs to be set; to instead define a handler for a specific
file extension the respective

variable can be used - these handlers take precedence.
[Option]RFC 1524; this mechanism (see

will be queried for display or quote handlers if none of the former two
did; it will be the sole source for handlers of other purpose.
A last source for handlers is the MIME type definition itself, if
a type-marker has been registered with the command

which many of the built-in MIME types do.

For example, to display a HTML message inline (converted to a more fancy
plain text representation than the built-in filter is capable to produce)
with either of the text-mode browsers

or

teach \%Mailtext, and to open PDF attachments in an external PDF viewer,
asynchronously and with some other magic attached:

? if [ "$features" !% +filter-html-tagsoup ]
?   #set pipe-text/html='?* elinks -force-html -dump 1'
?   set pipe-text/html='?* lynx -stdin -dump -force_html'
?   # Display HTML as plain text instead
?   #set pipe-text/html=?
? endif
? mimetype ? application/mathml+xml mathml
? wysh set pipe-application/pdf='?&=? \
    trap "rm -f \"${MAILX_FILENAME_TEMPORARY}\"" EXIT;\
    trap "trap \"\" INT QUIT TERM; exit 1" INT QUIT TERM;\
    mupdf "${MAILX_FILENAME_TEMPORARY}"'
Known or subscribed-to mailing lists may be flagged in the summary of
format character

and will gain special treatment when sending mails: the variable

will ensure that a

header is honoured when a message is being replied to

and

and

controls creation of this header when creating

s; it may be created automatically, e.g., when list-replying via

when

is used and the messages

is honoured etc.

The commands

and

manage \%MailWith the [Option]
which contains magic regular expression characters

see

or

dependent on the host system)
will be compiled and used as one, possibly matching many addresses.

? set followup-to followup-to-honour=ask-yes \
    reply-to-honour=ask-yes
? mlist a1@b1.c1 a2@b2.c2 '.*@lists\.c3$'
? mlsubscribe a4@b4.c4 exact@lists.c3
Known and subscribed lists differ in that for the latter the

s address is not part of a generated

There are exceptions, for example if multiple lists are addressed and
not all have the subscription attribute.
When replying to a message its list address

header) is automatically and temporarily treated like a known

dependent on the variable

an existing

is used instead (if it is a single address on the same domain as

in order to accept a list administrator's wish that is supposed to have
been manifested like that.

[Option]message signing and message encryption.
A signed message contains some data in addition to the regular text.
The data can be used to verify that the message has been sent using
a valid certificate, that the sender address matches that in the
certificate, and that the message text has not been altered.
Signing a message does not change its regular text;
it can be read regardless of whether the recipients software is able to
handle S/MIME.
It is thus usually possible to sign all outgoing messages if so desired.

Encryption, in contrast, makes the message text invisible for all people
except those who have access to the secret decryption key.
To encrypt a message, the specific recipients public encryption key
must be known.
It is therefore not possible to send encrypted mail to people unless their
key has been retrieved from either previous communication or public key
directories.
Because signing is performed with private keys, and encryption with
public keys, messages should always be signed before becoming encrypted.

A central concept to S/MIME is that of the certification authority (CA).
A CA is a trusted institution that issues certificates.
For each of these certificates it can be verified that it really
originates from the CA, provided that the CA's own certificate is
previously known.
A set of CA certificates is usually delivered and installed together
with the cryptographical library that is used on the local system.
Therefore reasonable security for S/MIME on the Internet is provided if
the source that provides that library installation is trusted.
It is also possible to use a specific pool of trusted certificates.
If this is desired,

should be set to avoid using the default certificate pool, and

and/or

should be pointed to a trusted pool of certificates.
A certificate cannot be more secure than the method its CA certificate
has been retrieved with.

This trusted pool of certificates is used by the command

to ensure that the given S/MIME messages can be trusted.
If so, verified sender certificates that were embedded in signed
messages can be saved locally with the command

and used by \%Mail
? certsave FILENAME
? set smime-encrypt-USER@HOST=FILENAME \
    smime-cipher-USER@HOST=AES256
To sign outgoing messages, in order to allow receivers to verify the
origin of these messages, a personal S/MIME certificate is required.
\%Mail
The section

gives an overview of the possible sources of user credentials, and

shows examplarily how a private S/MIME certificate can be obtained.
In general, if such a private key plus certificate

is available, all that needs to be done is to set some variables:

? set smime-sign-cert=ME@exam.ple.paired \
    smime-sign-digest=SHA512 \
    smime-sign
Variables of interest for S/MIME in general are
For S/MIME signing of interest are
and

Additional variables of interest for S/MIME en- and decryption:

and

S/MIME is available if

is included in
 Note that neither S/MIME signing nor encryption applies to
message subjects or other header fields yet.
Thus they may not contain sensitive information for encrypted messages,
and cannot be trusted even if the message content has been verified.
When sending signed messages,
it is recommended to repeat any important header information in the
message text.

[v15-compat]Resource Locators (URL, RFC 1738) has become omnipresent.
\%Mailparts in brackets

denote optional parts, optional either because there also exist other
ways to define the information in question or because support of the
part is protocol-specific, e.g.,

is used by the [Option]by POP3; If any of

and

are specified they must be given in URL percent encoded form (RFC 3986;
the command

may be helpful):
Note that these \%Mailstandard, but instead represent a normalized variant of RFC 1738 -
they are not used in data exchange but only meant as a compact,
easy-to-use way of defining and representing information in
a well-known notation.

Many internal variables of \%Mailvariable chains for the rest of this document: the plain

as well as

and

Here

indeed means

if a

had been specified in the respective URL, otherwise it refers to the plain

Also,

is not truly the

that had been found when doing the user chain lookup as is described
below, i.e., this

will never be in URL percent encoded form, whether it came from an URL
or not; i.e., variable chain name extensions of

must not be URL percent encoded.

For example, whether an hypothetical URL

had been given that includes a user, or whether the URL was

and the user had been found differently, to lookup the variable chain

\%Mail
is defined, then whether

exists before finally ending up looking at the plain variable itself.

\%Mailnecessary credential information of an account:
If no

has been given in the URL the variables

and

are looked up.
If no such variable(s) can be found then \%Mailwhen enforced by the [Option]
or

search

of the user for a

specific entry which provides a

name: this lookup will only succeed if unambiguous (one possible matching
entry for
If there is still no

then \%Mailthe identity of which has been fixated during \%Mailknown to be a valid user on the current host.

Authentication: unless otherwise noted this will lookup the

variable chain, falling back to a protocol-specific default should this
have no success.

If no

has been given in the URL, then if the

has been found through the [Option]
that may have already provided the password, too.
Otherwise the variable chain

is looked up and used if existent.

Afterwards the complete [Option]
is looked up.
If set, the

cache is searched for a password only (multiple user accounts for
a single machine may exist as well as a fallback entry without user
but with a password).

If at that point there is still no password available, but the
(protocols') chosen authentication type requires a password, then in
interactive mode the user will be prompted on the terminal.
S/MIME verification works relative to the values found in the

(or

header field(s), which means that the values of

and

will not be looked up using the

and

chains from above but instead use the corresponding values from the
message that is being worked on.
In unusual cases multiple and different

and

combinations may therefore be involved - on the other hand those
unusual cases become possible.
The usual case is as short as:

set mta=smtp://USER:PASS@HOST smtp-use-starttls \
    smime-sign smime-sign-cert=+smime.pair
The section

contains complete example configurations.

[Option]Security) are protocols which aid in securing communication by providing
a safely initiated and encrypted network connection.
A central concept of TLS is that of certificates: as part of each
network connection setup a (set of) certificates will be exchanged, and
by using those the identity of the network peer can be cryptographically
verified; if possible the TLS/SNI (ServerNameIndication) extension will
be enabled in order to allow servers fine-grained control over the
certificates being used.
TLS works by using a locally installed pool of trusted certificates,
and verifying the connection peer succeeds if that provides
a certificate which has been issued or is trusted by any certificate in
the trusted local pool.

The local pool of trusted so-called CA (Certification Authority)
certificates is usually delivered with the used TLS library, and
will be selected automatically.
It is also possible to use a specific pool of trusted certificates.
If this is desired,

should be set to avoid using the default certificate pool, and

and/or (with special preparation)

should be pointed to a trusted pool of certificates.
A certificate cannot be more secure than the method its CA certificate
has been retrieved with.
For inspection or other purposes, the certificate of a server (as seen
when connecting to it) can be fetched like this:

$ </dev/null openssl s_client -showcerts -connect \
    the-server.example:pop3s 2>&1 | tee log.txt
\%Mailat all matched against a local pool of CA certificates.
Instead a message digest will be calculated for the certificate
presented by the connection peer, and be compared against

(a variable chain that picks up

or

context-dependent variable variants), and the connection will succeed if
the calculated digest equals the expected one.
The used message digest can be configured via (the chain)

The command

may be helpful.

It depends on the used protocol whether encrypted communication is
possible, and which configuration steps have to be taken to enable it.
Some protocols, e.g., POP3S, are implicitly encrypted, others, like
POP3, can upgrade a plain text connection if so requested.
For example, to use the

that POP3 offers (a member of) the variable (chain)

needs to be set, with convenience via
shortcut encpop1 pop3s://pop1.exam.ple

shortcut encpop2 pop3://pop2.exam.ple
set pop3-use-starttls-pop2.exam.ple

set mta=smtps://smtp.exam.ple:465
set mta=smtp://smtp.exam.ple smtp-use-starttls
Normally that is all there is to do, given that TLS libraries try to
provide safe defaults, plenty of knobs however exist to adjust settings.
For example certificate verification settings can be fine-tuned via

and the TLS configuration basics are accessible via

for example to specify the allowed protocols or cipher lists that
a communication channel may use.
In the past hints on how to restrict the set of protocols to highly
secure ones were indicated, but as of the time of this writing the list
of protocols or ciphers may need to become relaxed in order to be able
to connect to some servers; the following example allows connecting to a

that uses OpenSSL 0.9.8za from June 2014 (refer to

for more on variable chains):

wysh set tls-config-pairs-lion@exam.ple='MinProtocol=TLSv1.1,\
    CipherString=TLSv1.2:!aNULL:!eNULL:\
      ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:\
      DHE-RSA-AES256-SHA:@STRENGTH'
The OpenSSL program

can be used and should be referred to when creating a custom cipher list.
Variables of interest for TLS in general are
as well as

Also see

TLS is available if

is included in
[Option]mechanisms that are controlled by the

environment variable
(in fact
in that order, see there).
The internal variable

will be set to the detected terminal character set accordingly,
and will thus show up in the output of commands like, e.g.,

and
However, the user may give

a value during startup, making it possible to send mail in a completely

locale environment, an option which can be used to generate and send,
e.g., 8-bit UTF-8 input data in a pure 7-bit US-ASCII

environment (an example of this can be found in the section

Changing the value does not mean much beside that, because several
aspects of the real character set are implied by the locale environment
of the system, which stays unaffected by
Messages and attachments which consist of 7-bit clean data will be
classified as consisting of

character data.
This is a problem if the

character set is a multibyte character set that is also 7-bit clean.
For example, the Japanese character set ISO-2022-JP is 7-bit clean but
capable to encode the rich set of Japanese Kanji, Hiragana and Katakana
characters: in order to notify receivers of this character set the mail
message must be MIME encoded so that the character set ISO-2022-JP can
be advertised!
To achieve this, the variable

must be set to ISO-2022-JP.
(Today a better approach regarding email is the usage of UTF-8, which
uses 8-bit bytes for non-US-ASCII data.)

If the [Option]
does not include the term

then

will be the only supported character set,
it is simply assumed that it can be used to exchange 8-bit messages
(over the wire an intermediate, configurable

may be applied),
and the rest of this section does not apply;
it may however still be necessary to explicitly set it if automatic
detection fails, since in that case it defaults to
LATIN1 aka ISO-8859-1 unless the operating system environment is
known to always and exclusively support UTF-8 locales.

[Option]
as necessary in order to display them on the user's terminal.
Unprintable characters and invalid byte sequences are detected
and replaced by proper substitution characters.
Character set mappings for source character sets can be established with
the command

which may be handy to work around faulty character set catalogues (e.g.,
to add a missing LATIN1 to ISO-8859-1 mapping), or to enforce treatment
of one character set as another one (e.g., to interpret LATIN1 as CP1252).
Also see

to deal with another hairy aspect of message interpretation.

When sending messages their parts and attachments are classified.
Whereas no character set conversion is performed on those parts which
appear to be binary data,
the character set being used must be declared within the MIME header of
an outgoing text part if it contains characters that do not conform to
the set of characters that are allowed by the email standards.
Permissible values for character sets used in outgoing messages can be
declared using the

variable, and

which defines a catch-all last-resort fallback character set that is
implicitly appended to the list of character sets in
When replying to a message and the variable

is set, then the character set of the message being replied to
is tried first (still being a subject of

And it is also possible to make \%Mailthe current locale setting automatically by using the variable

please see there for more information.

All the specified character sets are tried in order unless the
conversion of the part or attachment succeeds.
If none of the tried (8-bit) character sets is capable to represent the
content of the part or attachment,
then the message will not be send and its text will optionally be

in

If that is not acceptable, the variable

can be set in order to force sending of non-convertible text as

classified binary content instead; like this receivers still have the
option to inspect message content (for example by setting
In general, if a message saying

appears, either some characters are not appropriate for the currently
selected (terminal) character set,
or the needed conversion is not supported by the system.
In the first case, it is necessary to set an appropriate

locale and/or the variable

The best results are usually achieved when \%Maillocale on an UTF-8 capable terminal, in which case the full Unicode
spectrum of characters is available.
In this setup characters from various countries can be displayed,
while it is still possible to use more simple character sets for sending
to retain maximum compatibility with older mail clients.

On the other hand the POSIX standard defines a locale-independent 7-bit

that should be used when overall portability is an issue, the even more
restricted subset named

consists of A-Z, a-z, 0-9, period

underscore

and hyphen-minus
\%Mailstate will be reflected in the summary of

if the

of the configured

allows, and

dependent on their state is possible.
When operating on the system

or in any other
special actions, like the automatic moving of messages to the
may be applied when the mailbox is left (also implicitly by program
termination, unless the command

was used) - however, because this may be irritating to users which
are used to

mail-user-agents, the provided global

template sets the internal

and

variables in order to suppress this behaviour.
Message has neither been viewed nor moved to any other state.
Such messages are retained even in the
Message has neither been viewed nor moved to any other state, but the
message was present already when the mailbox has been opened last:
Such messages are retained even in the
The message has been processed by one of the following commands:
The commands

and

will always try to automatically

and

the

logical message, and may thus mark multiple messages as read, the

command will do so if the internal variable

is set.

Except when the

command is used, messages that are in a
and are in

state when the mailbox is left will be saved in the
unless the internal variable

it set.

The message has been processed by one of the following commands:
Only

can be used to access such messages.

The message has been processed by a

command and it will be retained in its current location.

The message has been processed by one of the following commands:

or

Unless when the

command is used, messages that are in a
and are in

state when the mailbox is left will be deleted; they will be saved in the
when the internal variable

is set.
In addition to these message states, flags which otherwise have no
technical meaning in the mail system except allowing special ways of
addressing them when

can be set on messages.
These flags are saved with messages and are thus persistent, and are
portable between a set of widely used MUAs.
Mark messages as having been answered.

Mark messages as being a draft.

Mark messages which need special attention.
 Commands which take

such as

aka
and

can be given a list of message numbers as arguments to apply to a number
of messages at once.
Thus

deletes messages 1 and 2,
whereas

will delete the messages 1 through 5.
In sorted or threaded mode (see the

command),

will delete the messages that are located between (and including)
messages 1 through 5 in the sorted/threaded order, as shown in the

summary.
The following special message names exist:
The current message, the so-called
The message that was previously the current message; needs to be quoted.

The parent message of the current message,
that is the message with the Message-ID given in the

field or the last entry of the

field of the current message.

The previous undeleted message, or the previous deleted message for the

command; In

ed or

ed mode, the previous such message in the according order.

The next undeleted message, or the next deleted message for the

command; In

ed or

ed mode, the next such message in the according order.

The first undeleted message,
or the first deleted message for the

command; In

ed or

ed mode, the first such message in the according order.

The last message; In

ed or

ed mode, the last such message in the according order.
Needs to be quoted.

In

ed

mode, selects the message addressed with

where

is any other message specification,
and all messages from the thread that begins at it.
Otherwise it is identical to

If

is omitted,
the thread beginning with the current message is selected.

All messages.

All messages that were included in the

of the previous command; needs to be quoted.

An inclusive range of message numbers.
Selectors that may also be used as endpoints include any of
A case-insensitive

search against the

header, which will match addresses (too) even if

is set (and POSIX says

However, if the

variable is set, only the local part of the address is evaluated
for the comparison, not ignoring case, and the setting of

is completely ignored.
For finer control and match boundaries use the

search expression.

All messages that contain

in the subject field (case ignored according to locale).
See also the

variable.
If

is empty,
the string from the previous specification of that type is used again.
All messages that contain the given case-insensitive search

ession;  If the [Option]
will be interpreted as (an extended) one if any of the
is seen.
If the optional

part is missing the search is restricted to the subject field body,
but otherwise

specifies a comma-separated list of header fields to search, e.g.,
In order to search for a string that includes a

(commercial at) character the

is effectively non-optional, but may be given as the empty string.
Also, specifying an empty search

ession will effectively test for existence of the given header fields.
Some special header fields may be abbreviated:
and

will match
and

respectively and case-insensitively.
[Option]

will be interpreted as (an extended) regular expression if any of the
is seen.

The special names

or

can be used to search in (all of) the header(s) of the message, and the
special names

or

and

or

will perform full text searches - whereas the former searches only
the body, the latter also searches the message header ( this mode
yet brute force searches over the entire decoded content of messages,
including administrativa strings).

This specification performs full text comparison, but even with
regular expression support it is almost impossible to write a search
expression that safely matches only a specific address domain.
To request that the body content of the header is treated as a list of
addresses, and to strip those down to the plain email address which the
search expression is to be matched against, prefix the effective

with a tilde
All messages of state or with matching condition

where

is one or multiple of the following colon modifiers:
messages (cf. the variable
messages (for the

and

commands only).
ged messages.

Messages with receivers that match

d addresses.

Messages with receivers that match

ed addresses.
messages.

Old messages (any not in state

or
messages.

[Option]

[Option]
Messages marked as
messages.
[Option]These consist of keywords and criterions, and because

are split into tokens according to

it is necessary to quote the entire IMAP search expression in order to
ensure that it remains a single token.
This addressing mode is available with all types of mailbox

s; \%MailStrings must be enclosed by double quotes

in their entirety if they contain whitespace or parentheses;
within the quotes, only reverse solidus

is recognized as an escape character.
All string searches are case-insensitive.
When the description indicates that the

representation of an address field is used,
this means that the search string is checked against both a list
constructed as

'(name source local-part domain-part)'
for each address,
and the addresses without real names from the respective header field.
These search expressions can be nested using parentheses, see below for
examples.
All messages that satisfy the given
All messages that satisfy all of the given criteria.

All messages that satisfy either

or

or both.
To connect more than two criteria using

specifications have to be nested using additional parentheses,
as with

since

really means

For a simple

operation of independent criteria on the lowest nesting level,
it is possible to achieve similar effects by using three separate
criteria, as with
All messages that do not satisfy
All messages that contain

in the envelope representation of the

field.

All messages that contain

in the envelope representation of the

field.

All messages that contain

in the envelope representation of the

field.

All messages that contain

in the

field.

All messages that contain

in the envelope representation of the

field.

All messages that contain

in the specified

field.

All messages that contain

in their body.

All messages that contain

in their header or body.

All messages that are larger than

(in bytes).

All messages that are smaller than

(in bytes).

All messages that were received before

which must be in the form

where

denotes the day of the month as one or two digits,

is the name of the month - one of

and

is the year as four digits, e.g.,
All messages that were received on the specified date.

All messages that were received since the specified date.

All messages that were sent on the specified date.

All messages that were sent on the specified date.

All messages that were sent since the specified date.

The same criterion as for the previous search.
This specification cannot be used as part of another criterion.
If the previous command line contained more than one independent
criterion then the last of those criteria is used.
[Option]
libraries, either the

or, alternatively, the

both of which will be initialized to work with the environment variable

Terminal control will enhance or enable interactive usage aspects, e.g.,

and extend behaviour of the Mailx-Line-Editor (MLE), which may learn the
byte-sequences of keys like the cursor- and function-keys.

The internal variable

can be used to overwrite settings or to learn (correct(ed)) keycodes.
Actual library interaction can be disabled completely by setting
will be queried regardless, which is true even if the [Option]support has not been enabled at configuration time as long as some other
[Option]\%Mailso-called ca-mode, by setting

this requires sufficient terminal support, and the used

may also need special configuration, dependent on the value of
[Option]environments which comply to the ISO C standard

and will support wide glyphs if possible (the necessary functionality
had been removed from ISO C, but was included in

Usage of a line editor in interactive mode can be prevented by setting

Especially if the [Option]entries in the internal variable

will help shall the MLE misbehave, see there for more.
The MLE can support a little bit of
[Option]
feature is available then input from line editor prompts will be saved
in a history list that can be searched in and be expanded from.
Such saving can be prevented by prefixing input with any amount of
whitespace.
Aspects of history, like allowed content and maximum size, as well as
whether history shall be saved persistently, can be configured with the
internal variables
and

There also exists the macro hook

which can be used to apply fine control on what enters history.

The MLE supports a set of editing and control commands.
By default (as) many (as possible) of these will be assigned to a set of
single-letter control codes, which should work on any terminal (and can
be generated by holding the

key while pressing the key of desire, e.g.,

If the [Option]
command is available then the MLE commands can also be accessed freely
by assigning the command name, which is shown in parenthesis in the list
below, to any desired key-sequence, and the MLE will instead and also use

to establish its built-in key bindings
(more of them if the [Option]an action which can then be suppressed completely by setting
notation is used in the following;
combinations not mentioned either cause job control signals or do not
generate a (unique) keycode:
Go to the start of the line
Move the cursor backward one character
Forward delete the character under the cursor;
quits \%Mail
is set
Go to the end of the line
Move the cursor forward one character
Cancel current operation, full reset.
If there is an active history search or tabulator expansion then this
command will first reset that, reverting to the former line content;
thus a second reset is needed for a full reset in this case
Backspace: backward delete one character
Horizontal tabulator:
try to expand the word before the cursor, supporting the usual
this is affected by
Newline:
commit the current line
Cut all characters from the cursor to the end of the line
Repaint the line
[Option]
([Option]

[Option]
Toggle roundtrip mode shell quotes, where produced,
on and off
This setting is temporary, and will be forgotten once the command line
is committed; also see
[Option]
[Option]
Paste the snarf buffer
The same as

followed by
Prompts for a Unicode character (hexadecimal number without prefix, see

to be inserted
Note this command needs to be assigned to a single-letter control code
in order to become recognized and executed during input of
a key-sequence (only three single-letter control codes can be used for
that shortcut purpose); this control code is then special-treated and
thus cannot be part of any other sequence (because it will trigger the

function immediately).

Cut the characters from the one preceding the cursor to the preceding
word boundary
Move the cursor forward one word boundary
Move the cursor backward one word boundary
Escape: reset a possibly used multibyte character input state machine
and [Option]

This command needs to be assigned to a single-letter control code in
order to become recognized and executed during input of a key-sequence
(only three single-letter control codes can be used for that shortcut
purpose).
This control code may also be part of a multi-byte sequence, but if
a sequence is active and the very control code is currently also an
expected input, then the active sequence takes precedence and will
consume the control code.

([Option]

([Option]

([Option]

Cut the characters from the one after the cursor to the succeeding word
boundary
Backspace:
Move the cursor forward one screen width
Move the cursor backward one screen width
[Option]
different to

this will immediately reset a possibly active search etc.
ring the audible bell.
[Option]attributes by emitting ANSI aka ISO 6429 SGR (select graphic
rendition) escape sequences.
Usage of colours and font attributes solely depends upon the
capability of the detected terminal type that is defined by the
environment variable

and which can be fine-tuned by the user via the internal variable
On top of what \%Mail
defines whether the actually applicable colour and font attribute
sequences should also be generated when output is going to be paged
through the external program defined by the environment variable

(also see

).
This is not enabled by default because different pager programs need
different command line switches or other configuration in order to
support those sequences.
\%Mailenvironment it is often enough to simply set

please refer to that variable for more on this topic.

Colours and font attributes can be managed with the multiplexer command

and

can be used to remove mappings of a given colour type.
If the variable

is set then any active usage of colour and font attribute sequences
is suppressed without affecting possibly established

mappings.
Since colours are only available in interactive mode, it may make
sense to conditionalize the colour setup by encapsulating it with
if terminal && [ "$features" =% +colour ]
  colour iso view-msginfo ft=bold,fg=green
  colour iso view-header ft=bold,fg=red (from|subject) # regex
  colour iso view-header fg=red

  uncolour iso view-header from,subject
  colour iso view-header ft=bold,fg=magenta,bg=cyan
  colour 256 view-header ft=bold,fg=208,bg=230 "subject,from"
  colour mono view-header ft=bold
  colour mono view-header ft=bold,ft=reverse subject,from
endif
[Option]identification of, and, in general, dealing with spam messages.
A precondition of most commands in order to function is that the

variable is set to one of the supported interfaces.

that have been identified as spam is possible via their (volatile)

state by using the

and

specifications, and their

entries will be used when displaying the

in the summary of
rates the given messages and sets their

flag accordingly.
If the spam interface offers spam scores these can be shown in

by using the format
and

will interact with the Bayesian filter of the chosen interface and learn
the given messages as

or

respectively; the last command can be used to cause

of messages; it adheres to their current

state and thus reverts previous teachings.
and

will simply set and clear, respectively, the mentioned volatile

message flag, without any interface interaction.
The

based
requires a running instance of the

server in order to function, started with the option

shall Bayesian filter learning be possible.

$ spamd -i localhost:2142 -i /tmp/.spamsock -d [-L] [-l]
$ spamd --listen=localhost:2142 --listen=/tmp/.spamsock \
    --daemonize [--local] [--allow-tell]
Thereafter \%Mail
$ \%mail    -Sspamc-command=/usr/local/bin/spamc \
    -Sspamc-arguments="-U /tmp/.spamsock" -Sspamc-user=
or
$ \%mail    -Sspamc-command=/usr/local/bin/spamc \
    -Sspamc-arguments="-d localhost -p 2142" -Sspamc-user=
Using the generic filter approach allows usage of programs like

Here is an example, requiring it to be accessible via
$ \%mail    -Sspamfilter-ham="bogofilter -n" \
    -Sspamfilter-noham="bogofilter -N" \
    -Sspamfilter-nospam="bogofilter -S" \
    -Sspamfilter-rate="bogofilter -TTu 2>/dev/null" \
    -Sspamfilter-spam="bogofilter -s" \
    -Sspamfilter-rate-scanscore="1;^(.+)$"
Because messages must exist on local storage in order to be scored (or
used for Bayesian filter training), it is possibly a good idea to
perform the local spam check last.
Spam can be checked automatically when opening specific folders by
setting a specialized form of the internal variable
define spamdelhook {
  # Server side DCC
  spamset (header x-dcc-brand-metrics "bulk")
  # Server-side spamassassin(1)
  spamset (header x-spam-flag "YES")
  del :s # TODO we HAVE to be able to do `spamrate :u ! :sS'
  move :S +maybe-spam
  spamrate :u
  del :s
  move :S +maybe-spam
}
set folder-hook-SOMEFOLDER=spamdelhook
See also the documentation for the variables
  spamfilter-rate
and
\%MailAn unquoted reverse solidus

at the end of a command line

the newline character: it is discarded and the next line of input is
used as a follow-up line, with all leading whitespace removed;
once an entire line is completed, the whitespace characters

as well as those defined by the variable

are removed from the beginning and end.
Placing any whitespace characters at the beginning of a line will
prevent a possible addition of the command line to the [Option]

The beginning of such input lines is then scanned for the name of
a known command: command names may be abbreviated, in which case the
first command that matches the given prefix will be used.

may prefix a command in order to modify its behaviour.
A name may also be a

which will become expanded until no more expansion is possible.
Once the command that shall be executed is known, the remains of the
input line will be interpreted according to command-specific rules,
documented in the following.

This behaviour is different to the

ell, which is a programming language with syntactic elements of clearly
defined semantics, and therefore capable to sequentially expand and
evaluate individual elements of a line.
\%Mail
in a single statement, because the variable assignment is performed by
the command

not the language.

The command

can be used to show the list of all commands, either alphabetically
sorted or in prefix search order (these do not match, also because the
POSIX standard prescribes a set of abbreviations).
[Option]
(or

when given an argument, will show a documentation string for the
command matching the expanded argument, as in

which should be a shorthand of

with these documentation strings both commands support a more

listing mode which includes the argument type of the command and other
information which applies; a handy suggestion might thus be:

? define __xv {
  # Before v15: need to enable sh(1)ell-style on _entire_ line!
  localopts yes;wysh set verbose;ignerr eval "${@}";return ${?}
}
? commandalias xv '\call __xv'
? xv help set
Commands may be prefixed by one or multiple command modifiers.
Some command modifiers can be used with a restricted set of commands
only, the

version of

will ([Option]

The modifier reverse solidus
to be placed first, prevents

expansions on the remains of the line, e.g.,

will always evaluate the command

even if an (command)alias of the same name exists.

content may itself contain further command modifiers, including
an initial reverse solidus to prevent further expansions.

The modifier
indicates that any error generated by the following command should be
ignored by the state machine and not cause a program exit with enabled

or for the standardized exit cases in

mode.

one of the

will be set to the real exit status of the command regardless.
will alter the called command to apply changes only temporarily,
local to block-scope, and can thus only be used inside of a

d macro or an

definition.
Specifying it implies the modifier

Block-scope settings will not be inherited by macros deeper in the

chain, and will be garbage collected once the current block is left.
To record and unroll changes in the global scope use the command
does yet not implement any functionality.
does yet not implement any functionality.

Some commands support the
modifier: if used, they expect the name of a variable, which can itself
be a variable, i.e., shell expansion is applied, as their first
argument, and will place their computation result in it instead of the
default location (it is usually written to standard output).

The given name will be tested for being a valid

variable name, and may therefore only consist of upper- and lowercase
characters, digits, and the underscore; the hyphen-minus may be used as
a non-portable extension; digits may not be used as first, hyphen-minus
may not be used as last characters.
In addition the name may either not be one of the known

or must otherwise refer to a writable (non-boolean) value variable.
The actual put operation may fail nonetheless, e.g., if the variable
expects a number argument only a number will be accepted.
Any error during these operations causes the command as such to fail,
and the error number

will be set to

the exit status

should be set to

but some commands deviate from the latter, which is documented.

Last, but not least, the modifier
can be used for some old and established commands to choose the new

rules over the traditional

This modifier is implied if

is set to a non-empty value.
 This section documents the old, traditional style of quoting
non-message-list arguments to commands which expect this type of
arguments: whereas still used by the majority of such commands, the new

may be available even for those via

one of the

Nonetheless care must be taken, because only new commands have been
designed with all the capabilities of the new quoting rules in mind,
which can, e.g., generate control characters.
An argument can be enclosed between paired double-quotes

or
single-quotes

any whitespace, shell word expansion, or reverse solidus characters
(except as described next) within the quotes are treated literally as
part of the argument.
A double-quote will be treated literally within single-quotes and vice
versa.
Inside such a quoted string the actually used quote character can be
used nonetheless by escaping it with a reverse solidus

as in
An argument that is not enclosed in quotes, as above, can usually still
contain space characters if those spaces are reverse solidus escaped, as in
A reverse solidus outside of the enclosing quotes is discarded
and the following character is treated literally as part of the argument.
ell-style, and therefore POSIX standardized, argument parsing and
quoting rules are used by most commands.
 Most new commands only support these new rules and are flagged
, some elder ones can use them with the command modifier

in the future only this type of argument quoting will remain.

A command line is parsed from left to right and an input token is
completed whenever an unquoted, otherwise ignored, metacharacter is seen.
Metacharacters are vertical bar

ampersand

semicolon

as well as all characters from the variable

and / or

The additional metacharacters left and right parenthesis

and less-than and greater-than signs

that the

supports are not used, and are treated as ordinary characters: for one
these characters are a vivid part of email addresses, and it seems
highly unlikely that their function will become meaningful to \%Mail

 Please note that even many new-style commands do not yet honour

to parse their arguments: whereas the

ell is a language with syntactic elements of clearly defined semantics,
\%Mailto do with the rest of the line.
This also means that whenever an unknown command is seen all that \%Mailcan do is cancellation of the processing of the remains of the line.

It also often depends on an actual subcommand of a multiplexer command
how the rest of the line should be treated, and until v15 we are not
capable to perform this deep inspection of arguments.
Nonetheless, at least the following commands which work with positional
parameters fully support

for an almost shell-compatible field splitting:
Any unquoted number sign

at the beginning of a new token starts a comment that extends to the end
of the line, and therefore ends argument processing.
An unquoted dollar sign

will cause variable expansion of the given name, which must be a valid

ell-style variable name (see
as well as

(shell) variables can be accessed through this mechanism, brace
enclosing the name is supported (i.e., to subdivide a token).

Whereas the metacharacters

only complete an input token, vertical bar

ampersand

and semicolon

also act as control operators and perform control functions.
For now supported is semicolon

which terminates a single command, therefore sequencing the command line
and making the remainder of the line a subject to reevaluation.
With sequencing, multiple command argument types and quoting rules may
therefore apply to a single line, which can become problematic before
v15: e.g., the first of the following will cause surprising results.
Quoting is a mechanism that will remove the special meaning of
metacharacters and reserved words, and will prevent expansion.
There are four quoting mechanisms: the escape character, single-quotes,
double-quotes and dollar-single-quotes:
The literal value of any character can be preserved by preceding it
with the escape character reverse solidus
Arguments which are enclosed in

retain their literal value.
A single-quote cannot occur within single-quotes.

The literal value of all characters enclosed in

is retained, with the exception of dollar sign

which will cause variable expansion, as above, backquote (grave accent)

(which not yet means anything special), reverse solidus

which will escape any of the characters dollar sign

(to prevent variable expansion), backquote (grave accent)

double-quote

(to prevent ending the quote) and reverse solidus

(to prevent escaping, i.e., to embed a reverse solidus character as-is),
but has no special meaning otherwise.

Arguments enclosed in

extend normal single quotes in that reverse solidus escape sequences are
expanded as follows:
bell control character (ASCII and ISO-10646 BEL).

backspace control character (ASCII and ISO-10646 BS).

escape control character (ASCII and ISO-10646 ESC).

the same.

form feed control character (ASCII and ISO-10646 FF).

line feed control character (ASCII and ISO-10646 LF).

carriage return control character (ASCII and ISO-10646 CR).

horizontal tabulator control character (ASCII and ISO-10646 HT).

vertical tabulator control character (ASCII and ISO-10646 VT).

emits a reverse solidus character.

single quote.

double quote (escaping is optional).

eight-bit byte with the octal value

(one to three octal digits), optionally prefixed by an additional

A 0 byte will suppress further output for the quoted argument.

eight-bit byte with the hexadecimal value

(one or two hexadecimal characters, no prefix, see

A 0 byte will suppress further output for the quoted argument.

the Unicode / ISO-10646 character with the hexadecimal codepoint value

(one to eight hexadecimal characters) -- note that Unicode defines the
maximum codepoint ever to be supported as

(in planes of

characters each).
This escape is only supported in locales that support Unicode (see

in other cases the sequence will remain unexpanded unless the given code
point is ASCII compatible or (if the [Option]available) can be represented in the current locale.
The character NUL will suppress further output for the quoted argument.

Identical to

except it takes only one to four hexadecimal characters.

Emits the non-printable (ASCII and compatible) C0 control codes
0 (NUL) to 31 (US), and 127 (DEL).
Printable representations of ASCII control codes can be created by
mapping them to a different, visible part of the ASCII character set.
Adding the number 64 achieves this for the codes 0 to 31, e.g., 7 (BEL):

The real operation is a bitwise logical XOR with 64 (bit 7 set, see

thus also covering code 127 (DEL), which is mapped to 63 (question mark):
Whereas historically circumflex notation has often been used for
visualization purposes of control codes, e.g.,

the reverse solidus notation has been standardized:

Some control codes also have standardized (ISO-10646, ISO C) aliases,
as shown above (e.g.,
whenever such an alias exists it will be used for display purposes.
The control code NUL

a non-standard extension) will suppress further output for the remains
of the token (which may extend beyond the current quote), or, depending
on the context, the remains of all arguments for the current command.

Non-standard extension: expand the given variable name, as above.
Brace enclosing the name is supported.

Not yet supported, just to raise awareness: Non-standard extension.
Caveats:

? echo 'Quotes '${HOME}' and 'tokens" differ!"# no comment
? echo Quotes ${HOME} and tokens differ! # comment
? echo Don"'"t you worry$'\x21' The sun shines on us. $'\u263A'
Many commands operate on message list specifications, as documented in

The argument input is first split into individual tokens via

which are then interpreted as the mentioned specifications.
If no explicit message list has been specified, many commands will
search for and use the next message forward that satisfies the commands'
requirements, and if there are no messages forward of the current
message, the search proceeds backwards;
if there are no good messages at all to be found, an error message is
shown and the command is aborted.
The

output of the command

will indicate whether a command searches for a default message, or not.

A special set of commands, which all have the string

in their name, e.g.,
take raw string data as input, which means that the content of the
command input line is passed completely unexpanded and otherwise
unchanged: like this the effect of the actual codec is visible without
any noise of possible shell quoting rules etc., i.e., the user can input
one-to-one the desired or questionable data.
To gain a level of expansion, the entire command line can be

uated first, e.g.,

? vput shcodec res encode /usr/Sch[:o]nes Wetter/heute.txt
? echo $res
$'/usr/Sch\u00F6nes Wetter/heute.txt'
? shcodec d $res
$'/usr/Sch\u00F6nes Wetter/heute.txt'
? eval shcodec d $res
/usr/Sch[:o]nes Wetter/heute.txt
Filenames, where expected, and unless documented otherwise, are
subsequently subject to the following filename transformations, in
sequence:
If the given name is a registered

it will be replaced with the expanded shortcut.

The filename is matched against the following patterns or strings:
(Number sign) is expanded to the previous file.

(Percent sign) is replaced by the invoking

user's primary system mailbox, which either is the (itself expandable)

if that is set, the standardized absolute pathname indicated by

if that is set, or a built-in compile-time default otherwise.

Expands to the primary system mailbox of

(and never the value of

regardless of its actual setting).

(Ampersand) is replaced with the invoking user's

secondary mailbox, the
Refers to a

in the

directory (if that variable is set).

Expands to the same value as

but has special meaning when used with, e.g., the command

the file will be treated as a primary system mailbox by, e.g., the

and

commands, meaning that messages that have been read in the current
session will be moved to the

mailbox instead of simply being flagged as read.
Meta expansions may be applied to the resulting filename, as allowed by
the operation and applicable to the resulting access protocol (also see

For the file-protocol, a leading tilde

character will be replaced by the expansion of

except when followed by a valid user name, in which case the home
directory of the given user is used instead.

A shell expansion as if specified in double-quotes (see

may be applied, so that any occurrence of

(or

will be replaced by the expansion of the variable, if possible;

as well as

(shell) variables can be accessed through this mechanism.

Shell pathname wildcard pattern expansions

may be applied as documented.
If the fully expanded filename results in multiple pathnames and the
command is expecting only one file, an error results.

In interactive context, in order to allow simple value acceptance (via

arguments will usually be displayed in a properly quoted form, e.g., a file

may be displayed as
The following commands are available:
Executes the

command which follows, replacing unescaped exclamation marks with the
previously executed command if the internal variable

is set.
This command supports

as documented in

and manages the error number

A 0 or positive exit status

reflects the exit status of the command, negative ones that
an error happened before the command was executed, or that the program
did not exit cleanly, but, e.g., due to a signal: the error number is

then.

In conjunction with the

modifier the following special cases exist:
a negative exit status occurs if the collected data could not be stored
in the given variable, which is a

error that should otherwise not occur.

indicates that no temporary file could be created to collect the command
output at first glance.
In case of catchable out-of-memory situations

will occur and \%Mailall other detected error conditions.
The comment-command causes the entire line to be ignored.

this really is a normal command which' purpose is to discard its
arguments, not a

indicating special character, which means that, e.g., trailing comments
on a line are not possible (except for commands which use
Goes to the next message in sequence and types it
(like
Display the preceding message, or the n'th previous message if given
a numeric argument n.
Shows the message number of the current message (the

when used without arguments, that of the given list otherwise.
Output numbers will be separated from each other with the first
character of

and followed by the first character of

if that is not empty and not identical to the first.
If that results in no separation at all a

character is used.
This command supports

(see

and manages the error number
[Option][Option]shown instead; commands can be abbreviated in general and this command
can be used to see the full expansion of an abbreviation including the
synopsis, try, e.g.,
and

and see how the output changes.
This mode also supports a more

output, which will provide the information documented for
A synonym for the

command.
(ac, una) Creates, selects or lists (an) account(s).
Accounts are special incarnations of

macros and group commands and variable settings which together usually
arrange the environment for the purpose of creating an email account.
Different to normal macros settings which are covered by

- here by default enabled! - will not be reverted before the

is changed again.
The special account

(case-insensitive) always exists, and all but it can be deleted by the
latter command, and in one operation with the special name

Also for all but it a possibly set

hook is called once they are left.

Without arguments a listing of all defined accounts is shown.
With one argument the given account is activated: the system

of that account will be activated (as via

a possibly installed

will be run, and the internal variable

will be updated.
The two argument form is identical to defining a macro as via
account myisp {
  set folder=~/mail inbox=+syste.mbox record=+sent.mbox
  set from='(My Name) myname@myisp.example'
  set mta=smtp://mylogin@smtp.myisp.example
}
Perform email address codec transformations on raw-data argument, rather
according to email standards (RFC 5322;  will furtherly improve).
Supports

(see

and manages the error number

The first argument must be either
or

and specifies the operation to perform on the rest of the line.

Decoding will show how a standard-compliant MUA will display the given
argument, which should be an email address.
Please be aware that most MUAs have difficulties with the address
standards, and vary wildly when (comments) in parenthesis,

strings, or quoted-pairs, as below, become involved.
 \%Mail
Skinning is identical to decoding but only outputs the plain address,
without any string, comment etc. components.
Another difference is that it may fail with the error number

set to

if decoding fails to find a(n) (valid) email address, in which case the
unmodified input will be output again.
first performs a skin operation, and thereafter checks a valid
address for whether it is a registered mailing list (see

and

eventually reporting that state in the error number

as

(This state could later become overwritten by an I/O error, though.)

Encoding supports four different modes, lesser automated versions can be
chosen by prefixing one, two or three plus signs: the standard imposes
a special meaning on some characters, which thus have to be transformed
to so-called quoted-pairs by pairing them with a reverse solidus

in order to remove the special meaning; this might change interpretation
of the entire argument from what has been desired, however!
Specify one plus sign to remark that parenthesis shall be left alone,
two for not turning double quotation marks into quoted-pairs, and three
for also leaving any user-specified reverse solidus alone.
The result will always be valid, if a successful exit status is reported
( the current parser fails this assertion for some constructs).
 Addresses need to be specified in between angle brackets
if the construct becomes more difficult, otherwise the current parser
will fail; it is not smart enough to guess right.

? addrc enc "Hey, you",<diet@exam.ple>\ out\ there
"\"Hey, you\", \\ out\\ there" <diet@exam.ple>
? addrc d "\"Hey, you\", \\ out\\ there" <diet@exam.ple>
"Hey, you", \ out\ there <diet@exam.ple>
? addrc s "\"Hey, you\", \\ out\\ there" <diet@exam.ple>
diet@exam.ple
 (a, una) Define or list, and remove, respectively, address aliases.
Address aliases are a method of creating personal distribution lists
that map a single alias name to none to multiple receivers;
aliases are expanded after message composing is completed.
The latter command removes all given aliases, the special name asterisk

will remove all existing aliases.
When used without arguments the former shows a list of all currently
known aliases, with one argument only the target(s) of the given one.
When given two arguments, hyphen-minus

being the first, the target(s) of the second is/are expanded recursively.

In all other cases the given address alias is newly defined or will be
appended to: target arguments must either be valid alias names, or any
other address type.
Recursive expansion of (what looks like) alias name(s) targets can be
prevented by prefixing the target with the modifier reverse solidus

A valid alias name conforms to the Postfix MTA

rules, and may consist of alphabetic characters, digits, the underscore,
the number sign, colon, commercial at and hyphen-minus; extensions:
exclamation mark

period

as well as

may be used:

The number sign may need be quoted to avoid misinterpretation as the
shell comment character.

 Unfortunately the colon is currently not supported, as it
interferes with normal address parsing rules.
 Such high bit characters will likely cause warnings at the moment
for the same reasons why colon is unsupported; also, in the future
locale dependent character set validity checks will be performed.
 (alt) Manage a list of alternate addresses or names of the active
user, members of which will be removed from recipient lists (except one).
There is a set of implicit alternates which is formed of the values of
and
will not be used if

is set.
The latter command removes the given list of alternates, the special name

will discard all existing alternate names.

The former command manages the error number

It shows the current set of alternates when used without arguments; in
this mode only it also supports

(see

Otherwise the given arguments (after being checked for validity) are
appended to the list of alternate names; in

mode they replace that list instead.
Take a message lists and mark each message as (not) having been answered.
Messages will be marked answered when being

to automatically if the

variable is set.
See the section
[Option]
with freely configurable key bindings.
The latter command removes from the given context the given key binding,
both of which may be specified as a wildcard

so that, e.g.,

will remove all bindings of all contexts.
Due to initialization order unbinding will not work for built-in key
bindings upon program startup, however: please use

for this purpose instead.

With zero arguments, or with a context name the former command shows all
key bindings (of the given context; an asterisk

will iterate over all contexts); a more verbose listing will be
produced if either of

or

are set.
With two or more arguments a binding is (re)established:
the first argument is the context to which the binding shall apply,
the second argument is a comma-separated list of the

which form the binding, and any remaining arguments form the expansion.
To indicate that a binding shall not be auto-committed, but that the
expansion shall instead be furtherly editable by the user, a commercial at

(that will be removed) can be placed last in the expansion, from which
leading and trailing whitespace will finally be removed.
Reverse solidus cannot be used as the last character of expansion.
An empty expansion will be rejected.

Contexts define when a binding applies, i.e., a binding will not be seen
unless the context for which it is defined for is currently active.
This is not true for the shared binding

which is the foundation for all other bindings and as such always
applies, its bindings, however, only apply secondarily.
The available contexts are the shared

the

context which is used in all not otherwise documented situations, and

which applies to compose mode only.
which form the binding are specified as a comma-separated list of
byte-sequences, where each list entry corresponds to one key(press).
A list entry may, indicated by a leading colon character

also refer to the name of a terminal capability; several dozen names
will be compiled in and may be specified either by their

or, if existing, by their

name, regardless of the actually used [Option]It is possible to use any capability, as long as the name is resolvable
by the [Option]
Input sequences are not case-normalized, so that an exact match is
required to update or remove a binding.
Examples:

? bind base $'\E',d mle-snarf-word-fwd # Esc(ape)
? bind base $'\E',$'\c?' mle-snarf-word-bwd # Esc,Delete
? bind default $'\cA',:khome,w 'echo Editable binding@'
? bind default a,b,c rm -irf / @  # Also editable
? bind default :kf1 File %
? bind compose :kf1 ~v
Note that the entire comma-separated list is first parsed (over) as a
shell-token with whitespace as the field separator, before being parsed
and expanded for real with comma as the field separator, therefore
whitespace needs to be properly quoted, see

Using Unicode reverse solidus escape sequences renders a binding
defunctional if the locale does not support Unicode (see

and using terminal capabilities does so if no (corresponding) terminal
control support is (currently) available.

The following terminal capability names are built-in and can be used in

or (if available) the two-letter

notation.
See the respective manual for a list of capabilities.
The program

can be used to show all the capabilities of

or the given terminal type;
using the

flag will also show supported (non-standard) extensions.
Backspace.

Delete character.

-- shifted variant.

Clear to end of line.

Exit.

Insert character.

-- shifted variant.

Home.

-- shifted variant.

End.

Next page.

Previous page.

Left cursor (with more modifiers: see below).

-- shifted variant.

Right cursor (ditto).

-- shifted variant.

Down cursor (ditto).

-- shifted variant (only terminfo).

Up cursor (ditto).

-- shifted variant (only terminfo).

Function key 0.
Add one for each function key up to

and

respectively.

Function key 10.

Function key 11.
Add one for each function key up to

and

respectively.
Some terminals support key-modifier combination extensions, e.g.,

For example, the delete key,

in its shifted variant, the name is mutated to

then a number is appended for the states
finally
The same for the left cursor key,
It is advisable to use an initial escape or other control character (e.g.,

for bindings which describe user key combinations (as opposed to purely
terminal capability based ones), in order to avoid ambiguities whether
input belongs to key sequences or not; it also reduces search time.
Adjusting

may help shall keys and sequences be falsely recognized.
 Calls the given macro, which must have been created via

(see there for more), otherwise an

error occurs.
Calling macros recursively will at some time excess the stack size
limit, causing a hard program abortion; if recursively calling a macro
is the last command of the current macro, consider to use the command

which will first release all resources of the current macro before
replacing the current macro with the called one.
Identical to

if the given macro has been created via

but does not fail nor warn if the macro does not exist.
(ch) Change the working directory to

or the given argument.
Synonym for
[Option]Takes an optional message list and a filename and saves the certificates
contained within the message signatures to the named file in both
human-readable and PEM format.
The certificates can later be used to send encrypted messages to the
respective message senders by setting

variables.
 Manage alias mappings for (conversion of)

Alias processing is not performed for

e.g.,

and mappings are ineffective if character set conversion is not available

does not announce

Expansion happens recursively for cases where aliases point to other
aliases (builtin loop limit: 8).

The latter command deletes all aliases given as arguments,
or all at once when given the asterisk

The former shows the list of all currently defined aliases if used
without arguments, or the target of the given single argument;
when given two arguments, hyphen-minus

being the first, the second is instead expanded recursively.
In all other cases the given arguments are treated as pairs of character
sets and their desired target alias name, creating new or updating
already existing aliases.
(ch) Change the working directory to

or the given argument.
Synonym for
Only applicable to

ed

mode.
Takes a message list and makes all replies to these messages invisible
in header summaries, except for

messages and the

Also when a message with collapsed replies is displayed,
all of these are automatically uncollapsed.
The latter command undoes collapsing.
[Option]
The type of colour is given as the (case-insensitive) first argument,
which must be one of

for 256-colour terminals,
or

for the standard 8-colour ANSI / ISO 6429 colour palette and

or

for monochrome terminals.
Monochrome terminals cannot deal with colours, but only (some) font
attributes.

Without further arguments the list of all currently defined mappings
for the given colour type is shown (as a special case giving

or

will show the mappings of all types).
Otherwise the second argument defines the mappable slot, and the third
argument a (comma-separated list of) colour and font attribute
specification(s), and the optional fourth argument can be used to
specify a precondition: if conditioned mappings exist they are tested in
(creation) order unless a (case-insensitive) match has been found, and
the default mapping (if any has been established) will only be chosen as
a last resort.
The types of precondition available depend on the mappable slot (see

for some examples), the following of which exist:

Mappings prefixed with

are used for the [Option]
and do not support preconditions.
This mapping is used for the position indicator that is visible when
a line cannot be fully displayed on the screen.

Used for the
Mappings prefixed with

are used in header summaries, and they all understand the preconditions

(the current message) and

for elder messages (only honoured in conjunction with
This mapping is used for the

that can be created with the

or

formats of the variable
For the complete header summary line except the

and the thread structure.

For the thread structure which can be created with the

format of the variable
Mappings prefixed with

are used when displaying messages.
This mapping is used for so-called

lines, which are MBOX file format specific header lines (also see
For header lines.
A comma-separated list of headers to which the mapping applies may be
given as a precondition; if the [Option]available then if any of the
is seen the precondition will be evaluated as (an extended) one.

For the introductional message info line.

For MIME part info lines.
The following (case-insensitive) colour definitions and font attributes
are understood, multiple of which can be specified in a comma-separated
list:
a font attribute:
or

It is possible (and often applicable) to specify multiple font
attributes for a single mapping.

foreground colour attribute:
or

To specify a 256-colour mode a decimal number colour specification in
the range 0 to 255, inclusive, is supported, and interpreted as follows:
the standard ISO 6429 colours, as above.

high intensity variants of the standard colours.

216 colours in tuples of 6.

grayscale from black to white in 24 steps.
#!/bin/sh -
fg() { printf "\033[38;5;${1}m($1)"; }
bg() { printf "\033[48;5;${1}m($1)"; }
i=0
while [ $i -lt 256 ]; do fg $i; i=$(($i + 1)); done
printf "\033[0m\n"
i=0
while [ $i -lt 256 ]; do bg $i; i=$(($i + 1)); done
printf "\033[0m\n"
background colour attribute (see

for possible values).
The command

will remove for the given colour type (the special type

selects all) the given mapping; if the optional precondition argument is
given only the exact tuple of mapping and precondition is removed.
The special name

will remove all mappings (no precondition allowed), thus

will remove all established mappings.
 Define or list, and remove, respectively, command aliases.
An (command)alias can be used everywhere a normal command can be used,
but always takes precedence: any arguments that are given to the command
alias are joined onto the alias expansion, and the resulting string
forms the command line that is, in effect, executed.
The latter command removes all given aliases, the special name asterisk

will remove all existing aliases.
When used without arguments the former shows a list of all currently
known aliases, with one argument only the expansion of the given one.

With two or more arguments a command alias is defined or updated: the
first argument is the name under which the remaining command line should
be accessible, the content of which can be just about anything.
An alias may itself expand to another alias, but to avoid expansion loops
further expansion will be prevented if an alias refers to itself or if
an expansion depth limit is reached.
Explicit expansion prevention is available via reverse solidus

one of the
? commandalias xx
\%mail? commandalias xx echo hello,
? commandalias xx
commandalias xx 'echo hello,'
? xx
hello,
? xx world
hello, world
(C) Copy messages to files whose names are derived from the author of
the respective message and do not mark them as being saved;
otherwise identical to
(c) Copy messages to the named file and do not mark them as being saved;
otherwise identical to
 A multiplexer command which provides C-style string operations on
8-bit bytes without a notion of locale settings and character sets,
effectively assuming ASCII data.
For numeric and other operations refer to
one of the

is supported.
The error result is

for usage errors and numeric results, the empty string otherwise;
missing data errors, as for unsuccessful searches, result in the

error number being set to

Where the question mark

modifier suffix is supported, a case-insensitive (ASCII mapping)
operation mode is supported; the keyword

is optional, e.g.,

and

are identical.
Queries the length of the given argument.

Calculates a hash value of the given argument.
The latter will return a 32-bit result regardless of host environment.

modifier suffix is supported.
These use Chris Torek's hash algorithm, the resulting hash value is
bit mixed as shown by Bret Mulvey.

Search for the second in the first argument.
Shows the resulting 0-based offset shall it have been found.

modifier suffix is supported.

Creates a substring of its first argument.
The optional second argument is the 0-based starting offset,
a negative one counts from the end;
the optional third argument specifies the length of the desired result,
a negative length leaves off the given number of bytes at the end of the
original string; by default the entire string is used.
This operation tries to work around faulty arguments (set

for error logs), but reports them via the error number

as
Trim away whitespace characters from both ends of the argument.

Trim away whitespace characters from the begin of the argument.

Trim away whitespace characters from the end of the argument.
Show the name of the current working directory, as reported by

Supports

(see

The return status is tracked via
[Option]
Encrypted messages are first decrypted, if possible, and then copied.
[Option]
Encrypted messages are first decrypted, if possible, and then copied.
The latter command deletes the given macro, the special name

will discard all existing macros.
Deletion of (a) macro(s) can be performed from within running (a)
macro(s), including self-deletion.
Without arguments the former command prints the current list of macros,
including their content, otherwise it defines a macro, replacing an
existing one of the same name as applicable.

A defined macro can be invoked explicitly by using the
and

commands, or implicitly if a macro hook is triggered, e.g., a

Execution of a macro body can be stopped from within by calling
Temporary macro block-scope variables can be created or deleted with the

command modifier in conjunction with the commands

and

respectively.
To enforce unrolling of changes made to (global)

the command

can be used instead; its covered scope depends on how (i.e.,

normal macro, folder hook, hook,

switch) the macro is invoked.

Inside a

ed macro, the given positional parameters are implicitly local
to the macro's scope, and may be accessed via the variables
and

and any other positive unsigned decimal number less than or equal to

Positional parameters can be

ed, or become completely replaced, removed etc. via

A helpful command for numeric computation and string evaluations is
offers C-style byte string operations.

define name {
  command1
  command2
  ...
  commandN
}

# E.g.
define exmac {
  echo Parameter 1 of ${#} is ${1}, all: ${*} / ${@}
  return 1000 0
}
call exmac Hello macro exmac!
echo ${?}/${!}/${^ERRNAME}
(d, u) Marks the given message list as being or not being

respectively; if no argument has been specified then the usual search
for a visible message is performed, as documented for

showing only the next input prompt if the search fails.
Deleted messages will neither be saved in the
nor will they be available for most other commands.
If the

variable is set, the new

or the last message restored, respectively, is automatically

d; also see
 Digging (information out of) messages is possible through

objects, which can be

d for the given message number; in compose mode the hyphen-minus

will instead open the message that is being composed.
If a hyphen-minus is given as the optional third argument then output
will be generated on the standard output channel instead of being
subject to consumation by the

or

commands.

The objects may be

d again by giving the same identifier used for creation;
this step could be omitted: objects will be automatically closed
when the active mailbox or the compose mode is left, respectively.
In all other use cases the second argument is an object identifier,
and the third and all following arguments are interpreted as via

(see
? vput = msgno; digmsg create $msgno
? digmsg $msgno header list;   readall x;   echon $x
210 Subject From To Message-ID References In-Reply-To Status
? digmsg $msgno header show Status;readall x;echon $x
212 Status
RO

? digmsg remove $msgno
(di) Identical to

Superseded by the multiplexer
Delete the given messages and automatically

the new

if one exists, regardless of the setting of
Move the

up or down by one message when given

or

argument, respectively.
Take message lists and mark each given message as being draft, or not
being draft, respectively, as documented in the section
 (ec) Echoes arguments to standard output and writes a trailing
newline, whereas the otherwise identical

does not.

is used,

are applied to the expanded arguments.
This command also supports

as documented in

and manages the error number

if data is stored in a variable then the return value reflects the
length of the result string in case of success and is

on error.
 Identical to

except that is echoes to standard error.
Also see

In interactive sessions the [Option]
will be used instead, if available and

was not used.
 Identical to

but does not write or store a trailing newline.
 Identical to

but does not write or store a trailing newline.
(e) Point the text

at each message from the given list in turn.
Modified contents are discarded unless the

variable is set, and are not used unless the mailbox can be written to
and the editor returns a successful exit status.

can be used instead for a more display oriented editor.
Part of the

(see there for more),

conditional -- if the condition of a preceding

was false, check the following condition and execute the following block
if it evaluates true.
(el) Part of the

(see there for more),

conditional -- if none of the conditions of the preceding

and

commands was true, the

block is executed.
(en) Marks the end of an

(see there for more),

conditional execution block.
 \%Mail
and which are managed in the program

Since some of the latter are a vivid part of \%Mailhowever, they are transparently integrated into the normal handling of
internal variables via

and

To integrate other environment variables of choice into this
transparent handling, and also to export internal variables into the
process environment where they normally are not, a

needs to become established with this command, as in, e.g.,
Afterwards changing such variables with

will cause automatic updates of the program environment, and therefore
be inherited by newly created child processes.
Sufficient system support provided (it was in BSD as early as 1987, and
is standardized since Y2K) removing such variables with

will remove them also from the program environment, but in any way
the knowledge they ever have been

ed will be lost.
Note that this implies that

may cause loss of such links.

The command

will remove an existing link, but leaves the variables as such intact.
Additionally the subcommands

and

are provided, which work exactly the same as the documented commands

and

but (additionally un)link the variable(s) with the program environment
and thus immediately export them to, or remove them from (if possible),
respectively, the program environment.
[Option]that messages scroll by too fast to become recognized.
Therefore an error log queue is available which can be managed by
or no argument will display and clear the queue,

will only clear the queue.
The queue is finite: if its maximum size is reached any new message
replaces the eldest.
There are also the variables

and
 Construct a command by concatenating the arguments, separated with
a single space character, and then evaluate the result.
This command passes through the exit status

and error number

of the evaluated command; also see
define xxx {
  echo "xxx arg <$1>"
  shift
  if [ $# -gt 0 ]
    \xcall xxx "$@"
  endif
}
define yyy {
  eval "$@ ' ball"
}
call yyy '\call xxx' "b\$'\t'u ' "
call xxx arg <b      u>
call xxx arg <  >
call xxx arg <ball>
(ex or x) Exit from \%Mailany saving of messages in the
as well as a possibly tracked line editor

The optional status number argument will be passed through to

 For now it can happen that the given status will be overwritten,
later this will only occur if a later error needs to be reported onto an
otherwise success indicating status.
(Fi) Like

but open the mailbox read-only.
(fi) The file command switches to a new mailbox.
Without arguments it shows status information of the current mailbox.
If an argument is given, it will write out changes (such as deletions)
the user has made, open a new mailbox, update the internal variables

and

execute an according

if one is installed, and optionally display a summary of

if the variable

is set.
will be applied to the

argument, and

prefixes are, i.e., URL syntax is understood, e.g.,

if a protocol prefix is used the mailbox type is fixated and neither
the auto-detection (read on) nor the

mechanisms apply.
[Option]be accessed securely via

if so supported.
Network communication socket timeouts are configurable, e.g.,

All generated network traffic may be proxied over the SOCKS5 server given in
[Option]
(POP3) and

(POP3 with TLS encrypted transport),

and

The

part is valid only for IMAP; there it defaults to

Network URLs require a special encoding as documented in the section
If the resulting file protocol (MBOX database)

is located on a local filesystem then the list of all registered

s is traversed in order to see whether a transparent intermediate
conversion step is necessary to handle the given mailbox, in which case
\%Maila temporary file, respectively.
Changing hooks will not affect already opened mailboxes.
For example, the following creates hooks for the

compression tool and a combined compressed and encrypted format:

? filetype \
    gzip 'gzip -dc' 'gzip -c' \
    zst.pgp 'gpg -d | zstd -dc' 'zstd -19 -zc | gpg -e'
s also provide limited (case-sensitive) auto-completion capabilities.
For example

will be found for

provided that a corresponding handler is installed.
It will neither find

nor

however, on the other hand doing an explicit

will find and use the handler for
MBOX databases will always be protected via file-region locks

during file operations in order to avoid inconsistencies due to
concurrent modifications.

[Option]

as well as
es in general will also be protected by so-called dotlock files,
the traditional way of mail spool file locking: for any file

a lock file

will be created for the duration of the synchronization --
as necessary an external privileged dotlock helper will be used
to create the dotlock file in the same directory and with the same user
and group identities as the file of interest.

can be used to turn off additional dotlock files, shall the need arise.
There is also a related entry in the
\%Mailfiles, but it will detect invalid message boundaries in this mode and
complain (even more with

if any is seen: in this case

can be used to create a valid MBOX database from the invalid input.

[Option]
refers to a directory with the subdirectories
and

then it is treated as a folder in

format.
The maildir format stores each message in its own file, and has been
designed so that file locking is not necessary when reading or writing
files.

 If no protocol has been fixated and no existing file has
been found, the variable

controls the format of mailboxes yet to be created.
 Define, list, and remove, respectively, file handler hooks,
which provide (shell) commands that enable \%Mailfiles from and to files with the registered file extensions, as shown
and described for

The extensions are used case-insensitively, yet the auto-completion
feature of, e.g.,

will only work case-sensitively.
An intermediate temporary file will be used to store the expanded data.
The latter command will remove hooks for all given extensions, asterisk

will remove all existing handlers.

When used without arguments the former shows a list of all currently
defined file hooks, with one argument the expansion of the given alias.
Otherwise three arguments are expected, the first specifying the file
extension for which the hook is meant, and the second and third defining
the load- and save commands to deal with the file type, respectively,
both of which must read from standard input and write to standard
output.
Changing hooks will not affect already opened mailboxes ( except below).
 For now too much work is done, and files are oftened read in twice
where once would be sufficient: this can cause problems if a filetype is
changed while such a file is opened; this was already so with the
built-in support of .gz etc. in Heirloom, and will vanish in v15.
 For now all handler strings are passed to the
prefix to load and save commands may mean to bypass this shell instance:
placing a leading space will avoid any possible misinterpretations.

? filetype bz2 'bzip2 -dc' 'bzip2 -zc' \
    gz 'gzip -dc' 'gzip -c'  xz 'xz -dc' 'xz -zc' \
    zst 'zstd -dc' 'zstd -19 -zc' \
    zst.pgp 'gpg -d | zstd -dc' 'zstd -19 -zc | gpg -e'
? set record=+sent.zst.pgp
Take message lists and mark the messages as being flagged, or not being
flagged, respectively, for urgent/special attention.
See the section
(fold) The same as
With no arguments, list the names of the folders in the folder directory.
With an existing folder as an argument,
lists the names of folders below the named folder.
(F) Similar to

but saves the message in a file named after the local part of the first
recipient's address (instead of in
(fo) Similar to

but saves the message in a file named after the local part of the first
recipient's address (instead of in
Similar to

but responds to all recipients regardless of the

variable.
Similar to

but responds to the sender only regardless of the

variable.
Similar to

but saves the message in a file named after the local part of the
recipient's address (instead of in
Takes a message and the address of a recipient
and forwards the message to him.
The text of the original message is included in the new one,
with the value of the

variable preceding, and the value of

succeeding it.
To filter the included header fields to the desired subset use the

slot of the white- and blacklisting command

Only the first part of a multipart message is included unless

and recipient addresses will be stripped from comments, names
etc. unless the internal variable

is set.

This may generate the errors

if no receiver has been specified,

if some addressees where rejected by
if no applicable messages have been given,

if multiple messages have been specified,

if an I/O error occurs,

if a necessary character set conversion fails, and

for other errors.
(f) Takes a list of message specifications and displays a summary of
their message headers, exactly as via

making the first message of the result the new

(the last message if

is set).
An alias of this command is

Also see
[Obsolete]

[Obsolete]

[Obsolete]

[Obsolete]

[Obsolete]
 Multiplexer command to manage white- and blacklisting
selections of header fields for a variety of applications.
Without arguments the set of contexts that have settings is displayed.
When given arguments, the first argument is the context to which the
command applies, one of (case-insensitive)

for display purposes (via, e.g.,
for selecting which headers shall be stored persistently when
or even

ing messages (note that MIME related etc. header fields should not be
ignored in order to not destroy usability of the message in this case),

for stripping down messages when

ing message (has no effect if

is set), and

for defining user-defined set of fields for the command
The current settings of the given context are displayed if it is the
only argument.
A second argument denotes the type of restriction that is to be chosen,
it may be (a case-insensitive prefix of)

or

for white- and blacklisting purposes, respectively.
Establishing a whitelist suppresses inspection of the corresponding
blacklist.

If no further argument is given the current settings of the given type
will be displayed, otherwise the remaining arguments specify header
fields, which [Option]to the given type.
The special wildcard field (asterisk,

will establish a (fast) shorthand setting which covers all fields.

The latter command always takes three or more arguments and can be used
to remove selections, i.e., from the given context, the given type of
list, all the given headers will be removed, the special argument

will remove all headers.
(h) Show the current group of headers, the size of which depends on
the variable

in interactive mode, and the format of which can be defined with

If a message-specification is given the group of headers containing the
first message therein is shown and the message at the top of the screen
becomes the new

the last message is targeted if

is set.
(hel) A synonym for
[Option]
all history entries are shown (this mode also supports a more

output).

will replace the list of entries with the content of

and

will dump the current list to said file, replacing former content.

will delete all history entries.
The argument can also be a signed decimal

which will select and evaluate the respective history entry, and move it
to the top of the history; a negative number is used as an offset to the
current command, e.g.,

will select the last command, the history top.
Please see

for more on this topic.
(ho, also

Takes a message list and marks each message therein to be saved in the
user's system

instead of in the
Does not override the

command.
\%Mail
command issued after

will display the following message, not the current one.
(i) Part of the

conditional execution construct -- if the given condition is true then
the encapsulated block is executed.
The POSIX standard only supports the (case-insensitive) conditions

eceive
and

end, the remaining are non-portable extensions.
 In conjunction with the

command prefix(es)

and more test operators are available.

if receive
  commands ...
else
  commands ...
endif
Further (case-insensitive) one-argument conditions are

erminal which evaluates to true in interactive (terminal) sessions,
as well as any boolean value (see

for textual boolean representations) to mark an enwrapped block as

or

(Remarks: condition syntax errors skip all branches until
 and without

It is possible to check

as well as

variables for existence or compare their expansion against a user given
value or another variable by using the
conditional trigger character;
a variable on the right hand side may be signalled using the same
mechanism.
Variable names may be enclosed in a pair of matching braces.
When this mode has been triggered, several operators are available
([v15-compat]
they are always available, and there is no trigger: variables will have
been expanded by the shell-compatible parser before the

etc. command sees them).

[v15-compat]Variables can be tested for existence and expansion:

will test whether the given variable exists, e.g.,

will evaluate to true when

is set, whereas

will if it is not.

will be true if the variable is set and expands to a non-empty string,

only if the expansion is empty, whether the variable exists or not.
The remaining conditions take three arguments.

Integer operators treat the arguments on the left and right hand side of
the operator as integral numbers and compare them arithmetically.
It is an error if any of the operands is not a valid integer, an empty
argument (which implies it had been quoted) is treated as if it were 0.
Via the question mark

modifier suffix a saturated operation mode is available where numbers
will linger at the minimum or maximum possible value, instead of
overflowing (or trapping), the keyword

is optional, e.g.,
and

are identical.
Available operators are

(less than),

(less than or equal to),

(equal),

(not equal),

(greater than or equal to), and

(greater than).

String and regular expression data operators compare the left and right
hand side according to their textual content.
Unset variables are treated as the empty string.
Via the question mark

modifier suffix a case-insensitive operation mode is available, the keyword

is optional, e.g.,

and

are identical.

Available string operators are

(less than),

(less than or equal to),

(equal),

(not equal),

(greater than or equal to),

(greater than),

(is substring of) and

(is not substring of).
By default these operators work on bytes and (therefore) do not take
into account character set specifics.
If the case-insensitivity modifier has been used, case is ignored
according to the rules of the US-ASCII encoding, i.e., bytes are
still compared.

When the [Option]string operators

and

can be used.
They treat the right hand side as an extended regular expression that is
matched according to the active locale (see

i.e., character sets should be honoured correctly.

Conditions can be joined via AND-OR lists (where the AND operator is

and the OR operator is

which have equal precedence and will be evaluated with left
associativity, thus using the same syntax that is known for the

It is also possible to form groups of conditions and lists by enclosing
them in pairs of brackets

which may be interlocked within each other, and also be joined via
AND-OR lists.

The results of individual conditions and entire groups may be modified
via unary operators: the unary operator

will reverse the result.

wysh set v15-compat=yes # with value: automatic "wysh"!
if -N debug;echo *debug* set;else;echo not;endif
if [ "$ttycharset" == UTF-8 ] || \
    [ "$ttycharset" ==?case UTF8 ]
  echo *ttycharset* is UTF-8, the former case-sensitive!
endif
set t1=one t2=one
if [ "${t1}" == "${t2}" ]
  echo These two variables are equal
endif
if "$features" =% +regex && "$TERM" =~?case "^xterm.*"
  echo ..in an X terminal
endif
if [ [ true ] && [ [ "${debug}" != '' ] || \
    [ "$verbose" != '' ] ] ]
  echo Noisy, noisy
endif
if true && [ -n "$debug" || -n "${verbose}" ]
  echo Left associativity, as is known from the shell
endif
(ig) Identical to

Superseded by the multiplexer
Shows the names of all available commands, alphabetically sorted.
If given any non-whitespace argument the list will be shown in the order
in which command prefixes are searched.
[Option]
additional information will be provided for each command: the argument
type will be indicated, the documentation string will be shown,
and the set of command flags will show up:
command supports the command modifier
command supports the command modifier
the error number is tracked in
whether the command needs an active mailbox, a
indicators whether command is ..3m'..3m'.
usable in interactive or batch mode
usable in send mode.

allowed to be used when running in a subprocess instance,
e.g., from within a macro that is called via
indicators whether command is not ..3m'..3m'.
available in compose mode.

available during program startup, e.g., in
The command produces
entries.
Enforce change localization of

(linked)

as well as (global)

meaning that their state will be reverted to the former one once the

is left.
Just like the command modifier

which provides block-scope localization for some commands (instead),
it can only be used inside of macro definition blocks introduced by

or

The covered scope of an

is left once a different account is activated, and some macros, notably

use their own specific notion of covered scope, here it will be extended
until the folder is left again.

This setting stacks up: i.e., if

enables change localization and calls

which explicitly resets localization, then any value changes within

will still be reverted when the scope of

is left.
(Caveats: if in this example

changes to a different

which sets some variables that are already covered by localizations,
their scope will be extended, and in fact leaving the

will (thus) restore settings in (likely) global scope which actually
were defined in a local, macro private context!)

This command takes one or two arguments, the optional first one
specifies an attribute that may be one of

which refers to the current scope and is thus the default,

which causes any macro that is being

ed to be started with localization enabled by default, as well as

which (if enabled) disallows any called macro to turn off localization:
like this it can be ensured that once the current scope regains control,
any changes made in deeper levels have been reverted.
The latter two are mutually exclusive, and neither affects

The (second) argument is interpreted as a boolean (string, see

and states whether the given attribute shall be turned on or off.

define temporary_settings {
  set possibly_global_option1
  localopts on
  set localized_option1
  set localized_option2
  localopts scope off
  set possibly_global_option2
}
Reply to messages that come in via known

or subscribed

mailing lists, or pretend to do so (see

on top of the usual

functionality this will actively resort and even remove message
recipients in order to generate a message that is supposed to be sent to
a mailing list.
For example it will also implicitly generate a

header if that seems useful, regardless of the setting of the variable

For more documentation please refer to
This may generate the errors

if no receiver has been specified,

if some addressees where rejected by
if no applicable messages have been given,

if an I/O error occurs,

if a necessary character set conversion fails, and

for other errors.
Occurrence of some of the errors depend on the value of

Any error stops processing of further messages.
Similar to

but saves the message in a file named after the local part of the first
recipient's address (instead of in
(m) Takes a (list of) recipient address(es) as (an) argument(s),
or asks on standard input if none were given;
then collects the remaining mail content and sends it out.
Unless the internal variable

is set recipient addresses will be stripped from comments, names etc.
For more documentation please refer to
This may generate the errors

if no receiver has been specified,

if some addressees where rejected by
if no applicable messages have been given,

if multiple messages have been specified,

if an I/O error occurs,

if a necessary character set conversion fails, and

for other errors.
Occurrence of some of the errors depend on the value of
(mb) The given message list is to be sent to the
when \%Mail
is set.
 This command can only be used in a
 Without arguments the content of the MIME type cache will displayed;
a more verbose listing will be produced if either of

or

are set.
When given arguments they will be joined, interpreted as shown in

(also see

and the resulting entry will be added (prepended) to the cache.
In any event MIME type sources are loaded first as necessary -

can be used to fine-tune which sources are actually loaded.

The latter command deletes all specifications of the given MIME type, thus

will remove all registered specifications for the MIME type

The special name

will discard all existing MIME types, just as will

but which also reenables cache initialization via
 Only available in interactive mode, this command allows one to
display MIME parts which require external MIME handler programs to run
which do not integrate in \%Mail
output (see

( No syntax to directly address parts, this restriction may vanish.)
The user will be asked for each non-text part of the given message in
turn whether the registered handler shall be used to display the part.
 Manage the list of known

subscriptions are controlled via

The latter command deletes all given arguments,
or all at once when given the asterisk

The former shows the list of all currently known lists if used
without arguments, otherwise the given arguments will become known.
[Option]

will be interpreted as one, possibly matching many addresses;
these will be sequentially matched via linked lists instead of being
looked up in a dictionary.
Building upon the command pair

but only managing the subscription attribute of mailing lists.
(The former will also create not yet existing mailing lists.)
Similar to

but moves the messages to a file named after the local part of the
sender address of the first message (instead of in
Acts like

but marks the messages for deletion if they were transferred
successfully.
Like

but also displays header fields which would not pass the

selection, and all MIME parts.
Identical to
Invokes the

on the given messages, even in non-interactive mode and as long as the
standard output is a terminal.
Identical to
[Option]
has been given the content of the

cache is shown, loading it first as necessary.
If the argument is

then the cache will only be initialized and

will remove its contents.
Note that \%Mail
to unlock further attempts.
See
and the section

the section

documents the file format in detail.
Checks for new mail in the current folder without committing any changes
before.
If new mail is present, a message is shown.
If the

variable is set,
the headers of each new message are also shown.
This command is not available for all mailbox types.
(n) (like

or

Goes to the next message in sequence and types it.
With an argument list, types the next matching message.
Same as
Same as
If the current folder is accessed via a network connection, a

command is sent, otherwise no operation is performed.
Like

but also displays header fields which would not pass the

selection, and all MIME parts.
Identical to
Invokes the

on the given messages, even in non-interactive mode and as long as the
standard output is a terminal.
Identical to
Like

but also pipes header fields which would not pass the

selection, and all parts of MIME

messages.
(pi) Takes an optional message list and shell command (that defaults to

and pipes the messages through the command.
If the

variable is set,
every message is followed by a formfeed character.
(pre) A synonym for
(P) Alias for
(p) Research

equivalent of
(q) Terminates the session, saving all undeleted, unsaved messages in
the current
preserving all messages marked with

or

or never referenced in the system

and removing all other messages from the
If new mail has arrived during the session,
the message

will be shown.
If given while editing a mailbox file with the command line option

then the edit file is rewritten.
A return to the shell is effected,
unless the rewrite of edit file fails,
in which case the user can escape with the exit command.
The optional status number argument will be passed through to

 For now it can happen that the given status will be overwritten,
later this will only occur if a later error needs to be reported onto an
otherwise success indicating status.
 Read a line from standard input, or the channel set active via

and assign the data, which will be split as indicated by

to the given variables.
The variable names are checked by the same rules as documented for

and the same error codes will be seen in

the exit status

indicates the number of bytes read, it will be

with the error number

set to

in case of I/O errors, or

upon End-Of-File.
If there are more fields than variables, assigns successive fields to the
last given variable.
If there are less fields than variables, assigns the empty string to the
remains.

? read a b c
   H  e  l  l  o
? echo "<$a> <$b> <$c>"
<H> <e> <l  l  o>
? wysh set ifs=:; read a b c;unset ifs
hey2.0,:"'you    ",:world!:mars.:
? echo $?/$^ERRNAME / <$a><$b><$c>
0/NONE / <hey2.0,><"'you    ",><world!:mars.:><><>
 Read anything from standard input, or the channel set active via

and assign the data to the given variable.
The variable name is checked by the same rules as documented for

and the same error codes will be seen in

the exit status

indicates the number of bytes read, it will be

with the error number

set to

in case of I/O errors, or

upon End-Of-File.
 The input data length is restricted to 31-bits.
 Manages input channels for

and

to be used to avoid complicated or impracticable code, like calling

from within a macro in non-interactive mode.
Without arguments, or when the first argument is

a listing of all known channels is printed.
Channels can otherwise be

d, and existing channels can be

active and

d by giving the string used for creation.

The channel name is expected to be a file descriptor number, or,
if parsing the numeric fails, an input file name that undergoes

E.g. (this example requires a modern shell):

$ LC_ALL=C printf 'echon "hey, "\nread a\nyou\necho $a' |\
  LC_ALL=C \%mailhey, you
$ LC_ALL=C printf 'echon "hey, "\nread a\necho $a' |\
  LC_ALL=C 6<<< 'you' \%mailhey, you
Removes the named files or directories.

including shell pathname wildcard pattern expansions

are performed on the arguments.
If a name refer to a mailbox, e.g., a Maildir mailbox, then a mailbox
type specific removal will be performed, deleting the complete mailbox.
The user is asked for confirmation in interactive mode.
Takes the name of an existing folder
and the name for the new folder
and renames the first to the second one.

including shell pathname wildcard pattern expansions

are performed on both arguments.
Both folders must be of the same type.
(R) Identical to

except that it replies to only the sender of each message of the given
list, by using the first message as the template to quote, for the

etc.; setting

will exchange this command with
(r) Take a message and group-responds to it by addressing the sender
and all recipients, subject to

processing.
as well as

influence response behaviour.
Unless the internal variable

is set recipient addresses will be stripped from comments, names etc.

as well as

configure whether responded-to message shall be quoted etc.; setting

will exchange this command with

The command

offers special support for replying to mailing lists.
For more documentation please refer to
This may generate the errors

if no receiver has been specified,

if some addressees where rejected by
if no applicable messages have been given,

if an I/O error occurs,

if a necessary character set conversion fails, and

for other errors.
Occurrence of some of the errors depend on the value of

Any error stops processing of further messages.
Similar to

but initiates a group-reply regardless of the value of
Similar to

but responds to the sender only regardless of the value of
Like

but does not add any header lines.
This is not a way to hide the sender's identity,
but useful for sending a message again to the same recipients.
Takes a list of messages and a user name
and sends each message to the named user.

and related header fields are prepended to the new copy of the message.
Saving in

is only performed if

is set.

This may generate the errors

if no receiver has been specified,

if some addressees where rejected by
if no applicable messages have been given,

if an I/O error occurs,

if a necessary character set conversion fails, and

for other errors.
Occurrence of some of the errors depend on the value of

Any error stops processing of further messages.
Same as
Same as
Same as
Same as
(ret) Superseded by the multiplexer
Only available inside the scope of a

d macro or an

this will stop evaluation of any further macro content, and return
execution control to the caller.
The two optional parameters must be specified as positive decimal
numbers and default to the value 0:
the first argument specifies the signed 32-bit return value (stored in

 and later extended to signed 64-bit),
the second the signed 32-bit error number (stored in

As documented for

a non-0 exit status may cause the program to exit.
(S) Similar to

but saves the messages in a file named after the local part of the
sender of the first message instead of (in

and) taking a filename argument; the variable

is inspected to decide on the actual storage location.
(s) Takes a message list and a filename and appends each message in turn
to the end of the file.

including shell pathname wildcard pattern expansions

is performed on the filename.
If no filename is given, the
is used.
The filename in quotes, followed by the generated character count
is echoed on the user's terminal.
If editing a
the messages are marked for deletion.

will be applied.
To filter the saved header fields to the desired subset use the

slot of the white- and blacklisting command
[Obsolete]

[Obsolete]

[Obsolete]
Takes a message specification (list) and displays a header summary of
all matching messages, as via

This command is an alias of

Also see
Takes a message list and marks all messages as having been read.
(se,  uns) The latter command will delete all given global
variables, or only block-scope local ones if the

command modifier has been used.
The former, when used without arguments, will show all
currently known variables, being more verbose if either of

or

is set.
Remarks: this list mode will not automatically link-in known

variables, but only explicit addressing will, e.g., via

using a variable in an

condition or a string passed to

explicit

ting, as well as some program-internal use cases.

Otherwise the given variables (and arguments) are set or adjusted.
Arguments are of the form

(no space before or after

or plain

if there is no value, i.e., a boolean variable.
If a name begins with

as in

the effect is the same as invoking the

command with the remaining part of the variable

 In conjunction with the
command prefix(es)

can be used to quote arguments as necessary.
 Otherwise quotation marks may be placed around any part of the
assignment statement to quote blanks or tabs.

When operating in global scope any

that is known to map to an environment variable will automatically cause
updates in the program environment (unsetting a variable in the
environment requires corresponding system support) -- use the command

for further environmental control.
If the command modifier

has been used to alter the command to work in block-scope all variables
have values (may they be empty), and creation of names which shadow

is actively prevented ( shadowing of linked

variables and free-form versions of variable chains is not yet detected).
Also see

and the sections

and
? wysh set indentprefix=' -> '
? wysh set atab=$'	' aspace=' ' zero=0
Apply shell quoting rules to the given raw-data arguments.
Supports

(see

The first argument specifies the operation:

or

cause shell quoting to be applied to the remains of the line, and
expanded away thereof, respectively.
If the former is prefixed with a plus-sign, the quoted result will not
be roundtrip enabled, and thus can be decoded only in the very same
environment that was used to perform the encode; also see

If the coding operation fails the error number

is set to

and the unmodified input is used as the result; the error number may
change again due to output or result storage errors.
 (sh) Invokes an interactive version of the shell,
and returns its exit status.
 Manage the file- or pathname shortcuts as documented for

The latter command deletes all shortcuts given as arguments,
or all at once when given the asterisk

The former shows the list of all currently defined shortcuts if used
without arguments, the target of the given with a single argument.
Otherwise arguments are treated as pairs of shortcuts and their desired
expansion, creating new or updating already existing ones.
 Shift the positional parameter stack (starting at

by the given number (which must be a positive decimal),
or 1 if no argument has been given.
It is an error if the value exceeds the number of positional parameters.
If the given number is 0, no action is performed, successfully.
The stack as such can be managed via

Note this command will fail in

and hook macros unless the positional parameter stack has been
explicitly created in the current context via
Like

but performs neither MIME decoding nor decryption, so that the raw
message text is shown.
(si) Shows the size in characters of each message of the given
message-list.
 Sleep for the specified number of seconds (and optionally
milliseconds), by default interruptable.
If a third argument is given the sleep will be uninterruptible,
otherwise the error number

will be set to

if the sleep has been interrupted.
The command will fail and the error number will be

if the given duration(s) overflow the time datatype, and

if the given durations are no valid integers.
The latter command disables sorted or threaded mode, returns to normal
message order and, if the

variable is set,
displays a header summary.
The former command shows the current sorting criterion when used without
an argument, but creates a sorted representation of the current folder
otherwise, and changes the

command and the addressing modes such that they refer to messages in
the sorted order.
Message numbers are the same as in regular mode.
If the

variable is set,
a header summary in the new order is also displayed.
Automatic folder sorting can be enabled by setting the

variable, as in, e.g.,

Possible sorting criterions are:
Sort the messages by their

field, that is by the time they were sent.

Sort messages by the value of their

field, that is by the address of the sender.
If the

variable is set, the sender's real name (if any) is used.

Sort the messages by their size.

[Option]

Sort the messages by their message status.

Sort the messages by their subject.

Create a threaded display.

Sort messages by the value of their

field, that is by the address of the recipient.
If the

variable is set, the recipient's real name (if any) is used.
 (so) The source command reads commands from the given file.

will be applied.
If the given expanded argument ends with a vertical bar

then the argument will instead be interpreted as a shell command and
\%MailDependent on the settings of

and

and also dependent on whether the command modifier

had been used, encountering errors will stop sourcing of the given input.
 Note that

cannot be used from within macros that execute as

or

i.e., it can only be called from macros that were
 The difference to

(beside not supporting pipe syntax aka shell command input) is that
this command will not generate an error nor warn if the given file
argument cannot be opened successfully.
[Option]
flag.
[Option]
to forget it has ever used them to train its Bayesian filter.
Unless otherwise noted the

flag of the message is inspected to chose whether a message shall be
forgotten to be

or
[Option]
that they are

This also clears the

flag of the messages in question.
[Option]
without modifying the messages, but setting their

flag as appropriate; because the spam rating headers are lost the rate
will be forgotten once the mailbox is left.
Refer to the manual section

for the complete picture of spam handling in \%Mail

[Option]
flag.
[Option]
that they are

This also sets the

flag of the messages in question.

[Obsolete]
(consider using a

as necessary).
 TLS information and management command multiplexer to aid in

Commands support

if so documented (see

The result that is shown in case of errors is always the empty string,
errors can be identified via the error number

For example, string length overflows are caught and set

to

Note this command of course honours the overall TLS configuration.

? vput tls result fingerprint pop3s://ex.am.ple
? echo $?/$!/$^ERRNAME: $result
Show the

ed fingerprint of the certificate of the given HOST

where the port defaults to the HTTPS port, 443).

is actively ignored for the runtime of this command.
Only available if the term

is included in
Like

but always uses the
slot for white- and blacklisting header fields.
(to) Takes a message list and types out the first

lines of each message on the user's terminal.
Unless a special selection has been established for the

slot of the

command, the only header fields that are displayed are
and
will always use the
selection instead.
It is possible to apply compression to what is displayed by setting

Messages are decrypted and converted to the terminal character set
if necessary.
(tou) Takes a message list and marks the messages for saving in the
\%Mailas a following

command will display the following message instead of the current one.
(T) Like

but also displays header fields which would not pass the

selection, and all visualizable parts of MIME

messages.
(t) Takes a message list and types out each message on the user's terminal.
The display of message headers is selectable via

For MIME multipart messages, all parts with a content type of

all parts which have a registered MIME type handler (see

which produces plain text output, and all

parts are shown, others are hidden except for their headers.
Messages are decrypted and converted to the terminal character set
if necessary.
The command

can be used to display parts which are not displayable as plain text.

See
(una) See
See
See
See
See
See
See
See
See
[Obsolete]

[Obsolete]
Superseded by the multiplexer
See
See
See
Same as
Takes a message list and marks each message as not having been read.
Superseded by the multiplexer
[Obsolete]

[Obsolete]

 (uns) See
See
See
[Obsolete]Same as
Perform URL percent codec operations on the raw-data argument, rather
according to RFC 3986.
Supports

(see

and manages the error number

This is a character set agnostic and thus locale dependent operation,
and it may decode bytes which are invalid in the current

 This command does not know about URLs beside that.

The first argument specifies the operation:

or

perform plain URL percent en- and decoding, respectively.

and

perform a slightly modified operation which should be better for
pathnames: it does not allow a tilde

and will neither accept hyphen-minus

nor dot

as an initial character.
The remains of the line form the URL data which is to be converted.
If the coding operation fails the error number

is set to

and the unmodified input is used as the result; the error number may
change again due to output or result storage errors.
 This command produces the same output as the listing mode of

including

ity adjustments, but only for the given variables.
[Option]If a message is not a S/MIME signed message,
verification will fail for it.
The verification process checks if the message was signed using a valid
certificate,
if the message sender's email address matches one of those contained
within the certificate,
and if the message content has been altered.
Shows the

and

of \%Mail
form which also includes the build and running system environment.
This command supports

(see
 A multiplexer command which offers signed 64-bit numeric
calculations, as well as other, mostly string-based operations.
C-style byte string operations are available via

The first argument defines the number, type, and meaning of the
remaining arguments.
An empty number argument is treated as 0.
Supports

(see

The result shown in case of errors is

for usage errors and numeric operations, the empty string otherwise;

errors, like when a search operation failed, will also set the

error number to

Except when otherwise noted numeric arguments are parsed as signed 64-bit
numbers, and errors will be reported in the error number

as the numeric error
Numeric operations work on one or two signed 64-bit integers.
Numbers prefixed with

or

are interpreted as hexadecimal (base 16) numbers, whereas

indicates octal (base 8), and

as well as

denote binary (base 2) numbers.
It is possible to use any base in between 2 and 36, inclusive, with the

notation, where the base is given as an unsigned decimal number, e.g.,

is a different way of specifying a hexadecimal number.
Unsigned interpretation of a number can be enforced by prefixing an

(case-insensitively), e.g.,

this is not necessary for power-of-two bases (2, 4, 8, 16 and 32),
which will be interpreted as unsigned by default, but it still makes
a difference regarding overflow detection and overflow constant.
It is possible to enforce signed interpretation by (instead) prefixing a

(case-insensitively).
The number sign notation uses a permissive parse mode and as such
supports complicated conditions out of the box:

? wysh set ifs=:;read i;unset ifs;echo $i;vexpr pb 2 10#$i
   -009
<   -009>
0b1001
One integer is expected by assignment (equals sign

which does nothing but parsing the argument, thus detecting validity and
possible overflow conditions, unary not (tilde

which creates the bitwise complement, and unary plus and minus.
Two integers are used by addition (plus sign

subtraction (hyphen-minus

multiplication (asterisk

division (solidus

and modulo (percent sign

as well as for the bitwise operators logical or (vertical bar

to be quoted) ,
bitwise and (ampersand

to be quoted) ,
bitwise xor (circumflex

the bitwise signed left- and right shifts
as well as for the unsigned right shift
Another numeric operation is

which takes a number base in between 2 and 36, inclusive, and will act
on the second number given just the same as what equals sign

does, but the number result will be formatted in the base given, as
a signed 64-bit number unless unsigned interpretation of the input
number had been forced (with an u prefix).

Numeric operations support a saturated mode via the question mark

modifier suffix; the keyword

is optional, e.g.,
and

are identical.
In saturated mode overflow errors and division and modulo by zero are no
longer reported via the exit status, but the result will linger at the
minimum or maximum possible value, instead of overflowing (or trapping).
This is true also for the argument parse step.
For the bitwise shifts, the saturated maximum is 63.
Any caught overflow will be reported via the error number

as
? vput vexpr res -? +1 -9223372036854775808
? echo $?/$!/$^ERRNAME:$res
0/75/OVERFLOW:-9223372036854775808
Character set agnostic string functions have no notion of locale
settings and character sets.
Performs the usual

on its argument.

Perform the usual

on the argument, then call

and

respectively, in order to echo some stat fields such that

creates accessible variables.

Generates a random string of the given length, or of

bytes (a constant from

if the value 0 is given; the random string will be base64url encoded
according to RFC 4648, and thus be usable as a (portable) filename.
String operations work, sufficient support provided, according to the
active user's locale encoding and character set (see

Where the question mark

modifier suffix is supported, a case-insensitive operation mode is
available; the keyword

is optional, e.g.,

and

are identical.
(One-way) Converts the argument to something safely printable on the
terminal.

[Option]the regular expression given as the second argument.

modifier suffix is supported.
If the optional third argument has been given then instead of showing
the match offset a replacement operation is performed: the third
argument is treated as if specified within dollar-single-quote (see

and any occurrence of a positional parameter, e.g.,

etc. is replaced with the according match group of the regular expression:

? vput vexpr res regex bananarama \
    (.*)NanA(.*) '\${1}au\$2'
? echo $?/$!/$^ERRNAME:$res:
1/61/NODATA::
? vput vexpr res regex?case bananarama \
    (.*)NanA(.*) '\${1}uauf\$2'
? echo $?/$!/$^ERRNAME:$res:
0/0/NONE:baauf:
 Manage the positional parameter stack (see

as well as

If the first argument is

then the positional parameter stack of the current context, or the
global one, if there is none, is cleared.
If it is

then the remaining arguments will be used to (re)create the stack,
if the parameter stack size limit is excessed an

error will occur.

If the first argument is

a round-trip capable representation of the stack contents is created,
with each quoted parameter separated from each other with the first
character of

and followed by the first character of

if that is not empty and not identical to the first.
If that results in no separation at all a

character is used.
This mode supports

(see

I.e., the subcommands

and

can be used (in conjunction with

to (re)create an argument stack from and to a single variable losslessly.

? vpospar set hey, "'you    ", world!
? echo $#: <${1}><${2}><${3}>
? vput vpospar x quote
? vpospar clear
? echo $#: <${1}><${2}><${3}>
? eval vpospar set ${x}
? echo $#: <${1}><${2}><${3}>
(v) Takes a message list and invokes the

display editor on each message.
Modified contents are discarded unless the

variable is set, and are not used unless the mailbox can be written to
and the editor returns a successful exit status.

can be used instead for a less display oriented editor.
(w) For conventional messages the body without all headers is written.
The original message is never marked for deletion in the originating
mail folder.
The output is decrypted and converted to its native format as necessary.
If the output file exists, the text is appended.
If a message is in MIME multipart format its first part is written to
the specified file as for conventional messages, handling of the remains
depends on the execution mode.
No special handling of compressed files is performed.

In interactive mode the user is consecutively asked for the filenames of
the processed parts.
For convience saving of each part may be skipped by giving an empty
value, the same result as writing it to

Shell piping the part content by specifying a leading vertical bar

character for the filename is supported.
Other user input undergoes the usual

including shell pathname wildcard pattern expansions

and shell variable expansion for the message as such, not the individual
parts, and contents of the destination file are overwritten if the file
previously existed.

 In non-interactive mode any part which does not specify a filename
is ignored, and suspicious parts of filenames of the remaining parts are
URL percent encoded (as via

to prevent injection of malicious character sequences, resulting in
a filename that will be written into the current directory.
Existing files will not be overwritten, instead the part number or
a dot are appended after a number sign

to the name until file creation succeeds (or fails due to other
reasons).
 The sole difference to

is that the new macro is executed in place of the current one, which
will not regain control: all resources of the current macro will be
released first.
This implies that any setting covered by

will be forgotten and covered variables will become cleaned up.
If this command is not used from within a

ed macro it will silently be (a more expensive variant of)
(x) A synonym for
 \%Mail
fuls as described under the

command.
Without arguments this command scrolls to the next window of messages,
likewise if the argument is

An argument of

scrolls to the last,

scrolls to the first, and

to the last

of messages.
A number argument prefixed by

or

indicates that the window is calculated in relation to the current
position, and a number without a prefix specifies an absolute position.
 Similar to

but scrolls to the next or previous window that contains at least one

or

ged message.
Command escapes are available in compose mode, and are used to perform
special functions when composing messages.
Command escapes are only recognized at the beginning of lines, and
consist of a trigger (escape), and a command character.
The actual escape character can be set via the internal variable

it defaults to the tilde

Otherwise ignored whitespace characters following the escape character
will prevent a possible addition of the command line to the [Option]history.

Unless otherwise noted all compose mode command escapes ensure proper
updates of the variables which represent the error number

and the exit status

If the variable

is set they will, unless stated otherwise, error out message compose mode
and cause a program exit if an operation fails;
an effect equivalent to the command modifier

can however be achieved by placing a hyphen-minus

after (possible whitespace following) the escape character.
If the [Option]
ings specifically for the compose mode.
Insert the string of text in the message prefaced by a single

(If the escape character has been changed,
that character must be doubled instead.)
Execute the indicated shell

which follows, replacing unescaped exclamation marks with the previously
executed command if the internal variable

is set, then return to the message.
End compose mode and send the message.
The hooks

and

in order, will be called when set, after which, in interactive mode

(leading to

and

will be checked as well as

after which a set

hook will be called,

and

will be joined in if set,
finally a given

will be incorporated, after which the compose mode is left.
Execute the given \%MailNot all commands, however, are allowed.
Identical to
is executed using the shell.
Its standard output is inserted into the message.
[Option]

Append or edit the list of attachments.
Does not manage the error number

and the exit status

(please use

instead if this is a concern).
The append mode expects a list of

arguments as shell tokens (see

token-separating commas are ignored, too), to be
interpreted as documented for the command line option

with the message number exception as below.

Without

arguments the attachment list is edited, entry by entry;
if a filename is left empty, that attachment is deleted from the list;
once the end of the list is reached either new attachments may be
entered or the session can be quit by committing an empty

attachment.
In non-interactive mode or in batch mode

the list of attachments is effectively not edited but instead recreated;
again, an empty input ends list creation.

For all modes, if a given filename solely consists of the number sign

followed by either a valid message number of the currently active
mailbox, or by a period

referring to the current message of the active mailbox, the so-called

then the given message is attached as a

MIME message part.
The number sign must be quoted to avoid misinterpretation as a shell
comment character.
Pipe the message text through the specified filter command.
If the command gives no output or terminates abnormally,
retain the original text of the message.
E.g., the command

is often used as a rejustifying filter.

If the first character of the command is a vertical bar, then the entire
message including header fields is subject to the filter command, e.g.,

will prepend a file-carbon-copy message header.
Also see
Low-level compose mode command which shares semantics with

Does not manage the error number

and the exit status

errors are handled via the protocol, and hard errors like I/O failures
cannot be handled.
The protocol consists of command lines followed by (a) response line(s).
The first field of the response line represents a status code
which specifies whether a command was successful or not, whether result
data is to be expected, and if, the format of the result data.
Error status code lines may optionally contain additional context:
Status ok; the remains of the line are the result.

Status ok; the rest of the line is optionally used for more status.
What follows are lines of result addresses, terminated by an empty line.
All the input, including the empty line, must be consumed before further
commands can be issued.
Address lines consist of two fields, first the plain network address, e.g.,

separated by a single ASCII SP space from the full address as known, e.g.,

Non-network addresses use the first field to indicate the type (hyphen-minus

for files, vertical bar

for pipes, and number sign

for names which will undergo

processing) instead, the actual value will be in the second field.

Status ok; the rest of the line is optionally used for more status.
What follows are lines of furtherly unspecified string content,
terminated by an empty line.
All the input, including the empty line, must be consumed before further
commands can be issued.

Syntax error; invalid command.

Syntax error in parameters or arguments.

Error: an argument fails verification.
For example an invalid address has been specified (also see

or an attempt was made to modify anything in \%Mailor a modifying subcommand has been used on a read-only message.

Error: an otherwise valid argument is rendered invalid due to context.
For example, a second address is added to a header which may consist of
a single address only.
If a command indicates failure then the message will have remained
unmodified.
Most commands can fail with

if required arguments are missing (false command usage).
The following (case-insensitive) commands are supported:
This command will print the protocol version via 210.

This command allows listing, inspection, and editing of message headers.
Header name case is not normalized, and case-insensitive comparison
should be used when matching names.
The second argument specifies the subcommand to apply, one of:
Without a third argument a list of all yet existing headers is given via

this command is the default command of

if no second argument has been given.
A third argument restricts output to the given header only, which may
fail with

if no such field is defined.

Shows the content of the header given as the third argument.
Dependent on the header type this may respond with

or

any failure results in
This will remove all instances of the header given as the third
argument, reporting

upon success,

if no such header can be found, and

on \%Mail
This will remove from the header given as the third argument the
instance at the list position (counting from one!) given with the fourth
argument, reporting

upon success or

if the list position argument is not a number or on \%Mailviolations, and

if no such header instance exists.

Create a new or an additional instance of the header given in the third
argument, with the header body content as given in the fourth argument
(the remains of the line).
It may return

if the third argument specifies a free-form header field name that is
invalid, or if body content extraction fails to succeed,

if any extracted address does not pass syntax and/or security checks or
on \%Mail
to indicate prevention of excessing a single-instance header -- note that

can be appended to (a space separator will be added automatically first).
or

support the

modifier to enforce treatment as a single addressee, e.g.,

the word

is optional.
is returned upon success, followed by the name of the header and the list
position of the newly inserted instance.
The list position is always 1 for single-instance header fields.
All free-form header fields are managed in a single list.
In compose-mode read-only access to optional pseudo headers in the \%Mailprivate namespace is available:
The name of the command that generates the message, one of
This pseudo header always exists (in compose-mode).
Represent the frozen initial state of these headers before any
transformation (e.g.,
etc.) took place.
The values of said headers of the original message which has been
addressed by any of
This command allows listing, removal and addition of message attachments.
The second argument specifies the subcommand to apply, one of:
List all attachments via

or report

if no attachments exist.
This command is the default command of

if no second argument has been given.

This will remove the attachment given as the third argument, and report

upon success or

if no such attachment can be found.
If there exists any path component in the given argument, then an exact
match of the path which has been used to create the attachment is used
directly, but if only the basename of that path matches then all
attachments are traversed to find an exact match first, and the removal
occurs afterwards; if multiple basenames match, a

error occurs.
Message attachments are treated as absolute pathnames.

If no path component exists in the given argument, then all attachments
will be searched for

parameter matches as well as for matches of the basename of the path
which has been used when the attachment has been created; multiple
matches result in a
This will interpret the third argument as a number and remove the
attachment at that list position (counting from one!), reporting

upon success or

if the argument is not a number or

if no such attachment exists.

Adds the attachment given as the third argument, specified exactly as
documented for the command line option

and supporting the message number extension as documented for

This reports

upon success, with the index of the new attachment following,

if the given file cannot be opened,

if an on-the-fly performed character set conversion fails, otherwise

is reported; this is also reported if character set conversion is
requested but not available.

This uses the same search mechanism as described for

and prints any known attributes of the first found attachment via

upon success or

if no such attachment can be found.
The attributes are written as lines of keyword and value tuples, the
keyword being separated from the rest of the line with an ASCII SP space
character.

This uses the same search mechanism as described for

and is otherwise identical to
This uses the same search mechanism as described for

and will assign the attribute given as the fourth argument, which is
expected to be a value tuple of keyword and other data, separated by
a ASCII SP space or TAB tabulator character.
If the value part is empty, then the given attribute is removed, or
reset to a default value if existence of the attribute is crucial.

It returns via

upon success, with the index of the found attachment following,

for message attachments or if the given keyword is invalid, and

if no such attachment can be found.
The following keywords may be used (case-insensitively):
Sets the filename of the MIME part, i.e., the name that is used for
display and when (suggesting a name for) saving (purposes).

Associate some descriptive information to the attachment's content, used
in favour of the plain filename by some MUAs.

May be used for uniquely identifying MIME entities in several contexts;
this expects a special reference address format as defined in RFC 2045
and generates a

upon address content verification failure.

Defines the media type/subtype of the part, which is managed
automatically, but can be overwritten.

Automatically set to the string
This uses the same search mechanism as described for

and is otherwise identical to
The same as
The same as
Add the given names to the list of blind carbon copy recipients.
Add the given names to the list of carbon copy recipients.
Read the file specified by the

variable into the message.
Invoke the text

on the message collected so far, then return to compose mode.

can be used for a more display oriented editor, and

offers a pipe-based editing approach.
Read the named messages into the message being sent, including all
message headers and MIME parts.
If no messages are specified, read in the current message, the
Read the named messages into the message being sent.
If no messages are specified, read in the current message, the

Strips down the list of header fields according to the

white- and blacklist selection of

For MIME multipart messages,
only the first displayable part is included.
Edit the message header fields
and

by typing each one in turn and allowing the user to edit the field.
The default values for these fields originate from the

and

variables.
Edit the message header fields
and

by typing each one in turn and allowing the user to edit the field.
Insert the value of the specified variable into the message.
The message remains unaltered if the variable is unset or empty.
Any embedded character sequences

horizontal tabulator and

line feed are expanded in

mode; otherwise the expansion should occur at

time ( by using the command modifier
Like

but appends a newline character.
Read the named messages into the message being sent,
indented by

If no messages are specified, read the current message, the
Read the named messages into the message being sent,
indented by

If no messages are specified, read the current message, the

Strips down the list of header fields according to the

white- and blacklist selection of

For MIME multipart messages,
only the first displayable part is included.
Display the message collected so far,
prefaced by the message header fields
and followed by the attachment list, if any.
Read in the given / current message(s) according to the algorithm of
Abort the message being sent,
copying it to the file specified by the

variable if

is set.
Identical to

but indent each line that has been read by
Read the named file, object to the usual

into the message; if (the expanded)

is the hyphen-minus

then standard input is used, e.g., for pasting purposes.
Only in this latter mode

may be given: if it is data will be read in until the given

is seen on a line by itself, and encountering EOF is an error; the

is a required argument in non-interactive mode; if it is single-quote
quoted then the pasted content will not be expanded,  otherwise
a future version of \%Mail

Cause the named string to become the current subject field.
Newline (NL) and carriage-return (CR) bytes are invalid and will be
normalized to space (SP) characters.
Add the given name(s) to the direct recipient list.
Read in the given / current message(s) excluding all headers, indented by
Read in the given / current message(s), excluding all headers.
Invoke the

editor on the message collected so far, then return to compose mode.

can be used for a less display oriented editor, and

offers a pipe-based editing approach.
Write the message onto the named file, which is object to the usual

If the file exists,
the message is appended to it.
Same as

except that the message is not saved at all.
Internal \%Mail
and

commands; prefixing a variable name with the string

and calling

has the same effect as using
and

do the same thing.

will give more insight on the given variable(s), and

when called without arguments, will show a listing of all variables.
Both commands support a more

listing mode.
Some well-known variables will also become inherited from the
program

implicitly, others can be imported explicitly with the command

and henceforth share said properties.

Two different kinds of internal variables exist, and both of which can
also form chains.
There are boolean variables, which can only be in one of the two states

and

and value variables with a(n optional) string value.
For the latter proper quoting is necessary upon assignment time, the
introduction of the section

documents the supported quoting rules.

? wysh set one=val\ 1 two="val 2" \
    three='val "3"' four=$'val \'4\''; \
    varshow one two three four; \
    unset one two three four
Dependent upon the actual option string values may become interpreted as
colour names, command specifications, normal text, etc.
They may be treated as numbers, in which case decimal values are
expected if so documented, but otherwise any numeric format and
base that is valid and understood by the

command may be used, too.

There also exists a special kind of string value, the

which must either be a decimal integer (in which case

is false and

and any other value is true) or any of the (case-insensitive) strings
and

for a false boolean and
and

for a true boolean; a special kind of boolean string is the

which is a boolean string that can optionally be prefixed with the
(case-insensitive) term

as in

which causes prompting of the user in interactive mode, with the given
boolean as the default value.

Variable chains extend a plain

with

and

variants.
Here

will be converted to all lowercase when looked up (but not when the
variable is set or unset!), [Option]
if a

had been specified in the contextual Uniform Resource Locator URL, see

Even though this mechanism is based on URLs no URL percent encoding may
be applied to neither of

nor

variable chains need to be specified using raw data;
the mentioned section contains examples.
Variables which support chains are explicitly documented as such, and
\%Mailusers should not create custom names like

in order to avoid false classifications and treatment of such variables.

The standard POSIX 2008/Cor 2-2016 mandates the following initial
variable settings:
set to
set to
set to
Notes: \%Mail
variable - use command line options or

to pass options through to a

And the default global

file, which is loaded unless the

(with according argument) or

command line options have been used, or the

environment variable is set (see

bends those initial settings a bit, e.g., it sets the variables
and

to name a few, establishes a default

selection etc., and should thus be taken into account.
(Read-only)
value of the macro

ed last.
This status has a meaning in the state machine: in conjunction with

any non-0 exit status will cause a program exit, and in

mode any error while loading (any of the) resource files will have the
same effect.

one of the

can be used to instruct the state machine to ignore errors.
(Read-only)
which is set after an error occurred; it is also available via

and the error name and documentation string can be queried via

and

 This machinery is new and the error number is only really usable
if a command explicitly states that it manages the variable

for others errno will be used in case of errors, or

if that is 0: it thus may or may not reflect the real error.
The error number may be set with the command
(Read-only)the requested state or condition, of which there are:
The number, documentation, and name of the current

respectively, which is usually set after an error occurred.
The documentation is an [Option] This machinery is new and is usually reliable only if a command
explicitly states that it manages the variable

which is effectively identical to

Each of those variables can be suffixed with a hyphen minus followed by
a name or number, in which case the expansion refers to the given error.
Note this is a direct mapping of (a subset of) the system error values:

define work {
  eval echo \$1: \$^ERR-$1:\
    \$^ERRNAME-$1: \$^ERRDOC-$1
  vput vexpr i + "$1" 1
  if [ $i -lt 16 ]
    \xcall work $i
  end
}
call work 0
The number of messages present in the [Option]
and a boolean which indicates whether the queue is not empty,
respectively; both are always 0 unless

indicates
(Read-only)
separated by the first character of the value of

 The special semantics of the equally named special parameter of the

are not yet supported.
(Read-only)
separated by a space character.
If placed in double quotation marks, each positional parameter is
properly quoted to expand to a single parameter again.
(Read-only)the positional parameter stack in decimal.
(Read-only)
d and

ed macro this expands to the name of the calling macro, or to the empty
string if the macro is running from top-level.
For the [Option]
this expands to the entire matching expression.
It represents the program name in global context.
(Read-only)All further parameters can be accessed with this syntax, too, e.g.,
etc.; positional parameters can be shifted off the stack by calling

The parameter stack contains, e.g., the arguments of a

ed

d macro, the matching groups of the [Option]and replace expression of

and can be explicitly created or overwritten with the command
(Read-only)
(Boolean)mention them in the corresponding address fields of the message instead
of silently stripping them from their recipient list.
By default such addressees are not mentioned.
(Boolean)when comparing addresses.
(Boolean)
to be appended to the end rather than prepended.
This should always be set.
(Boolean)
and

lists to appear after the message has been edited.
(Boolean)end of each message; An empty line finalizes the list.
(Boolean)recipients (at the end of each message if

or

are set).
(Boolean)recipients (at the end of each message if

or

are set).
(Boolean)send the message or reenter compose mode after having been shown an
envelope summary.
This is by default enabled.
(Boolean)to be signed at the end of each message.
The

variable is ignored when this variable is set.
(Boolean)entering compose mode unless a subject already exists.
A sequence of characters to display in the

column of the

as shown in the display of

each for one type of messages (see

with the default being

or

if the

variable is set, in the following order:
new.

unread but old.

new but read.

read and old.

saved.

preserved.

mboxed.

flagged.

answered.

draft.

 start of a (collapsed) thread in threaded mode (see
 an uncollapsed thread in threaded mode; only used in conjunction with
classified as spam.

classified as possible spam.
Specifies a list of recipients to which a blind carbon copy of each
outgoing message will be sent automatically.
Specifies a list of recipients to which a carbon copy of each outgoing
message will be sent automatically.
(Boolean)ed

mode is entered (see the

command).
(Boolean)
ing of a(n existing)

message after

and

commands, e.g., the message that becomes the new

is shown automatically, as via

or
Causes sorted mode (see the

command) to be entered automatically with the value of this variable as
sorting method when a folder is opened, e.g.,
(Boolean)exclamation mark

characters by the contents of the last executed command for the

shell escape command and

one of the compose mode

If this variable is not set no reverse solidus stripping is performed.
[Option]input, for example for function and other special keys.
Some terminals however do not write these multi-byte sequences as
a whole, but byte-by-byte, and the latter is what \%MailThis variable specifies the timeout in milliseconds that the MLE (see

waits for more bytes to arrive unless it considers a sequence

The default is 200.
(Boolean)has the same affect as setting

and all other variables prefixed with

it also changes the behaviour of

(which does not exist in BSD).
(Boolean)summary to traditional BSD style.
(Boolean)BSD style.
(Boolean)

(Boolean)
field to appear immediately after the

field in message headers and with the
(Read-only)operating system \%Mail
via

and then lowercased, as well as all the possibly interesting rest of the
configuration and build environment.
This information is also available in the

output of the command
The value that should appear in the

parameter of

MIME header fields when no character set conversion of the message data
was performed.
This defaults to US-ASCII, and the chosen character set should be
US-ASCII compatible.
[Option]member of the variable

This defaults to UTF-8 if character set conversion capabilities are
available, and to ISO-8859-1 otherwise (unless the operating system
environment is known to always and exclusively support UTF-8 locales),
in which case the only supported character set is

and this variable is effectively ignored.
[Option]
the content of a mail message by using a character set with the name

Because of the unclassified nature of this character set \%Mailbe capable to convert this character set to any other character set.
If this variable is set any message part which uses the character set

is assumed to really be in the character set given in the value,
otherwise the (final) value of

is used for this purpose.

This variable will also be taken into account if a MIME type (see

of a MIME message part that uses the

character set is forcefully treated as text.
The default value for the

command.
(Boolean)Also see the section
(Boolean)
Note that pagers may need special command line options, e.g.,

requires the option

and

the option

in order to support colours.
Often doing manual adjustments is unnecessary since \%Mailadjustments dependent on the value of the environment variable

(see there for more).
(Read-only)bug reports, suggestions, or help regarding \%MailThe former can be used directly:
In a(n interactive) terminal session, then if this valued variable is
set it will be used as a threshold to determine how many lines the given
output has to span before it will be displayed via the configured

Usage of the

can be forced by setting this to the value

setting it without a value will deduce the current height of the
terminal screen to compute the threshold (see
and

 At the moment this uses the count of lines of the message in wire
format, which, dependent on the

of the message, is unrelated to the number of display lines.
(The software is old and historically the relation was a given thing.)
Define a set of custom headers to be injected into newly composed or
forwarded messages.
A custom header consists of the field name followed by a colon

and the field content body.
Standard header field names cannot be overwritten by a custom header.
Different to the command line option

the variable value is interpreted as a comma-separated list of custom
headers: to include commas in header bodies they need to become escaped
with reverse solidus

Headers can be managed more freely in compose mode via
Controls the appearance of the

date and time format specification of the

variable, that is used, for example, when viewing the summary of

If unset, then the local receiving date is used and displayed
unformatted, otherwise the message sending

It is possible to assign a

format string and control formatting, but embedding newlines via the

format is not supported, and will result in display errors.
The default is

and also see
Only used in conjunction with

Can be used to create a visible distinction of messages dated more than
a day in the future, or older than six months, a concept comparable to the

option of the POSIX utility

If set to the empty string, then the plain month, day and year of the

will be displayed, but a

format string to control formatting can be assigned.
The default is
(Boolean)actual delivery of messages and also implies

as well as
(Boolean)
header (RFC 3798) with the message.
This requires the

variable to be set.
(Boolean)
on a line by itself during message input in (interactive or batch

compose mode will be treated as end-of-message (in addition to the
normal end-of-file condition).
This behaviour is implied in

mode with a set
(Boolean)

for MBOX databases.

[Obsolete]

Please use

instead.
If this variable is set then the editor is started automatically when
a message is composed in interactive mode.
If the value starts with the letter

then this acts as if

otherwise as if
had been specified.
The

variable is implied for this automatically spawned editor session.
(Boolean)its header is included in the editable text.
(Boolean)
and exits immediately if a mailbox is empty or does not exist.
If this variable is set \%Mailmailbox (the latter behaviour furtherly depends upon

though).
(Boolean)
ed macro which

s a non-0 status, cause a program exit unless prefixed by

(see

This also affects

but which use a different modifier for ignoring the error.
Please refer to the variable

for more on this topic.
The first character of this value defines the escape character for

in compose mode.
The default value is the character tilde

If set to the empty string, command escapes are disabled.
If unset then file and command pipeline address targets are not allowed,
and any such address will be filtered out, giving a warning message.
If set then all possible recipient address specifications will be
accepted, unless the optional value is more specific (also see

If the value contains

then behaviour equals the former unless in interactive mode, or when
tilde commands were enabled explicitly via

or

in which case it equals the latter, and thus allows all addressees.

really acts like

so care for ordering issues must be taken.

Indeed the value is interpreted as a comma-separated list of
case-insensitive strings.
Presence of forbidden address types is treated as a hard send error
instead of only causing them to be filtered out if the list contains

Address targets can be added and subtracted with a plus sign

or hyphen-minus

prefix: the value

addresses all possible address specifications,

whitelists targets specified via

headers regardless of other settings,

file targets (it includes
command pipeline targets,

plain user names and (MTA) aliases and

network addresses;
Targets are interpreted in the given order, so that

will cause hard errors for any non-network address recipient address
unless running interactively or having been started with the option

or

in the latter case(s) any address may be used, then.

Historically invalid network addressees were silently stripped off --
shall they cause hard errors instead it must be ensured that

is an entry of the list (it really acts like

Likewise,
compares address domain names against a whitelist and strips off

for hard errors) addressees which fail this test; the domain name

and the non-empty value of

(the real hostname otherwise) are always whitelisted,

can be set to extend this list.
Finally some address providers (for example

and all other command line recipients) will be evaluated as
if specified within dollar-single-quotes (see

if the value list contains the string
Can be set to a comma-separated list of domain names which should be
whitelisted for the evaluation of the

mode of

IDNA encoding is not automatically performed,

can be used to prepare the domain (of an address).
Unless this variable is set additional

(Mail-Transfer-Agent)
arguments from the command line, as can be given after a

separator, results in a program termination with failure status.
The same can be accomplished by using the special (case-insensitive) value

A lesser strict variant is the otherwise identical

which does accept such arguments in interactive mode, or if tilde
commands were enabled explicitly by using one of the command line options

or

The empty value will allow unconditional usage.
(Read-only)Features are preceded with a plus sign

if they are available, with a hyphen-minus

otherwise.
The output of the command

will include this information in a more pleasant output.
(Boolean)turning the lowercase variants, which by default address all recipients
included in the header of a message

into the uppercase variants, which by default address the sender only

and vice versa.
The commands

as well as

are not affected by the current setting of
The default path under which mailboxes are to be saved:
filenames that begin with the plus sign

will have the plus sign replaced with the value of this variable if set,
otherwise the plus sign will remain unchanged when doing

also see

for more on this topic, and know about standard imposed implications of

The value supports a subset of transformations itself, and if the
non-empty value does not start with a solidus

then the value of

will be prefixed automatically.
Once the actual value is evaluated first, the internal variable

will be updated for caching purposes.
Names a

macro which will be called whenever a

is opened.
The macro will also be invoked when new mail arrives,
but message lists for commands executed from the macro
only include newly arrived messages then.

are activated by default in a folder hook, causing the covered settings
to be reverted once the folder is left again.

The specialized form will override the generic one if

matches the file that is opened.
Unlike other folder specifications, the fully expanded name of a folder,
without metacharacters, is used to avoid ambiguities.
However, if the mailbox resides under

then the usual

specification is tried in addition, e.g., if

is

(and thus relative to the user's home directory) then

will be tried as

first, but then followed by
(Read-only)
once that evaluation has occurred; rather internal.
(Boolean)
header is generated when sending messages to known mailing lists.
Also see

and the commands

and
Controls whether a

header is honoured when group-replying to a message via

or

This is a quadoption; if set without a value it defaults to

Also see

and the commands

and
(Boolean)
command,
and only the first part of a multipart message is included.
With this setting enabled messages are sent as unmodified MIME

attachments with all of their parts included.
The strings to put before and after the text of a message with the

command, respectively.
The former defaults to

Special format directives in these strings will be expanded if possible,
and if so configured the output will be folded according to

for more please refer to

These variables are ignored if the

variable is set.
The address (or a list of addresses) to put into the

field of the message header, quoting RFC 5322:
the author(s) of the message, that is, the mailbox(es) of the person(s)
or system(s) responsible for the writing of the message.
According to that RFC setting the

variable is required if

contains more than one address.
Dependent on the context these addresses are handled as if they were in
the list of
If a file-based MTA is used, then

(or, if that contains multiple addresses,

can nonetheless be enforced to appear as the envelope sender address at
the MTA protocol level (the RFC 5321 reverse-path), either by using the

command line option (with an empty argument; see there for the complete
picture on this topic), or by setting the internal variable
If the machine's hostname is not valid at the Internet (for example at
a dialup machine) then either this variable or

([v15-compat]
adds even more fine-tuning capabilities with

have to be set: if so the message and MIME part related unique ID fields

and

will be created (except when disallowed by

or
(Boolean)addresses are removed by default when sending mail, replying to or
forwarding a message.
If this variable is set such stripping is not performed.

[Obsolete]
(Boolean)commands that affect the number of messages or the order of messages in
the current

Unless in

mode a header summary will also be displayed on folder changes.
The command line option

can be used to set
A format string to use for the summary of

Format specifiers in the given string start with a percent sign

and may be followed by an optional decimal number indicating the field
width -- if that is negative, the field is to be left-aligned.
Names and addresses are subject to modifications according to

and

Valid format specifiers are:
A plain percent sign.
a space character but for the current message

for which it expands to

(dependent on
a space character but for the current message

for which it expands to

(dependent on
[Option]command

Shows only a replacement character if there is no spam support.

Message attribute character (status flag); the actual content can be
adjusted by setting
The date found in the

header of the message when

is set (the default), otherwise the date when the message was received.
Formatting can be controlled by assigning a

format string to

(and
The indenting level in

ed

mode.

The address of the message sender.

The message thread tree structure.
(Note that this format does not support a field width, and honours
Mailing list status: is the addressee of the message a known

or

d mailing list?

The number of lines of the message, if available.

Message number.

The number of octets (bytes) in the message, if available.

Message subject (if any) in double quotes.

Message subject (if any).

The position in threaded/sorted order.

The value 0 except in an IMAP mailbox,
where it expands to the UID of the message.
The default is

or

if

is set.
Also see
and
Bidirectional text requires special treatment when displaying headers,
because numbers (in dates or for file sizes etc.) will not affect the
current text direction, in effect resulting in ugly line layouts when
arabic or other right-to-left text is to be displayed.
On the other hand only a minority of terminals is capable to correctly
handle direction changes, so that user interaction is necessary for
acceptable results.
Note that extended host system support is required nonetheless, e.g.,
detection of the terminal character set is one precondition;
and this feature only works in an Unicode (i.e., UTF-8) locale.

In general setting this variable will cause \%Mailfields that may occur when displaying

(and some other fields, like dynamic expansions in

with special Unicode control sequences;
it is possible to fine-tune the terminal support level by assigning
a value:
no value (or any value other than
and

will make \%Mailwith Unicode version 6.3, in which case text is embedded in a pair of
U+2068 (FIRST STRONG ISOLATE) and U+2069 (POP DIRECTIONAL ISOLATE)
characters.
In addition no space on the line is reserved for these characters.

Weaker support is chosen by using the value

(Unicode 6.3, but reserve the room of two spaces for writing the control
sequences onto the line).
The values

and

select Unicode 1.1 support (U+200E, LEFT-TO-RIGHT MARK); the latter
again reserves room for two spaces in addition.
(Boolean)used by default for certain entries of

If this variable is set only basic US-ASCII symbols will be used.
[Option]name the (expandable) path of the location of a permanent

file; also see
(Boolean)
as is normally done.
(Boolean)
entries in persistent storage unless this variable is set.
On the other hand it will not loose the knowledge of whether
a persistent entry was gabby or not.
Also see
[Option]
entries.
If set to the value 0 then no further history entries will be added,
and loading and incorporation of the

upon program startup can also be suppressed by doing this.
Runtime changes will not be reflected before the

is saved or loaded (again).
(Boolean)
and it is set by default.
Used instead of the value obtained from

and

as the hostname when expanding local addresses, e.g., in

(also see

e.g., for expansion of addresses that have a valid user-, but no domain
name in angle brackets).
If either of

or this variable is set the message and MIME part related unique ID fields

and

will be created (except when disallowed by

or

If the [Option]
variable assignment is aborted when a necessary conversion fails.

Setting it to the empty string will cause the normal hostname to be
used, but nonetheless enables creation of said ID fields.
[v15-compat]

also influences the results:
one should produce some test messages with the desired combination of

and/or
etc. first.
(Boolean)names according to the rules of IDNA (internationalized domain names
for applications).
Since the IDNA code assumes that domain names are specified with the

character set, an UTF-8 locale charset is required to represent all
possible international domain names (before conversion, that is).
The input field separator that is used ( by some functions) to
determine where to split input data.
Unsetting is treated as assigning the default value,
If set to the empty value, no field splitting will be performed.

If set to a non-empty value, all whitespace characters are extracted
and assigned to the variable
will be ignored at the beginning and end of input.
Diverging from POSIX shells default whitespace is removed in addition,
which is owed to the entirely different line content extraction rules.

Each occurrence of a character of

will cause field-splitting, any adjacent

characters will be skipped.
(Read-only)
(Boolean)messages; instead echo them as

characters and discard the current line.
(Boolean)
in compose mode on message input and in interactive command input.
If set an interactive command input session can only be left by
explicitly using one of the commands

and

and message input in compose mode can only be terminated by entering
a period

on a line by itself or by using the
Setting this implies the behaviour that

describes in

mode.
If this is set to a non-empty string it will specify the user's
overriding

and the system-dependent default, and (thus) be used to replace

when doing

also see

for more on this topic.
The value supports a subset of transformations itself.
String used by the

and
and by the

option for indenting messages,
in place of the POSIX mandated default tabulator character

Also see
(Boolean)

file is not removed.
Note that, in conjunction with

mode any empty file will be removed unless this variable is set.
This may improve the interoperability with other mail user agents
when using a common folder directory, and prevents malicious users
from creating fake mailboxes in a world-writable spool directory.
 Only local regular (MBOX) files are covered, Maildir and other
mailbox types will never be removed, even if empty.
(Boolean)be told to keep the

and

header fields that some MUAs generate by setting this variable.
Since \%Mailfields (which in itself shows one of their conceptual problems),
stripping them should increase interoperability in between MUAs that
work with with same mailbox files.
Note that, if this is not set but

as below, is, a possibly performed automatic stripping of these header
fields already marks the message as being modified.
 At some future time \%Mail
to modified messages, and then those fields will be stripped silently.
(Boolean)originating folder when \%MailThis setting causes all saved message to be retained.
(Boolean)
for more).
(Boolean)

Error log message prefix string
(Read-only)
possibly abbreviated for display purposes.
(Read-only)

An additional startup file that is loaded as the last of the

Use this file for commands that are not understood by other POSIX

implementations, i.e., mostly anything which is not covered by
(Boolean)it is marked as having been

See the section
(Boolean)
will be fed valid MBOX database entry message data (see
and existing file targets will become extended in compliance to RFC 4155.
If this variable is unset then a plain standalone RFC 5322 message will
be written, and existing file targets will be overwritten.
(Boolean)compatibility with old software, the very tolerant POSIX standard rules
for detecting message boundaries (so-called

lines) are used instead of the stricter rules from the standard RFC 4155.
This behaviour can be switched by setting this variable.

This may temporarily be handy when \%Mail
lines when opening a MBOX: in this case setting this variable and
re-opening the mailbox in question may correct the result.
If so, copying the entire mailbox to some other file, as in

will perform proper, all-compatible

quoting for all detected messages, resulting in a valid MBOX mailbox.
( The better and non-destructive approach is to reencode invalid
messages, as if it would be created anew, instead of mangling the

lines; this requires the structural code changes of the v15 rewrite.)
Finally the variable can be unset again:

define mboxfix {
  localopts yes; wysh set mbox-rfc4155;\
    wysh File "${1}"; copy * "${2}"
}
call mboxfix /tmp/bad.mbox /tmp/good.mbox
(Boolean)(Keeps memory debug enabled even if

is not set.)
(Boolean)
and

message and MIME part headers can be completely suppressed, effectively
leaving this task up to the

(Mail-Transfer-Agent) or the SMTP server.
Note that according to RFC 5321 a SMTP server is not required to add this
field by itself, so it should be ensured that it accepts messages without
A string to put at the beginning of each new message, followed by a newline.
[Obsolete]
and newline

are understood (use the

prefix when

ting the variable(s) instead).
A string to put at the end of each new message, followed by a newline.
[Obsolete]
and newline

are understood (use the

prefix when

ting the variable(s) instead).
Also see
(Boolean)
expansion contains the sender, the sender is removed from the expansion.
Setting this option suppresses these removals.
Note that a set

also causes a

option to be passed through to the

(Mail-Transfer-Agent); though most of the modern MTAs no longer document
this flag, no MTA is known which does not support it (for historical
compatibility).
(Boolean)in order to classify the

and

(see

that is required to send this part over mail transport, i.e.,
a computation rather similar to what the

command produces when used with the

option.

This classification however treats text files which are encoded in
UTF-16 (seen for HTML files) and similar character sets as binary
octet-streams, forcefully changing any

or

specification to

If that actually happens a yet unset charset MIME parameter is set to

effectively making it impossible for the receiving MUA to automatically
interpret the contents of the part.

If this variable is set, and the data was unambiguously identified as
text data at first glance (by a

or

file extension), then the original

will not be overwritten.
(Boolean)HTML) will be preferred in favour of included plain text versions when
displaying messages, provided that a handler exists which produces
output that can be (re)integrated into \%Mail(E.g., at the time of this writing some newsletters ship their full
content only in the rich HTML part, whereas the plain text part only
contains topic subjects.)
Normally the

field is used to decide how to handle MIME parts.
Some MUAs, however, do not use

(also see

or a similar mechanism to correctly classify content, but specify an
unspecific MIME type

even for plain text attachments.
If this variable is set then \%Mailmessage parts, if possible, for example via a possibly existing
attachment filename.
A non-empty value may also be given, in which case a number is expected,
actually a carrier of bits, best specified as a binary value, e.g.,
If bit two is set (counting from 1, decimal 2) then the detected

will be carried along with the message and be used for deciding which
MIME handler is to be used, for example;
when displaying such a MIME part the part-info will indicate the
overridden content-type by showing a plus sign
If bit three is set (decimal 4) then the counter-evidence is always
produced and a positive result will be used as the MIME type, even
forcefully overriding the parts given MIME type.

If bit four is set (decimal 8) as a last resort the actual content of

parts will be inspected, so that data which looks like plain text can be
treated as such.
This mode is even more relaxed when data is to be displayed to the user
or used as a message quote (data consumers which mangle data for display
purposes, which includes masking of control characters, for example).
The MIME

to use in outgoing text messages and message parts, where applicable
(7-bit clean text messages are without an encoding if possible):
8-bit transport effectively causes the raw data be passed through
unchanged, but may cause problems when transferring mail messages over
channels that are not ESMTP (RFC 1869) compliant.
Also, several input data constructs are not allowed by the
specifications and may cause a different transfer-encoding to be used.
By established rules and popular demand occurrances of

(see

will be MBOXO quoted (prefixed with greater-than sign

instead of causing a non-destructive encoding like

to be chosen, unless context (e.g., message signing) requires otherwise.
Quoted-printable encoding is 7-bit clean and has the property that ASCII
characters are passed through unchanged, so that an english message can
be read as-is; it is also acceptable for other single-byte locales that
share many characters with ASCII, like, e.g., ISO-8859-1.
The encoding will cause a large overhead for messages in other character
sets: e.g., it will require up to twelve (12) bytes to encode a single
UTF-8 character of four (4) bytes.
It is the default encoding.
This encoding is 7-bit clean and will always be used for binary data.
This encoding has a constant input:output ratio of 3:4, regardless of
the character set of the input data it will encode three bytes of input
to four bytes of output.
This transfer-encoding is not human readable without performing
a decoding step.
(Boolean)because of non-convertible character content this variable may be set.
It will, as a last resort, classify the part content as

Please refer to the section

for the complete picture of character set conversion in \%Mail

Can be used to control which of

are loaded: if the letter

is part of the option value, then the user's personal

file will be loaded (if it exists); likewise the letter

controls loading of the system wide

directives found in the user file take precedence, letter matching is
case-insensitive.
If this variable is not set \%MailIncorporation of the \%Mailbut they will be matched last (the order can be listed via
More sources can be specified by using a different syntax: if the
value string contains an equals sign

then it is instead parsed as a comma-separated list of the described
letters plus

pairs; the given filenames will be expanded and loaded, and their
content may use the extended syntax that is described in the section

Directives found in such files always take precedence (are prepended to
the MIME type cache).
To choose an alternate Mail-Transfer-Agent, set this option to either
the full pathname of an executable (optionally prefixed with the protocol

or [Option]
(:

The default has been chosen at compile time.
All supported data transfers are executed in child processes, which
run asynchronously and without supervision unless either the

or the

variable is set.
If such a child receives a TERM signal, it will abort and

the message to

if so configured.

For a file-based MTA it may be necessary to set

in in order to choose the right target of a modern

environment.
It will be passed command line arguments from several possible sources:
from the variable

if set, from the command line if given and the variable

allows their use.
Argument processing of the MTA will be terminated with a

separator.

The otherwise occurring implicit usage of the following MTA command
line arguments can be disabled by setting the boolean variable

(which will also disable passing

to the MTA):

(for not treating a line with only a dot

character as the end of input),

(shall the variable

be set) and

(if the

variable is set); in conjunction with the

command line option \%Mail
as well as possibly
[Option]connections to a single defined smart host by setting this variable to
a SMTP or SUBMISSION URL (see

An authentication scheme can be specified via the variable chain

Encrypted network connections are [Option]
should give an overview and provide links to more information on this.
Note that with some mail providers it may be necessary to set the

variable in order to use a specific combination of
and

Network communication socket timeouts are configurable, e.g.,

All generated network traffic may be proxied over the SOCKS5 server given in

The following SMTP variants may be used:
The plain SMTP protocol (RFC 5321) that normally lives on the
server port 25 and requires setting the

variable to enter a TLS encrypted session state.
Assign a value like [v15-compat]
(

to choose this protocol.

The so-called SMTPS which is supposed to live on server port 465
and is automatically TLS secured.
Unfortunately it never became a standardized protocol and may thus not
be supported by your hosts network service database
- in fact the port number has already been reassigned to other
protocols!

SMTPS is nonetheless a commonly offered protocol and thus can be
chosen by assigning a value like [v15-compat]
(

due to the mentioned problems it is usually necessary to explicitly
specify the port as

however.

The SUBMISSION protocol (RFC 6409) lives on server port 587 and
is identically to the SMTP protocol from \%Mailit requires setting

to enter a TLS secured session state; e.g., [v15-compat]

The SUBMISSIONS protocol (RFC 8314) that lives on server port 465 and is
TLS secured by default.
It can be chosen by assigning a value like [v15-compat]
Due to the problems mentioned for SMTPS above and the fact that
SUBMISSIONS is new and a successor that lives on the same port as the
historical engineering mismanagement named SMTPS, it is usually
necessary to explicitly specify the port as
Arguments to pass through to a file-based

can be given via this variable, which is parsed according to

into an array of arguments, and which will be joined onto MTA options
from other sources, and then passed individually to the MTA:
(Boolean)standard command line options to a file-based

(Mail-Transfer-Agent), see there for more.
(Boolean)
will be passed all receiver addresses on the command line.
This variable can be set to suppress any such argument.
Many systems use a so-called

environment to ensure compatibility with

This works by inspecting the name that was used to invoke the mail
delivery system.
If this variable is set then the mailwrapper (the program that is
actually executed when calling the file-based

will treat its contents as that name.
(Boolean)
file for lookup of account credentials, as documented in the section

and for the command

the section

documents the file format.
Also see
[v15-compat]
is loaded (see

and

then \%Mail
file if this variable is set (to the desired shell command).
This can be used to, e.g., store

in encrypted form:
[Option]
newly created local folders will be in Maildir instead of MBOX format.
Checks for new mail in the current folder each time the prompt is shown.
A Maildir folder must be re-scanned to determine if new mail has arrived.
If this variable is set to the special value

then a Maildir folder will not be rescanned completely, but only
timestamp changes are detected.
Maildir folders are [Option]

(Boolean)in the

variable
and the sender-based filenames for the

and

commands to be interpreted relative to the directory given in the

variable rather than relative to the current directory.
Macro hook which will be called once an

is left, as the very last step before unrolling per-account

This hook is run even in case of fatal errors, and it is advisable to
perform only absolutely necessary actions, like cleaning up

for example.
The specialized form is used in favour of the generic one if found.
Macro hook which will be called after the message has been sent (or not,
in case of failures), as the very last step before unrolling compose mode

This hook is run even in case of fatal errors, and it is advisable to
perform only absolutely necessary actions, like cleaning up

for example.

For compose mode hooks that may affect the message content please see

 This hook exists because

to name a few, are neither covered by

nor by

changes applied in compose mode will continue to be in effect thereafter.
Macro hooks which will be called once compose mode is entered,
and after composing has been finished, respectively;
the exact order of the steps taken is documented for

one of the

Context about the message being worked on can be queried via
are enabled for these hooks, and changes on variables will be forgotten
after the message has been sent.

can be used to perform other necessary cleanup steps.

Here is an example that injects a signature via

instead using

to simply inject the file of desire via

or

may be a better approach.

define t_ocl {
  vput ! i cat ~/.mysig
  if [ $? -eq 0 ]
     vput csop message-inject-tail trim-end $i
  end

  # Alternatively
  readctl create ~/.mysig
  if [ $? -eq 0 ]
    readall i
    if [ $? -eq 0 ]
      vput csop vexpr message-inject-tail trim-end $i
    end
    readctl remove ~/.mysig
  end
}
set on-compose-leave=t_ocl
These hooks run once the normal compose mode is finished, but before the

macro hook is called etc.
Both hooks will be executed in a subprocess, with their input and output
connected to \%Mailinteractive user.
The difference in between them is that the latter is a

command, whereas the former is a normal

d macro, but which is restricted to a small set of commands (the

output of, e.g.,

will indicate said capability).

are enabled for these hooks (in the parent process), causing any setting
to be forgotten after the message has been sent;

can be used to perform other cleanup as necessary.

During execution of these hooks \%Mailhas been started in interactive mode, (a restricted set of)

will always be available, and for guaranteed reproducibilities sake

and

will be set to their defaults.
The compose mode command

has been especially designed for scriptability (via these hooks).
The first line the hook will read on its standard input is the protocol
version of said command escape, currently

backward incompatible protocol changes have to be expected.

Care must be taken to avoid deadlocks and other false control flow:
if both involved processes wait for more input to happen at the
same time, or one does not expect more input but the other is stuck
waiting for consumption of its output, etc.
There is no automatic synchronization of the hook: it will not be
stopped automatically just because it, e.g., emits

The hooks will however receive a termination signal if the parent enters
an error condition.
 Protection against and interaction with signals is not yet given;
it is likely that in the future these scripts will be placed in an
isolated session, which is signalled in its entirety as necessary.

define ocs_signature {
  read version
  echo '~< ~/.mysig' # '~<! fortune pathtofortunefile'
}
set on-compose-splice=ocs_signature

wysh set on-compose-splice-shell=$'\
  read version;\
  printf "hello $version!  Headers: ";\
  echo \'~^header list\';\
  read status result;\
  echo "status=$status result=$result";\
  '

define ocsm {
  read version
  echo Splice protocol version is $version
  echo '~^h l'; read hl; vput csop es substring "${hl}" 0 1
  if [ "$es" != 2 ]
    echoerr 'Cannot read header list'; echo '~x'; xit
  endif
  if [ "$hl" !%?case ' cc' ]
    echo '~^h i cc Diet is your <mirr.or>'; read es;\
      vput csop es substring "${es}" 0 1
    if [ "$es" != 2 ]
      echoerr 'Cannot insert Cc: header'; echo '~x'
      # (no xit, macro finishs anyway)
    endif
  endif
}
set on-compose-splice=ocsm
This hook will be called if an entry is about to be added to the

of the MLE, as is documented in

It will be called with three arguments: the first is the name of the
input context (see

the second whether the command relates to

and the third being the complete command line to be added.
The entry will not be added to history if the hook uses a non-0

 A future version will give the expanded command name as the third
argument, followed by the tokenized command line as parsed in the
remaining arguments, the first of which is the original unexpanded
command name; i.e., one may do

and will then be able to access the positional parameters as usual via

etc.
 Identical to

but is only triggered by
 Identical to

but is only triggered by

currently there is no

support, for example.
(Boolean)
is followed by a formfeed character
[v15-compat]been given in the protocol and account-specific URL;
as a last resort \%Mailthe authentication method requires a password.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.

 (see the chain above for [v15-compat]Set the password for

when connecting to

If no such variable is defined for a host,
the user will be asked for a password on standard input.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
(Boolean)
command without performing MIME and character set conversions.
When a MIME message part of type

(case-insensitive) is displayed or quoted,
its text is filtered through the value of this variable interpreted as
a shell command.
Note that only parts which can be displayed inline as plain text (see

are displayed unless otherwise noted, other MIME parts will only be
considered by and for the command
The special value question mark

forces interpretation of the message part as plain text, e.g.,

will henceforth display XML

(The same could also be achieved by adding a MIME type marker with the

command.
And [Option]
-- these directives,

has already been used, should be referred to for further documentation.

The question mark

can in fact be used as a trigger character to adjust usage and behaviour
of a following shell command specification more thoroughly by appending
more special characters which refer to further mailcap directives, e.g.,
the following hypothetical command specification could be used:

? set pipe-X/Y='?!++=? vim ${MAILX_FILENAME_TEMPORARY}'
The command produces plain text to be integrated in \%Mail

If set the handler will not be invoked when a message is to be quoted,
but only when it will be displayed:
Run the command asynchronously, i.e., without blocking \%Mail

The command must be run on an interactive terminal, \%Mailtemporarily release the terminal to it:
Request creation of a zero-sized temporary file, the absolute pathname
of which will be made accessible via the environment variable
If given twice then the file will be unlinked automatically by \%Mailwhen the command loop is entered again at latest:
Normally the MIME part content is passed to the handler via standard
input; if this flag is set then the data will instead be written into
the creation of which is implied; note however that in order to cause
deletion of the temporary file you still have to use two plus signs

explicitly!

To avoid ambiguities with normal shell command content another
question mark can be used to forcefully terminate interpretation of
remaining characters.
(Any character not in this list will have the same effect.)
Some information about the MIME part to be displayed is embedded into
the environment of the shell command:
The MIME content-type of the part, if known, the empty string otherwise.
If

includes the carry-around-bit (2), then this will be set to the detected
MIME content-type; not only then identical to

otherwise.
MIME parts of type

will store the access URL in this variable, it is empty otherwise.
URL targets should not be activated automatically, without supervision.
The filename, if any is set, the empty string otherwise.
A random string.
If temporary file creation has been requested through the command prefix
this variable will be set and contain the absolute pathname of the
temporary file.
This is identical to

except that

(normalized to lowercase using character mappings of the ASCII charset)
names a file extension, e.g.,

Handlers registered using this method take precedence.
[Option]The only possible value as of now is

which is thus the default.
(Boolean)the messages, and only requests the message bodies on user request.
For the POP3 protocol this means that the message headers will be
downloaded twice.
If this variable is set then \%Mailfrom the given POP3 server(s) instead.
[Option]the standard requires this to be at least 10 minutes,
but practical experience may vary.
Setting this variable to a numeric value greater than

causes a

command to be sent each value seconds if no other operation is performed.
(Boolean)
authentication method will be used when connecting to a POP3 server that
advertises support.
The advantage of

is that the password is not sent in clear text over the wire and that
only a single packet is sent for the user/password tuple.
Note that

requires [v15-compat]

(Boolean)
command to make an unencrypted POP3 session TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the POP3S method.
Note that

requires [v15-compat]

(Boolean)where that deviates from standardized behaviour.
It will be set implicitly before the

are loaded if the environment variable

is set, and adjusting any of those two will be reflected by the other
one implicitly.
The following behaviour is covered and enforced by this mechanism:
In non-interactive mode, any error encountered while loading resource
files during program startup will cause a program exit, whereas in
interactive mode such errors will stop loading of the currently loaded
(stack of) file(s, i.e., recursively).
These exits can be circumvented on a per-command base by using

one of the

for each command which shall be allowed to fail.
will replace the list of alternate addresses instead of appending to it.
In addition alternates will only be honoured for any sort of message

and for aliases.

The variable inserting
and

will expand embedded character sequences

horizontal tabulator and

line feed.
 For compatibility reasons this step will always be performed.

Upon changing the active

no summary of

will be displayed even if

is set.

Setting

implies the behaviour described by
The variable

is extended to cover any empty mailbox, not only empty
es: they will be removed when they are left in empty state otherwise.
(Boolean)
is displayed and it contains a subpart of type

other parts are normally discarded.
Setting this variable causes all subparts to be displayed,
just as if the surrounding part was of type
The string used as a prompt in interactive mode.
Whenever the variable is evaluated the value is treated as if specified
within dollar-single-quotes (see

This (post-assignment, i.e., second) expansion can be used to embed
status information, for example
or
In order to embed characters which should not be counted when
calculating the visual width of the resulting string, enclose the
characters of interest in a pair of reverse solidus escaped brackets:

a slot for coloured prompts is also available with the [Option]
Prompting may be prevented by setting this to the null string
(aka
This string is used for secondary prompts, but is otherwise identical to

The default is
(Boolean)

If set a

message is started with the quoted original message,
the lines of which are prefixed by the value of the variable

taking into account

and

If set to the empty value, the quoted message will be preceded and
followed by the expansions of the values of

and

respectively.
None of the headers of the quoted message is included in the quote if
the value equals

and only the headers selected by the
selection are put above the message body for

whereas all headers and all MIME parts are included for

Also see

and

one of the
(Boolean)
MIME attachment when replying to a message.
Note this works regardless of the setting of
Can be set to a string consisting of non-whitespace ASCII characters
which shall be treated as quotation leaders, the default being
[Option]
and creates a more fancy quotation in that leading quotation characters

are compressed and overlong lines are folded.

can be set to either one, two or three (space separated) numeric values,
which are interpreted as the maximum (goal) and the minimum line length,
respectively, in a spirit rather equal to the

program, but line- instead of paragraph-based.
The third value is used as the maximum line length instead of the first
if no better break point can be found; it is ignored unless it is larger
than the minimum and smaller than the maximum.
If not set explicitly the minimum will reflect the goal algorithmically.
The goal cannot be smaller than the length of

plus some additional pad; necessary adjustments take place silently.
The strings to put before and after the text of a

d message, respectively.
The former defaults to

Special format directives will be expanded if possible, and if so
configured the output will be folded according to

Format specifiers in the given strings start with a percent sign

and expand values of the original message, unless noted otherwise.
Note that names and addresses are not subject to the setting of

Valid format specifiers are:
A plain percent sign.

The address(es) of the sender(s).

The date found in the

header of the message when

is set (the default), otherwise the date when the message was received.
Formatting can be controlled by assigning a

format string to

(and
The full name(s) (name and address, as given) of the sender(s).

The
The real name(s) of the sender(s) if there is one and

allows usage, the address(es) otherwise.

The senders real name(s) if there is one, the address(es) otherwise.
(Boolean)
(or, if that contains multiple addresses,

and passes the results onto the used (file-based) MTA as described for the

option (empty argument case).
(Boolean)
the original

and

are by default merged into the new

If this variable is set, only the original

ends in the new

the rest is merged into
Unless this variable is defined, no copies of outgoing mail will be saved.
If defined it gives the pathname, subject to the usual

of a folder where all new, replied-to or forwarded messages are saved:
when saving to this folder fails the message is not sent, but instead

d to

The standard defines that relative (fully expanded) paths are to be
interpreted relative to the current directory

to force interpretation relative to
needs to be set in addition.
(Boolean)
will be extended to cover messages which target only file and pipe
recipients (see

These address types will not appear in recipient lists unless

is also set.
(Boolean)
will be extended to also cover the

and

commands.
(Boolean)character set of the original message for replies.
If this fails, the mechanism described in

is evaluated as usual.
Can be set to a comma-separated list of (case-insensitive according to
ASCII rules) strings which shall be recognized in addition to the
built-in strings as

reply message indicators - built-in are

which is mandated by RFC 5322, as well as the german
and the

which often has been seen in the wild;
I.e., the separating colon has to be specified explicitly.
A list of addresses to put into the

field of the message header.
Members of this list are handled as if they were in the

list.

[Obsolete]
Controls whether a

header is honoured when replying to a message via

or

This is a quadoption; if set without a value it defaults to
(Boolean)
line for messages that are embedded into an envelope mail via the

MIME mechanism, for more visual convenience, also see
(Boolean)
upon interrupt or delivery error.
The number of lines that represents a

of lines, used in

summary display,
ing, message

line display and scrolling via

If this variable is not set \%Mailthe detected terminal window size and the baud rate: the faster the
terminal, the more will be shown.
Overall screen dimensions and pager usage is influenced by the
environment variables

and

and the variable
(Boolean)
to all messages containing the substring

in the header field

The string search is case insensitive.
[Option]outgoing internet mail.
The value of the variable

is automatically appended to this list of character sets.
If no character set conversion capabilities are compiled into \%Mailthe only supported charset is

Also see

and refer to the section

for the complete picture of character set conversion in \%Mail

(Boolean)
is not, then \%Mail
had been set to the value of the variable

In effect this combination passes through the message data in the
character set of the current locale encoding:
therefore mail message text will be (assumed to be) in ISO-8859-1
encoding when send from within a ISO-8859-1 locale, and in UTF-8
encoding when send from within an UTF-8 locale.

The 8-bit fallback

never comes into play as

is implicitly assumed to be 8-bit and capable to represent all files the
user may specify (as is the case when no character set conversion
support is available in \%Mail
see

This might be a problem for scripts which use the suggested

setting, since in this case the character set is US-ASCII by definition,
so that it is better to also override

then; and/or do something like the following in the resource file:

if [ "$LC_ALL" == C ] || [ "$LC_CTYPE" == C ]
  unset sendcharsets-else-ttycharset
end
An address that is put into the

field of outgoing messages, quoting RFC 5322: the mailbox of the agent
responsible for the actual transmission of the message.
This field should normally not be used unless the

field contains more than one address, on which case it is required.
Dependent on the context this address is handled as if it were in
the list of

Also see
[Obsolete]

[Obsolete]

[Obsolete]

[Obsolete]
(Boolean)
(including the built-in SMTP one) exits before accepting further commands.

with this variable set errors reported by the MTA will be recognizable!
If the MTA returns a non-zero exit status,
the exit status of \%Mail

(Boolean)instead of the first one when opening a mail folder, as well as with

and
(Boolean)address in the header field summary and in message specifications.
(Boolean)summary if the message was sent by the user.
The value backing

one of the

Also see
and
The value backing

one of the

Also see
and
[Obsolete]
or

or

and (if necessary)

instead!
(Boolean)only message part, do not send it but discard it silently (see also the
command line option
[Option]Enhanced Mail) for the purpose of verification of S/MIME signed messages.

documents the necessary preparation steps to use the former.
The set of CA certificates which are built into the TLS library can
be explicitly turned off by setting

and further fine-tuning is possible via
[Option]storage, and the certificate verification that is used.
The actual values and their meanings are documented for
(Boolean)used to TLS library to verify S/MIME signed messages.
[Option]messages (for the specified account).
RFC 5751 mandates a default of

(AES-128 CBC).
Possible values are (case-insensitive and) in decreasing cipher strength:

(AES-256 CBC),

(AES-192 CBC),

(AES-128 CBC),

(DES EDE3 CBC, 168 bits; default if

is not available) and

(DES CBC, 56 bits).

The actually available cipher algorithms depend on the cryptographic
library that \%Mail[Option]dynamic loading via, e.g.,

(OpenSSL) if \%Mail

[Option]to use when verifying S/MIME messages.
[Option]verifying S/MIME messages.
[Option]encrypted before sending.
The value of the variable must be set to the name of a file that
contains a certificate in PEM format.

If a message is sent to multiple recipients,
each of them for whom a corresponding variable is set will receive an
individually encrypted message;
other recipients will continue to receive the message in plain text
unless the

variable is set.
It is recommended to sign encrypted messages, i.e., to also set the

variable.
(Boolean)

(Boolean)and include the user's certificate as a MIME attachment.
Signing a message enables a recipient to verify that the sender used
a valid certificate,
that the email addresses in the certificate match those in the message
header and that the message content has not been altered.
It does not change the message text,
and people will be able to read the message as usual.
Also see

and
[Option]For the purpose of signing and decryption this file needs to contain the
user's private key, followed by his certificate.

For message signing

is always derived from the value of

(or, if that contains multiple addresses,

For the purpose of encryption the recipient's public encryption key
(certificate) is expected; the command

can be used to save certificates of signed messages (the section

gives some details).
This mode of operation is usually driven by the specialized form.

When decrypting messages the account is derived from the recipient
fields

and

of the message, which are searched for addresses for which such
a variable is set.
\%Mailso if the same message is sent to more than one of the user's addresses
using different encryption keys, decryption might fail.

For signing and decryption purposes it is possible to use encrypted
keys, and the pseudo-host(s)

for the private key
(and

for the certificate stored in the same file)
will be used for performing any necessary password lookup,
therefore the lookup can be automated via the mechanisms described in

For example, the hypothetical address

could be driven with a private key / certificate pair path defined in

and needed passwords would then be looked up via the pseudo hosts

(and

To include intermediate certificates, use
[Option]Please remember that for this use case

refers to the variable

(or, if that contains multiple addresses,

The available algorithms depend on the used cryptographic library, but
at least one usable builtin algorithm is ensured as a default.
If possible the standard RFC 5751 will be violated by using

instead of the mandated

due to security concerns.

\%Maildigests, names are case-insensitive:
as well as the widely available
and the proposed insecure

and

More digests may [Option]e.g., the OpenSSL function
[Option]of files, each of which containing a single certificate in PEM format to
be included in the S/MIME message in addition to the

certificate.
This can be used to include intermediate certificates of the certificate
authority, in order to allow the receiver's S/MIME implementation to
perform a verification of the entire certificate chain, starting from
a local root certificate, over the intermediate certificates, down to the

Even though top level certificates may also be included in the chain,
they will not be used for the verification on the receiver's side.

For the purpose of the mechanisms involved here,

refers to the content of the internal variable

(or, if that contains multiple addresses,

The pseudo-host

will be used for performing password lookups for these certificates,
shall they have been given one, therefore the lookup can be automated
via the mechanisms described in
[Obsolete]

[Obsolete]
 For compatibility reasons a set

is used in preference of
[Option]
authentication method, possible values are

( default),

([v15-compat]
as well as the [Option]
and

The

method does not need any user credentials,

requires a user name and all other methods require a user name and
a password.
See [v15-compat]

and

(

and

Note that

is [v15-compat]: Note for

may override dependent on sender address in the variable
[Option]If the authentication method requires a password, but neither

nor a matching

can be found,
\%Mail
 Overrides

for specific values of sender addresses, dependent upon the variable
[Option]If the authentication method requires a user name, but neither

nor a matching

can be found,
\%Mail
 Overrides

for specific values of sender addresses, dependent upon the variable
[Option]
to derive the necessary

information in order to issue a

SMTP

command.
Setting

can be used to use the

from the SMTP account

or the

variable chain)
and the

from the content of this variable (or, if that is the empty string,

or the local hostname as a last resort).
This often allows using an address that is itself valid but hosted by
a provider other than which (in

is about to send the message.
Setting this variable also influences generated

and

header fields.
If the [Option]
variable assignment is aborted when a necessary conversion fails.
(Boolean)
command to make an SMTP

session TLS encrypted, i.e., to enable transport layer security.
[Option]establishing a socket connection before forcing
[Option]\%MailThis can be used to proxy SMTP, POP3 etc. network traffic through the
Tor anonymizer, for example.
The following would create a local SOCKS proxy on port 10000 that
forwards to the machine

and from which the network traffic is actually instantiated:

# Create local proxy server in terminal 1 forwarding to HOST
$ ssh -D 10000 USER@HOST
# Then, start a client that uses it in terminal 2
$ \%mail
[Option]
the desired spam interface must be defined by setting this variable.
Please refer to the manual section

for the complete picture of spam handling in \%MailAll or none of the following interfaces may be available:
Interaction with

from the
suite.
Different to the generic filter interface \%Mailthe correct arguments for a given command and has the necessary
knowledge to parse the program's output.
A default value for

will have been compiled into the \%Mail
has been found in

during compilation.
Shall it be necessary to define a specific connection type (rather than
using a configuration file for that), the variable

can be used as in, e.g.,

It is also possible to specify a per-user configuration via

Note that this interface does not inspect the

flag of a message for the command
generic spam filter support via freely configurable hooks.
This interface is meant for programs like

and requires according behaviour in respect to the hooks' exit
status for at least the command
meaning a message is spam,

for non-spam,

for unsure and any other return value indicating a hard error);
since the hooks can include shell code snippets diverting behaviour
can be intercepted as necessary.
The hooks are

  spamfilter-rate
and

the manual section

contains examples for some programs.
The process environment of the hooks will have the variable

set.
Note that spam score support for

is not supported unless the [Option]available and the

variable is set.
[Option]configured

If unset or 0, the default of 420000 bytes is used.
[Option]
program for the
Note that the path is not expanded, but used

A fallback path will have been compiled into the \%Mailexecutable had been found during compilation.
[Option]

automatically, it may at least sometimes be desirable to specify
connection-related ones via this variable, e.g.,
[Option]

If this is set to the empty string then \%Mailcurrent
  spamfilter-nospam , spamfilter-rate , spamfilter-spam
[Option]

The manual section

contains examples for some programs.
[Option]

spam scores are not supported for it by default, but if the [Option]regular expression support is available then setting this variable can
be used to overcome this restriction.
It is interpreted as follows: first a number (digits) is parsed that
must be followed by a semicolon

and an extended regular expression.
Then the latter is used to parse the first output line of the

hook, and, in case the evaluation is successful, the group that has been
specified via the number is interpreted as a floating point scan score.

  ssl-ca-file-USER@HOST , ssl-ca-file-HOST , ssl-ca-file
[Obsolete]
[Obsolete]

  ssl-ca-no-defaults
[Obsolete]

[Obsolete]
slot of
[Obsolete]
slot of
[Obsolete]

  ssl-config-module
[Obsolete]

[Obsolete]

[Obsolete]
[Obsolete]
slot of
[Obsolete]

[Obsolete]
slot of
[Obsolete]
slot of
[Obsolete]
slot of
[Obsolete]

[Obsolete]
If only set without an assigned value, then this setting inhibits the
generation of the
and

header fields that include obvious references to \%MailThere are two pitfalls associated with this:
First, the message id of outgoing messages is not known anymore.
Second, an expert may still use the remaining information in the header
to track down the originating mail user agent.
If set to the value

then the mentioned

and

suppression does not occur.
(Read-only)one of the
([Option]
and/or

capabilities (see

escape commas with reverse solidus) to be used to overwrite or define
entries.

this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.

String capabilities form

pairs and are expected unless noted otherwise.
Numerics have to be notated as

where the number is expected in normal decimal notation.
Finally, booleans do not have any value but indicate a true or false
state simply by being defined or not; this indeed means that \%Maildoes not support undefining an existing boolean.
String capability values will undergo some expansions before use:
for one notations like

stand for

and for clarification purposes

can be used to specify

(the control notation

could lead to misreadings when a left bracket follows, which it does for
the standard CSI sequence);
finally three letter octal sequences, as in

are supported.
To specify that a terminal supports 256-colours, and to define sequences
that home the cursor and produce an audible bell, one might write:

? set termcap='Co#256,home=\E[H,bel=^G'
The following terminal capabilities are or may be meaningful for the
operation of the built-in line editor or \%Mail
boolean which indicates if the right margin needs special treatment; the

capability is related, for more see
clear the screen and home cursor.
(Will be simulated via

plus
numeric capability specifying the maximum number of colours.
Note that \%Mailbut always emits ANSI / ISO 6429 escape sequences.
move to the first column in the current row.
The default built-in fallback is
move the cursor left one space (non-destructively).
The default built-in fallback is
move the cursor right one space (non-destructively).
The default built-in fallback is

which is used by most terminals.
Less often occur

and
clear the screen.
clear to the end of line.
(Will be simulated via

plus repetitions of space characters.)
home cursor.
move the cursor (to the given column parameter) in the current row.
(Will be simulated via

plus
and

respectively: exit and enter the alternative screen ca-mode,
effectively turning \%MailThis must be enabled explicitly by setting
and

respectively: enable and disable the keypad.
This is always enabled if available, because it seems even keyboards
without keypads generate other key codes for, e.g., cursor keys in that
case, and only if enabled we see the codes that we are interested in.
boolean which indicates whether a newline written in the last column of an

indicating terminal is ignored.
With it the full terminal width is available even on autowrap terminals.
Many more capabilities which describe key-sequences are documented for
[Option]
and

terminal capabilities, see
this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.
[Option]If set only some generic fallback built-ins and possibly the content of

describe the terminal to \%Mail
this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.
  tls-ca-file-USER@HOST , tls-ca-file-HOST , tls-ca-file
[Option]certificates in PEM (Privacy Enhanced Mail) format, for the purpose of
verification of TLS server certificates.
Concurrent use is possible, the file is loaded once needed first, the
directory lookup is performed anew as a last resort whenever necessary.
The CA certificate pool built into the TLS library can be disabled via

further fine-tuning is possible via

Note the directory search variant requires the certificate files to
adhere special filename conventions, please see

and

(or
[Option]storage, and the certificate verification that is used (also see

The value is expected to consist of a comma-separated list of
configuration directives, with any intervening whitespace being ignored.
The directives directly map to flags that can be passed to

which are usually defined in a file

and the availability of which depends on the used TLS library
version: a directive without mapping is ignored (error log subject to

Directives currently understood (case-insensitively) include:
If the initial chain is not trusted, do not attempt to build an
alternative chain.
Setting this flag will make OpenSSL certificate verification match that
of older OpenSSL versions, before automatic building and checking of
alternative chains has been implemented; also see
Do not check certificate/CRL validity against current time.

By default partial, incomplete chains which cannot be verified up to the
chain top, a self-signed root certificate, will not verify.
With this flag set, a chain succeeds to verify if at least one signing
certificate of the chain is in any of the configured trusted stores of
CA certificates.
The OpenSSL manual page

gives some advise how to manage your own trusted store of CA certificates.

Disable workarounds for broken certificates.

Try building a chain using issuers in the trusted store first to avoid
problems with server-sent legacy intermediate certificates.
Newer versions of OpenSSL support alternative chain checking and enable
it by default, resulting in the same behaviour; also see
  tls-ca-no-defaults
(Boolean)used to TLS library to verify TLS server certificates.
[Option]
(if announced via

in

is used to allow resource file based configuration of the TLS library.
This happens once the library is used first, which may also be early
during startup (logged with

If a non-empty value is given then the given file, after performing

will be used instead of the TLS libraries global default, and it is an
error if the file cannot be loaded.
The application name will always be passed as

Some TLS libraries support application-specific configuration via
resource files loaded like this, please see
  tls-config-module
[Option]
is available, announced as

by

indicating availability of

then, it becomes possible to use a central TLS configuration file
for all programs, including \%mail
# Register a configuration section for \%mail\%mail# The top configuration section creates a relation
# in between dynamic SSL configuration and an actual
# program specific configuration section
[mailx_master]
ssl_conf = mailx_tls_config
# Well that actual program specific configuration section
# now can map individual tls-config-module names to sections,
# e.g., tls-config-module=account_xy
[mailx_tls_config]
account_xy = mailx_account_xy
account_yz = mailx_account_yz
[mailx_account_xy]
MinProtocol = TLSv1.2
Curves=P-521
[mailx_account_yz]
CipherString = TLSv1.2:!aNULL:!eNULL:
MinProtocol = TLSv1.1
Options = Bugs
[Option]a comma-separated list of directive/value pairs.
Directives and values need to be separated by equals signs

any whitespace surrounding pair members is removed.
Keys are (usually) case-insensitive.
Different to when placing these pairs in a

section of a

commas

need to be escaped with a reverse solidus

when included in pairs; also different: if the equals sign

is preceded with an asterisk
will be performed on the value; it is an error if these fail.
Unless proper support is announced by
only the keys below are supported, otherwise the pairs will be used
directly as arguments to the function
Filename of a TLS client certificate (chain) required by some servers.
Fallback support via
are performed.

if you use this you need to specify the private key via
will not be used!

A list of ciphers for TLS connections, see

By default no list of ciphers is set, resulting in a

specific list of ciphers (the protocol standards define lists of
acceptable ciphers; possibly cramped by the used TLS library).
Fallback support via
A list of ciphers used for TLSv1.3 connections, see

These will be joined onto the list of ciphers from

Available if

announces

as necessary via
A list of supported elliptic curves, if applicable.
By default no curves are set.
Fallback support via

if available.

The maximum and minimum supported TLS versions, respectively.
Available if

announces

as necessary via

and

these fallbacks use an internal parser which understands the strings
and the special value

which disables the given limit.

Various flags to set.
Fallback via

in which case any other value but (exactly)

results in an error.

Filename of the private key in PEM format of a TLS client certificate.
If unset, the name of the certificate file is used.

are performed.
Fallback via
if you use this you need to specify the certificate (chain) via
will not be used!

The used TLS protocol.
If

announces

or

then using

and

is preferable.
Fallback is

driven via an internal parser which understands the strings
and the special value

Multiple protocols may be given as a comma-separated list, any
whitespace is ignored, an optional plus sign

prefix enables, a hyphen-minus

prefix disables a protocol, so that

enables only the TLSv1.2 protocol.
[Option]PEM format to use when verifying TLS server certificates.
[Option]identity and optional features.
Currently supported identities are

(LibreSSL) ,

(OpenSSL v1.1.x series)
and

(elder OpenSSL series, other clones).
Optional features are preceded with a plus sign

when available, and with a hyphen-minus

otherwise.

Currently known features are
slot of
and
[Option]peer certificate against the entire local pool of CAs (for more see

with the comparison against a precalculated certificate message digest,
the so-called fingerprint, to be specified as the used

This fingerprint can be calculated with, e.g.,
  tls-fingerprint-digest
[Option]fingerprints, the defaults, if available, in test order, being
For the complete list of digest algorithms refer to
[Option]
announces

then this will be queried to find a file with random entropy data which
can be used to seed the P(seudo)R(andom)N(umber)G(enerator), see

The default filename

normally

will be used if this variable is not set or empty, or if the

fail.
Shall seeding the PRNG have been successful,

will be called to update the entropy.
Remarks: libraries which do not announce this feature seed the PRNG by
other means.
[Option]occurs during TLS server certificate validation against the
specified or default trust stores
or the TLS library built-in defaults (unless usage disallowed via

and as fine-tuned via

Valid (case-insensitive) values are

(fail and close connection immediately),

(ask whether to continue on standard input),

(show a warning and continue),

(do not perform validation).
The default is
If defined, gives the number of lines of a message to be displayed
with the command

if unset, the first five lines are printed, if set to 0 the variable

is inspected.
If the value is negative then its absolute value will be used for
unsigned right shifting (see

the

height.
(Boolean)
command series will strip adjacent empty lines and quotations.
The character set of the terminal \%Mailand the one and only supported character set that \%Mailcharacter set conversion capabilities have been compiled into it,
in which case it defaults to ISO-8859-1.
Otherwise it defaults to UTF-8.
Sufficient locale support provided the default will be preferably
deduced from the locale environment if that is set (e.g.,

see there for more); runtime locale changes will be reflected by

except during the program startup phase and if

had been used to freeze the given value.
Refer to the section

for the complete picture about character sets.
(Boolean)settings which result in behaviour that interferes with running \%Mail
e.g., it sets
and (before startup completed only)

Unsetting it does not restore the former state of the covered settings.
For a safe-by-default policy the process file mode creation mask

will be set to

on program startup by default.
Child processes inherit the file mode creation mask of their parent, and
by setting this variable to an empty value no change will be applied,
and the inherited value will be used.
Otherwise the given value will be made the new file mode creation mask.
[v15-compat]used in case none has been given in the protocol and account-specific
URL.
This variable defaults to the name of the user who runs \%Mail

Enable upward compatibility with \%Mailconfiguration options are available and how they are handled.
If set to a non-empty value the command modifier

is implied and thus enforces

over

for all commands which support both.
This manual uses [v15-compat]doing things, respectively.
(Boolean)
causes \%Mailwarnings and TLS certificate chains.
Even though marked (Boolean)increase the level of verbosity even more, in which case even details of
the actual message delivery and protocol conversations are shown.
A single

is sufficient to disable verbosity as such.
  version-hexnum , version-major , version-minor , version-update
(Read-only)the complete version identification, the second the release date in ISO
8601 notation without time.
The third is a 32-bit hexadecimal number with the upper 8 bits storing
the major, followed by the minor and update version numbers which occupy
12 bits each.
The latter three variables contain only decimal digits: the major, minor
and update version numbers.
The output of the command

will include this information.
If this variable is set messages modified using the

or

commands are written back to the current folder when it is quit;
it is only honoured for writable folders in MBOX format, though.
Note that the editor will be pointed to the raw message content in that
case, i.e., neither MIME decoding nor decryption will have been
performed, and proper
quoting of newly added or edited content is also left as an exercise
to the user.
The term

should be considered an indication that these variables are either
standardized as vivid parts of process environments, or that they are
commonly found in there.
The process environment is inherited from the

once \%Mailthe following variables transparently integrates into that of the

from \%MailThis means that, e.g., they can be managed via

and

causing automatic program environment updates (to be inherited by
newly created child processes).

In order to integrate other environment variables equally they need to
be imported (linked) with the command

This command can also be used to set and unset non-integrated
environment variables from scratch, sufficient system support provided.
The following example, applicable to a POSIX shell, sets the

environment variable for \%Mail
in order to affect any further processing in the running shell:

$ EDITOR="vim -u ${HOME}/.vimrc"
$ export EDITOR
$ COLUMNS=80 \%mail
The user's preferred width in column positions for the terminal screen.
Queried and used once on program startup in interactive or batch

mode, actively managed for child processes and the MLE (see

in interactive mode thereafter.
Non-interactive mode always uses, and the fallback default is
a compile-time constant, by default 80 columns.
If in batch mode

and

are both set but not both are usable (empty, not a number, or 0) at
program startup, then the real terminal screen size will be (tried to
be) determined once.
(Normally the

manages these variables, and unsets them for pipe specifications etc.)
Dependent on terminal control support the used width may be one less
than this value for compatibility reasons, refer to the

capabilities of

for more.
The name of the (mailbox)

to use for saving aborted messages if

is set; this defaults to

If the variable

is set no output will be generated, otherwise the contents of the file
will be replaced.
Pathname of the text editor to use for the

command and
is used for a more display oriented editor.
The user's home directory.
This variable is only used when it resides in the process environment.
The calling user's home directory will be used instead if this directory
does not exist, is not accessible or cannot be read;
it will always be used for the root user.
(No test for being writable is performed to allow usage by
non-privileged users within read-only jails, but dependent on the
variable settings this directory is a default write target, e.g. for
and more.)
[Option]
(and / or see

which indicates the used

Runtime changes trigger automatic updates of the entire locale system,
which includes updating

(except during startup if the variable has been frozen via
The user's preferred number of lines for the terminal screen.
The behaviour is as described for

yet the compile-time constant used in non-interactive mode and as
a fallback defaults to 24 (lines).
Pathname of the directory lister to use in the

command when operating on local mailboxes.
Default is

(path search through
Upon startup \%Mailname of the user who runs \%Mailname to any newly created child process.
Is used as the user's
unless

is set.
This is assumed to be an absolute pathname.
If this environmental fallback is also not set, a built-in compile-time
default is used.
[Option]
which is defined in the standard RFC 1524 as

(\%MailNote this is not a search path, but a path search.
Is used as a startup file instead of

if set.
In order to avoid side-effects from configuration files scripts should
either set this variable to

or the

command line option should be used.
If this variable is set then reading of

(aka

at startup is inhibited, i.e., the same effect is achieved as if \%Mailhad been started up with the option

(and according argument) or

This variable is only used when it resides in the process environment.
The name of the user's
file.
A logical subset of the special

(also see

are supported.
The default is

Traditionally this MBOX is used as the file to save messages from the
that have been read.
Also see
[v15-compat]
file.
Pathname of the program to use for backing the command

and when the

variable enforces usage of a pager for output.
The default paginator is

(path search through
\%Mail
then a non-existing environment variable

will be set to

likewise for
will optionally be set to

Alse see
A colon-separated list of directories that is searched by the shell when
looking for commands, e.g.,
This variable is automatically looked for upon startup, see

for more.
The shell to use for the commands
the
and when starting subprocesses.
A default shell is used if this environment variable is not defined.
Specifies a time in seconds since the Unix epoch (1970-01-01) to be
used in place of the current time.
This variable is looked up upon program startup, and its existence will
switch \%Mail
which uses deterministic random numbers, a special fixated pseudo

and more.
This operation mode is used for development and by software packagers.
 Currently an invalid setting is only ignored, rather than causing
a program abortion.
[Option]For extended colour and font control please refer to

and for terminal management in general to
Except for the root user this variable defines the directory for
temporary files to be used instead of

(or the given compile-time constant) if set, existent, accessible as
well as read- and writable.
This variable is only used when it resides in the process environment,
but \%Mailupdated to contain a usable temporary directory.
Identical to

(see there), but this variable is not standardized, should therefore not
be used, and is only corrected if already set.
Pathname of the text editor to use for the

command and
is used for a less display oriented editor.
User-specific file giving initial commands, one of the

The actual value is read from
System wide initialization file, one of the

The actual value is read from
[Option]
This location is part of the RFC 1524 standard search path, which is
a configuration option and can be overridden via
[Option]
This location is part of the RFC 1524 standard search path, which is
a configuration option and can be overridden via
The default value for
Personal MIME types, see
System wide MIME types, see
[v15-compat]
file - the section

documents the file format.
The actually used path can be overridden via
The data sink
Upon startup \%Mail
System wide initialization file

Reading of this file can be suppressed, either by using the

(and according argument) or

command line options, or by setting the

variable
File giving initial commands.
A different file can be chosen by setting the

variable

Reading of this file can be suppressed with the

command line option.

Defines a startup file to be read after all other resource files.
It can be used to specify settings that are not understood by other

implementations, for example.
This variable is only honoured when defined in a resource file, e.g.,
it is one of the
The content of these files is interpreted as follows:
The whitespace characters space, tabulator and newline,
as well as those defined by the variable

are removed from the beginning and end of input lines.

Empty lines are ignored.

Any other line is interpreted as a command.
It may be spread over multiple input lines if the newline character is

by placing a reverse solidus character

as the last character of the line; whereas any leading whitespace of
follow lines is ignored, trailing whitespace before a escaped newline
remains in the input.

If the line (content) starts with the number sign

then it is a comment-command and also ignored.
(The comment-command is a real command, which does nothing, and
therefore the usual follow lines mechanism applies!)
Unless \%Mailwhile loading these files are treated as errors and cause program exit.
More files with syntactically equal content can be

The following, saved in a file, would be an examplary content:

 # This line is a comment command.  And y\
    es, it is really continued here.
set debug \
    verbose
    set editheaders
As stated in

\%Mailmedia types in order to classify message and attachment content.
One source for them are

files, the loading of which can be controlled by setting the variable

Another is the command

which also offers access to \%Mail
files have the following syntax:

type/subtype extension [extension ...]
# E.g.: text/html html htm
where

define the MIME media type, as standardized in RFC 2046:

is used to declare the general type of data, while the

specifies a specific format for that type of data.
One or multiple filename

s, separated by whitespace, can be bound to the media type format.
Comments may be introduced anywhere on a line with a number sign

causing the remaining line to be discarded.
\%Mailcrafted files, which can be loaded via the alternative value syntax of

and prepends an optional
The following type markers are supported:
Treat message parts with this content as plain text.

The same as plain
Treat message parts with this content as HTML tagsoup.
If the [Option]the content as plain text instead.

Likewise

but instead of falling back to plain text require an explicit content
handler to be defined.

If no handler can be found a text message is displayed which says so.
This can be annoying, for example signatures serve a contextual purpose,
their content is of no use by itself.
This marker will avoid displaying the text message.
Further reading:
for sending messages:
For reading etc. messages:
RFC 1524 defines a

which \%Mail
It defines a file format to be used to inform mail user agent programs
about the locally-installed facilities for handling various data
formats, i.e., about commands and how they can be used to display, edit
et cetera MIME part contents, as well as a default path search that
includes multiple possible locations of

files and the

environment variable that can be used to overwrite that (repeating here
that it is not a search path, but instead a path search specification).
Any existing files will be loaded in sequence, appending any content to
the list of MIME type handler directives.
files consist of a set of newline separated entries.
Comment lines start with a number sign

(in the first column!) and are ignored.
Empty lines are also ignored.
All other lines form individual entries that must adhere to the syntax
described below.
To extend a single entry (not comment) its line can be continued on
follow lines if newline characters are

by preceding them with the reverse solidus character

The standard does not specify how leading whitespace of follow lines
is to be treated, therefore \%Mail

entries consist of a number of semicolon

separated fields, and the reverse solidus

character can be used to escape any following character including
semicolon and itself.
The first two fields are mandatory and must occur in the specified
order, the remaining fields are optional and may appear in any order.
Leading and trailing whitespace of content is ignored (removed).

The first field defines the MIME

the entry is about to handle (case-insensitively, and no reverse solidus
escaping is possible in this field).
If the subtype is specified as an asterisk

the entry is meant to match all subtypes of the named type, e.g.,

would match any audio type.
The second field defines the shell command which shall be used to

MIME parts of the given type; it is implicitly called the

command.

For data

shell commands message (MIME part) data is passed via standard input
unless the given shell command includes one or more instances of the
(unquoted) string

in which case these instances will be replaced with a temporary filename
and the data will have been stored in the file that is being pointed to.
Likewise, for data

shell commands data is assumed to be generated on standard output unless
the given command includes (one ore multiple)

In any case any given

format is replaced with a(n already) properly quoted filename.
Note that when a command makes use of a temporary file via

then \%Mail

and

flags had been set; see below for more.

The optional fields either define a shell command or an attribute (flag)
value, the latter being a single word and the former being a keyword
naming the field followed by an equals sign

succeeded by a shell command, and as usual for any

content any whitespace surrounding the equals sign will be removed, too.
Optional fields include the following:
A program that can be used to compose a new body or body part in the
given format.
(Currently unused.)

Similar to the

field, but is to be used when the composing program needs to specify the

header field to be applied to the composed data.
(Currently unused.)

A program that can be used to edit a body or body part in the given
format.
(Currently unused.)

A program that can be used to print a message or body part in the given
format.
(Currently unused.)

Specifies a program to be run to test some condition, e.g., the machine
architecture, or the window system in use, to determine whether or not
this mailcap entry applies.
If the test fails, a subsequent mailcap entry should be sought; also see
This flag field indicates that the given shell command must be run on
an interactive terminal.
\%Mailinteractive mode, in non-interactive mode this entry will be entirely
ignored; this flag implies
A flag field which indicates that the output of the

command will be an extended stream of textual output that can be
(re)integrated into \%MailIt is mutually exclusive with
A flag field which indicates that this type of data is line-oriented and
that, if encoded in

all newlines should be converted to canonical form (CRLF) before
encoding, and will be in that form after decoding.
(Currently unused.)

This field gives a filename format, in which

will be replaced by a random string, the joined combination of which
will be used as the filename denoted by

One could specify that a GIF file being passed to an image viewer should
have a name ending in

by using

Note that \%Maila filename suffix that consists of (ASCII) alphabetic and numeric
characters, the underscore and dot only.

Names a file, in X11 bitmap (xbm) format, which points to an appropriate
icon to be used to visually denote the presence of this kind of data.
This field is not used by \%Mail
A textual description that describes this type of data.
An extension flag test field -- by default handlers without

are entirely ignored in non-interactive mode, but if this flag is set
then their use will be considered.
It is an error if this flag is set for commands that use the flag
An extension flag field that indicates that even a
command shall not be used to generate message quotes
(as it would be by default).
Extension flag field that denotes that the given

command shall be executed asynchronously, without blocking \%MailCannot be used in conjunction with
Extension flag which denotes whether the given

command shall be evaluated once only and the (boolean) result be cached.
This is handy if some global unchanging condition is to be queried, like
Extension flag field that requests creation of a zero-sized temporary
file, the name of which is to be placed in the environment variable

It is an error to use this flag with commands that include a

format.
Normally the MIME part content is passed to the handler via standard
input; if this flag is set then the data will instead be written into
the implied

In order to cause deletion of the temporary file you will have to set

explicitly!
It is an error to use this flag with commands that include a

format.
Extension flag field that requests that the temporary file shall be
deleted automatically when the command loop is entered again at latest.
(Do not use this for asynchronous handlers.)
It is an error to use this flag with commands that include a

format, or in conjunction with

or without also setting

or
Using the string

implies the three tmpfile related flags above, but if you want, e.g.,

and deal with the temporary file yourself, you can add in this flag to
forcefully ignore
The standard includes the possibility to define any number of additional
entry fields, prefixed by

Flag fields apply to the entire

entry -- in some unusual cases, this may not be desirable, but
differentiation can be accomplished via separate entries, taking
advantage of the fact that subsequent entries are searched if an earlier
one does not provide enough information.
E.g., if a

command needs to specify the

flag, but the

command shall not, the following will help out the latter (with enabled

or an increased

level \%Mail
application/postscript; ps-to-terminal %s; needsterminal
application/postscript; ps-to-terminal %s; compose=idraw %s
In fields any occurrence of the format string

will be replaced by the

specification.
Named parameters from the

field may be placed in the command execution line using

followed by the parameter name and a closing

character.
The entire parameter should appear as a single command line argument,
regardless of embedded spaces; thus:

# Message
Content-type:  multipart/mixed; boundary=42

# Mailcap file
multipart/*; /usr/local/bin/showmulti \
  %t %{boundary}  ;  composetyped  = /usr/local/bin/makemulti

# Executed shell command
/usr/local/bin/showmulti multipart/mixed 42
Note that \%Mailshown in this example (as of today).
\%Mail
and

An example file, also showing how to properly deal with the expansion of

which includes any quotes that are necessary to make it a valid shell
argument by itself and thus will cause undesired behaviour when placed
in additional user-provided quotes:

# Comment line
text/richtext; richtext %s; copiousoutput

text/x-perl; perl -cWT %s

application/pdf; \
  infile=%s\; \
    trap "rm -f ${infile}" EXIT\; \
    trap "exit 75" INT QUIT TERM\; \
    mupdf %s; \
  x-mailx-async; x-mailx-tmpfile-keep

application/*; echo "This is \"%t\" but \
    is 50 \% Greek to me" \; < %s head -c 1024 | cat -vet; \
  copiousoutput; x-mailx-noquote
Further reading:
The

file contains user credentials for machine accounts.
The default location

may be overridden by the

environment variable.
It is possible to load encrypted

files by using an appropriate value in
The file consists of space, tabulator or newline separated tokens.
\%Mailsyntax, but users should nonetheless be aware of portability glitches
of that file format, shall their

be usable across multiple programs and platforms:
BSD does not support single, but only double quotation marks, e.g.,
BSD (only?) supports escaping of single characters via a reverse solidus
(e.g., a space can be escaped via

in- as well as outside of a quoted string.

BSD does not require a final quotation mark of the last user input token.

The original BSD (Berknet) parser also supported a format which allowed
tokens to be separated with commas - whereas at least Hewlett-Packard
still seems to support this syntax, \%Mail
As a non-portable extension some widely-used programs support
shell-style comments: if an input line starts, after any amount of
whitespace, with a number sign

then the rest of the line is ignored.

Whereas other programs may require that the

file is accessible by only the user if it contains a

token for any other

than

\%Mail

Of the following list of supported tokens \%Mail

and

At runtime the command

can be used to control \%Mail
cache.
The hostname of the entries' machine, lowercase-normalized by \%Mailbefore use.
Any further file content, until either end-of-file or the occurrence
of another

or a

first-class token is bound (only related) to the machine
As an extension that should not be the cause of any worries
\%Mail

machine *.example.com login USER password PASS
machine pop3.example.com login USER password PASS
machine smtp.example.com login USER password PASS
which would match

as well as

but neither

nor

Note that in the example neither

nor

will be matched by the wildcard, since the exact matches take
precedence (it is however faster to specify it the other way around).

This is the same as

except that it is a fallback entry that is used shall none of the
specified machines match; only one default token may be specified,
and it must be the last first-class token.

The user name on the remote machine.

The user's password on the remote machine.

Supply an additional account password.
This is merely for FTP purposes.

Define a macro.
A macro is defined with the specified

it is formed from all lines beginning with the next line and continuing
until a blank line is (consecutive newline characters are) encountered.
(Note that

entries cannot be utilized by multiple machines, too, but must be
defined following the

they are intended to be used with.)
If a macro named

exists, it is automatically run as the last step of the login process.
This is merely for FTP purposes.
# This example assumes v15.0 compatibility mode
set v15-compat

# Request strict TLL transport layer security checks
set tls-verify=strict

# Where are the up-to-date TLS certificates?
# (Since we manage up-to-date ones explicitly, do not use any,
# possibly outdated, default certificates shipped with OpenSSL)
#set tls-ca-dir=/etc/ssl/certs
set tls-ca-file=/etc/ssl/certs/ca-certificates.crt
set tls-ca-no-defaults
#set tls-ca-flags=partial-chain
wysh set smime-ca-file="${tls-ca-file}" \
  smime-ca-no-defaults #smime-ca-flags="${tls-ca-flags}"

# This could be outsourced to a central configuration file via
# tls-config-file plus tls-config-module if the used library allows.
# CipherString: explicitly define the list of ciphers, which may
#   improve security, especially with protocols older than TLS v1.2.
#   See ciphers(1).  Possibly best to only use tls-config-pairs-HOST
#   (or -USER@HOST), as necessary, again..
#   Note that TLSv1.3 uses Ciphersuites= instead, which will join
#   with CipherString (if protocols older than v1.3 are allowed)
# Curves: especially with TLSv1.3 curves selection may be desired.
# MinProtocol,MaxProtocol: do not use protocols older than TLS v1.2.
#   Change this only when the remote server does not support it:
#   maybe use chain support via tls-config-pairs-HOST / -USER@HOST
#   to define such explicit exceptions, then, e.g.,
#     MinProtocol=TLSv1.1
if [ "$tls-features" =% +ctx-set-maxmin-proto ]
  wysh set tls-config-pairs='\
      CipherString=TLSv1.2:!aNULL:!eNULL:@STRENGTH,\
      Curves=P-521:P-384:P-256,\
      MinProtocol=TLSv1.1'
else
  wysh set tls-config-pairs='\
      CipherString=TLSv1.2:!aNULL:!eNULL:@STRENGTH,\
      Curves=P-521:P-384:P-256,\
      Protocol=-ALL\,+TLSv1.1 \, +TLSv1.2\, +TLSv1.3'
endif

# Essential setting: select allowed character sets
set sendcharsets=utf-8,iso-8859-1

# A very kind option: when replying to a message, first try to
# use the same encoding that the original poster used herself!
set reply-in-same-charset

# When replying, do not merge From: and To: of the original message
# into To:.  Instead old From: -> new To:, old To: -> merge Cc:.
set recipients-in-cc

# When sending messages, wait until the Mail-Transfer-Agent finishs.
# Only like this you will be able to see errors reported through the
# exit status of the MTA (including the built-in SMTP one)!
set sendwait

# Only use built-in MIME types, no mime.types(5) files
set mimetypes-load-control

# Default directory where we act in (relative to $HOME)
set folder=mail
# A leading "+" (often) means: under *folder*
# *record* is used to save copies of sent messages
set MBOX=+mbox.mbox DEAD=+dead.txt \
  record=+sent.mbox record-files record-resent

# Make "file mymbox" and "file myrec" go to..
shortcut mymbox %:+mbox.mbox myrec +sent.mbox

# Not really optional, e.g., for S/MIME
set from='Your Name <address@exam.ple>'

# It may be necessary to set hostname and/or smtp-hostname
# if the "SERVER" of mta and "domain" of from do not match.
# The `urlencode' command can be used to encode USER and PASS
set mta=(smtps?|submissions?)://[USER[:PASS]@]SERVER[:PORT] \
  smtp-auth=login/plain... \
  smtp-use-starttls

# Never refuse to start into interactive mode, and more
set emptystart \
  colour-pager crt= \
  followup-to followup-to-honour=ask-yes fullnames \
  history-file=+.\%mail  mime-counter-evidence=0b1111 \
  prompt='?\$?!\$!/\$^ERRNAME[\$account#\$mailbox-display]? ' \
  reply-to-honour=ask-yes \
  umask=

# Only include the selected header fields when typing messages
headerpick type retain from_ date from to cc subject \
  message-id mail-followup-to reply-to
# ...when forwarding messages
headerpick forward retain subject date from to cc
# ...when saving message, etc.
#headerpick save ignore ^Original-.*$ ^X-.*$

# Some mailing lists
mlist '@xyz-editor\.xyz$' '@xyzf\.xyz$'
mlsubscribe '^xfans@xfans\.xyz$'

# Handle a few file extensions (to store MBOX databases)
filetype bz2 'bzip2 -dc' 'bzip2 -zc' \
  gz 'gzip -dc' 'gzip -c'  xz 'xz -dc' 'xz -zc' \
  zst 'zstd -dc' 'zstd -19 -zc' \
  zst.pgp 'gpg -d | zstd -dc' 'zstd -19 -zc | gpg -e'

# A real life example of a very huge free mail provider
# Instead of directly placing content inside `account',
# we `define' a macro: like that we can switch "accounts"
# from within *on-compose-splice*, for example!
define XooglX {
  set folder=~/spool/XooglX inbox=+syste.mbox sent=+sent
  set from='Your Name <address@examp.ple>'

  set pop3-no-apop-pop.gmXil.com
  shortcut pop %:pop3s://pop.gmXil.com
  shortcut imap %:imaps://imap.gmXil.com
  # Or, entirely IMAP based setup
  #set folder=imaps://imap.gmail.com record="+[Gmail]/Sent Mail" \
  #   imap-cache=~/spool/cache

  set mta=smtp://USER:PASS@smtp.gmXil.com smtp-use-starttls
  # Alternatively:
  set mta=smtps://USER:PASS@smtp.gmail.com:465
}
account XooglX {
  \call XooglX
}

# Here is a pretty large one which does not allow sending mails
# if there is a domain name mismatch on the SMTP protocol level,
# which would bite us if the value of from does not match, e.g.,
# for people who have a sXXXXeforge project and want to speak
# with the mailing list under their project account (in from),
# still sending the message through their normal mail provider
define XandeX {
  set folder=~/spool/XandeX inbox=+syste.mbox sent=+sent
  set from='Your Name <address@exam.ple>'

  shortcut pop %:pop3s://pop.yaXXex.com
  shortcut imap %:imaps://imap.yaXXex.com

  set mta=smtps://USER:PASS@smtp.yaXXex.com:465 \
    hostname=yaXXex.com smtp-hostname=
}
account XandeX {
  \call Xandex
}

# Create some new commands so that, e.g., `ls /tmp' will..
commandalias lls '!ls ${LS_COLOUR_FLAG} -aFlrS'
commandalias llS '!ls ${LS_COLOUR_FLAG} -aFlS'

set pipe-message/external-body='?* echo $MAILX_EXTERNAL_BODY_URL'

# We do not support gpg(1) directly yet.  But simple --clearsign'd
# message parts can be dealt with as follows:
define V {
  localopts yes
  wysh set pipe-text/plain=$'?*#++=?\
    < "${MAILX_FILENAME_TEMPORARY}" awk \
        -v TMPFILE="${MAILX_FILENAME_TEMPORARY}" \'\
      BEGIN{done=0}\
      /^-----BEGIN PGP SIGNED MESSAGE-----/,/^$/ {\
        if(done++ != 0)\
          next;\
        print "--- GPG --verify ---";\
        system("gpg --verify " TMPFILE " 2>&1");\
        print "--- GPG --verify ---";\
        print "";\
        next;\
      }\
      /^-----BEGIN PGP SIGNATURE-----/,\
          /^-----END PGP SIGNATURE-----/{\
        next;\
      }\
      {print}\
    \''
    print
}
commandalias V '\'call V
When storing passwords in

appropriate permissions should be set on this file with

If the [Option]
is available user credentials can be stored in the central

file instead; e.g., here is a different version of the example account
that sets up SMTP and POP3:

define XandeX {
  set folder=~/spool/XandeX inbox=+syste.mbox sent=+sent
  set from='Your Name <address@exam.ple>'
  set netrc-lookup
  # Load an encrypted ~/.netrc by uncommenting the next line
  #set netrc-pipe='gpg -qd ~/.netrc.pgp'

  set mta=smtps://smtp.yXXXXx.ru:465 \
      smtp-hostname= hostname=yXXXXx.com
  set pop3-keepalive=240 pop3-no-apop-pop.yXXXXx.ru
  commandalias xp fi pop3s://pop.yXXXXx.ru
}
account XandeX {
  \call XandeX
}
and, in the

file:

machine *.yXXXXx.ru login USER password PASS
This configuration should now work just fine:
[Option]
is a personal certificate, and a private key.
The certificate contains public information, in particular a name and
email address(es), and the public key that can be used by others to
encrypt messages for the certificate holder (the owner of the private
key), and to

signed messages generated with that certificate('s private key).
Whereas the certificate is included in each signed message, the private
key must be kept secret.
It is used to decrypt messages that were previously encrypted with the
public key, and to sign messages.

For personal use it is recommended that get a S/MIME certificate from
one of the major CAs on the Internet.
Many CAs offer such certificates for free.
Usually offered is a combined certificate and private key in PKCS#12
format which \%MailTo convert it to PEM format, the following shell command can be used;
please read on for how to use these PEM files.

$ openssl pkcs12 -in cert.p12 -out certpem.pem -clcerts -nodes
$ # Alternatively
$ openssl pkcs12 -in cert.p12 -out cert.pem -clcerts -nokeys
$ openssl pkcs12 -in cert.p12 -out key.pem -nocerts -nodes
There is also

which issues client and server certificates to members of their
community for free; their root certificate

is often not in the default set of trusted CA root certificates, though,
which means their root certificate has to be downloaded separately,
and needs to be part of the S/MIME certificate validation chain by
including it in

or as a vivid member of the

But let us take a step-by-step tour on how to setup S/MIME with
a certificate from CAcert.org despite this situation!

First of all you will have to become a member of the CAcert.org
community, simply by registrating yourself via the web interface.
Once you are, create and verify all email addresses you want to be able
to create signed and encrypted messages for/with using the corresponding
entries of the web interface.
Now ready to create S/MIME certificates, so let us create a new

ensure to include all email addresses that should be covered by the
certificate in the following web form, and also to use your name as the
Create a private key and a certificate request on your local computer
(please see the manual pages of the used commands for more in-depth
knowledge on what the used arguments etc. do):
Afterwards copy-and-paste the content of

into the certificate-request (CSR) field of the web form on the
CAcert.org website (you may need to unfold some

to see the corresponding text field).
This last step will ensure that your private key (which never left your
box) and the certificate belong together (through the public key that
will find its way into the certificate via the certificate-request).
You are now ready and can create your CAcert certified certificate.
Download and store or copy-and-paste it as
Yay.
In order to use your new S/MIME setup a combined private key/public key
(certificate) file has to be created:
This is the file \%MailIf you have created your private key with a passphrase then \%Mailask you for it whenever a message is signed or decrypted, unless this
operation has been automated as described in

Set the following variables to henceforth use S/MIME (setting

is of interest for verification only):

? set smime-ca-file=ALL-TRUSTED-ROOT-CERTS-HERE \
    smime-sign-cert=ME@HERE.com.paired \
    smime-sign-digest=SHA512 \
    smime-sign
[Option]lists (CRLs) on a regular basis.
These lists contain the serial numbers of certificates that have been
declared invalid after they have been issued.
Such usually happens because the private key for the certificate has
been compromised,
because the owner of the certificate has left the organization that is
mentioned in the certificate, etc.
To seriously use S/MIME or TLS verification,
an up-to-date CRL is required for each trusted CA.
There is otherwise no method to distinguish between valid and
invalidated certificates.
\%Mailthe Internet, so they have to be retrieved by some external mechanism.

\%MailCRLs in DER format must be converted, like, e.g.:
To tell \%Mail(and no other files) must be created.
The

or

variables, respectively, must then be set to point to that directory.
After that, \%Mailto verify a certificate.

In general it is a good idea to turn on
and / or
twice) if something does not work well.
Very often a diagnostic message can be produced that leads to the
problems' solution.

This can have two reasons, one is the necessity to wait for a file lock
and cannot be helped, the other being that \%Mail
in order to query the nodename of the box (sometimes the real one is
needed instead of the one represented by the internal variable

One may have varying success by ensuring that the real hostname and

have entries in

or, more generally, that the name service is properly setup -
and does

return the expected value?
Does this local hostname have a domain suffix?
RFC 6762 standardized the link-local top-level domain

try again after adding an (additional) entry with this extension.

Since 2014 some free service providers classify programs as

unless they use a special authentication method (OAuth 2.0) which
was not standardized for non-HTTP protocol authentication token query
until August 2015 (RFC 7628).

Different to Kerberos / GSSAPI, which is developed since the mid of the
1980s, where a user can easily create a local authentication ticket for
her- and himself with the locally installed

program, that protocol has no such local part but instead requires
a world-wide-web query to create or fetch a token; since there is no
local cache this query would have to be performed whenever \%Mailinvoked (in interactive sessions situation may differ).

\%MailBecause of this it is necessary to declare \%Mail
(on the providers account web page) in order to read and send mail.
However, it also seems possible to take the following steps instead:
give the provider the number of a mobile phone,

enable
create an application specific password (16 characters), and

use that special password instead of the real Google account password in
\%Mail
It can happen that the terminal library (see
reports different codes than the terminal really sends, in which case
\%Mailrecognize it because the received data does not match anything expected.
Especially without the [Option]reason for this may be that the (possibly even non-existing) keypad
is not turned on and the resulting layout reports the keypad control
codes for the normal keyboard keys.
The

listing of

ings will show the byte sequences that are expected.

To overcome the situation, use, e.g., the program

in conjunction with the command line option

if available, to see the byte sequences which are actually produced
by keypresses, and use the variable

to make \%MailE.g., the terminal this is typed on produces some false sequences, here
an example showing the shifted home key:

? set verbose
? bind*
# 1B 5B=[ 31=1 3B=; 32=2 48=H
  bind base :kHOM z0
? x
$ cat -v
^[[H
$ \%mail? bind*
# 1B 5B=[ 48=H
  bind base :kHOM z0
Yes.
Put (at least parts of) the following in your
[sendemail]
smtpserver = /usr/bin/\%mailsmtpserveroption = -t
#smtpserveroption = -Sexpandaddr
smtpserveroption = -Athe-account-you-need
##
suppresscc = all
suppressfrom = false
assume8bitEncoding = UTF-8
#to = /tmp/OUT
confirm = always
chainreplyto = true
multiedit = false
thread = true
quiet = true
annotate = true
Patches can also be send directly, for example:

$ git mail-patch HEAD^ |
  \%mail
sometimes fails to open MBOX mail databases because creation of
is impossible due to existing but unowned lock files.
\%Mailconsidered a site policy what counts as unowned, and what not.
The site policy is usually defined by administrator(s), and expressed in
the configuration of a locally installed MTA (for example Postfix

Therefore the suggestion:

$ </dev/null \%mail

By sending a mail to yourself the local MTA can use its normal queue
mechanism to try the delivery multiple times, finally decide a lock file
has become stale, and remove it.

[Option]This part of the program is obsolete and will vanish in v15 with the
large MIME and I/O layer rewrite, because it uses old-style blocking I/O
and makes excessive use of signal based long code jumps.
Support can hopefully be readded later based on a new-style I/O, with
SysV signal handling.
In fact the IMAP support had already been removed from the codebase, but
was reinstantiated on user demand: in effect the IMAP code is at the
level of \%Mail
being the sole exception), and should be treated with some care.

IMAP uses the

and

protocol prefixes, and an IMAP-based

may be used.
IMAP URLs (paths) undergo inspections and possible transformations
before use (and the command

can be used to manually apply them to any given argument).
Hierarchy delimiters are normalized, a step which is configurable via the

variable chain, but defaults to the first seen delimiter otherwise.
\%Mailnames from and to the

as necessary and possible.
If a mailbox name is expanded (see

to an IMAP mailbox, all names that begin with `+' then refer to IMAP
mailboxes below the

target box, while folder names prefixed by `@' refer to folders below
the hierarchy base, e.g., the following lists all folders below the
current one when in an IMAP mailbox:
Note: some IMAP servers do not accept the creation of mailboxes in
the hierarchy base, but require that they are created as subfolders of
`INBOX' - with such servers a folder name of the form
should be used (the last character is the server's hierarchy
delimiter).
The following IMAP-specific commands exist:
Only applicable to cached IMAP mailboxes;
takes a message list and reads the specified messages into the IMAP
cache.
If operating in disconnected mode on an IMAP mailbox,
switch to online mode and connect to the mail server while retaining
the mailbox status.
See the description of the

variable for more information.
If operating in online mode on an IMAP mailbox,
switch to disconnected mode while retaining the mailbox status.
See the description of the

variable for more.
A list of messages may optionally be given as argument;
the respective messages are then read into the cache before the
connection is closed, thus

makes the entire mailbox available for disconnected use.
Sends command strings directly to the current IMAP server.
\%Mailcommands that change this will produce undesirable results and should be
avoided.
Useful IMAP commands are:
Takes the name of an IMAP mailbox as an argument and creates it.

(RFC 2087) Takes the name of an IMAP mailbox as an argument
and prints the quotas that apply to the mailbox.
Not all IMAP servers support this command.

(RFC 2342) Takes no arguments and prints the Personal Namespaces,
the Other User's Namespaces and the Shared Namespaces.
Each namespace type is printed in parentheses;
if there are multiple namespaces of the same type,
inner parentheses separate them.
For each namespace a prefix and a hierarchy separator is listed.
Not all IMAP servers support this command.
Perform IMAP path transformations.
Supports

(see

and manages the error number

The first argument specifies the operation:

normalizes hierarchy delimiters (see

and converts the strings from the locale

to the internationalized variant used by IMAP,

performs the reverse operation.
The following IMAP-specific internal variables exist:
(Boolean)no connection to the server is initiated.
Instead, data is obtained from the local cache (see

).
Mailboxes that are not present in the cache
and messages that have not yet entirely been fetched from the server
are not available;
to fetch all messages in a mailbox at once,
the command

can be used while still in connected mode.
Changes that are made to IMAP mailboxes in disconnected mode are queued
and committed later when a connection to that server is made.
This procedure is not completely reliable since it cannot be guaranteed
that the IMAP unique identifiers (UIDs) on the server still match the
ones in the cache at that time.
Data is saved to

when this problem occurs.

The specified account is handled as described for the

variable above,
but other accounts are not affected.
Sets the IMAP authentication method.
Valid values are `login' for the usual password-based authentication
(the default),
`cram-md5', which is a password-based authentication that does not send
the password over the network in clear text,
and `gssapi' for GSS-API based authentication.
Enables caching of IMAP mailboxes.
The value of this variable must point to a directory that is either
existent or can be created by \%MailAll contents of the cache can be deleted by \%Mailit is not safe to make assumptions about them.
The hierarchy separator used by the IMAP server.
Whenever an IMAP path is specified it will undergo normalization.
One of the normalization steps is the squeezing and adjustment of
hierarchy separators.
If this variable is set, any occurrence of any character of the given
value that exists in the path will be replaced by the first member of
the value; an empty value will cause the default to be used, it is

If not set, we will reuse the first hierarchy separator character that
is discovered in a user-given mailbox name.
IMAP servers may close the connection after a period of
inactivity; the standard requires this to be at least 30 minutes,
but practical experience may vary.
Setting this variable to a numeric `value' greater than 0 causes
a `NOOP' command to be sent each `value' seconds if no other operation
is performed.
When retrieving the list of folders on an IMAP server, the

command stops after it has reached a certain depth to avoid possible
infinite loops.
The value of this variable sets the maximum depth allowed.
The default is 2.
If the folder separator on the current IMAP server is a slash `/',
this variable has no effect and the

command does not descend to subfolders.
Causes \%MailIMAP session TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the IMAPS method.
M. Douglas McIlroy writes in his article

from the Programmer's Manual, 1971-1986
that a

command already appeared in First Edition

in 1971:

Electronic mail was there from the start.
Never satisfied with its exact behavior, everybody touched it at one
time or another: to assure the safety of simultaneous access, to improve
privacy, to survive crashes, to exploit uucp, to screen out foreign
freeloaders, or whatever.
Not until v7 did the interface change (Thompson).
Later, as mail became global in its reach, Dave Presotto took charge and
brought order to communications with a grab-bag of external networks
(v8).
Mail was written in 1978 by Kurt Shoens and developed as part of the
distribution until 1995.
Mail has then seen further development in open source

variants, noticeably by Christos Zoulas in

Based upon this Nail, later Heirloom Mailx, was developed by Gunnar
Ritter in the years 2000 until 2008.
Since 2012 S-nail is maintained by Steffen (Daode) Nurpmeso.
This man page is derived from

that was originally written by Kurt Shoens.
\%Mail

 Interrupting an operation via

aka

from anywhere else but a command prompt is very problematic and likely
to leave the program in an undefined state: many library functions
cannot deal with the

that this software (still) performs; even though efforts have been taken
to address this, no sooner but in v15 it will have been worked out:
interruptions have not been disabled in order to allow forceful breakage
of hanging network connections, for example (all this is unrelated to
The SMTP and POP3 protocol support of \%MailAlso, if it fails to contact its upstream SMTP server, it will not make
further attempts to transfer the message at a later time (setting

and

may be useful).
If this is a concern, it might be better to set up a local SMTP server
that is capable of message queuing.

After deleting some message of a POP3 mailbox the header summary falsely
claims that there are no messages to display, one needs to perform
a scroll or dot movement to restore proper state.
In

ed

mode a power user may encounter crashes very occasionally (this is may
and very).
The file

in the source repository lists future directions.

Please report bugs to the

address, e.g., from within \%mail
Including the

output of the command

may be helpful, e.g.,

? wysh set escape=! verbose; vput version xy; unset verbose;\
  eval mail $contact-mail
Bug subject
!I xy
!.
Information on the web at
