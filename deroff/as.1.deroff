
{
NAME
AS   the portable GNU assembler.
SYNOPSIS

as [ a[cdghlns][=file]] [  alternate] [ D]
 [  compress debug sections]  [  nocompress debug sections]
 [  debug prefix map old=new]
 [  defsym sym=val] [ f] [ g] [  gstabs]
 [  gstabs+] [  gdwarf 2] [  gdwarf sections]
 [  help] [ I dir] [ J]
 [ K] [ L] [  listing lhs width=NUM]
 [  listing lhs width2=NUM] [  listing rhs width=NUM]
 [  listing cont lines=NUM] [  keep locals]
 [  no pad sections]
 [ o objfile] [ R]
 [  hash size=NUM] [  reduce memory overheads]
 [  statistics]
 [ v] [ version] [  version]
 [ W] [  warn] [  fatal warnings] [ w] [ x]
 [ Z] [@FILE]
 [  sectname subst] [  size check=[error|warning]]
 [  elf stt common=[no|yes]]
 [  generate missing build notes=[no|yes]]
 [  target help] [target options]
 [  |files ...]
TARGET

Target AArch64 options:
   [ EB| EL]
   [ mabi=ABI]

Target Alpha options:
   [ mcpu]
   [ mdebug |  no mdebug]
   [ replace |  noreplace]
   [ relax] [ g] [ Gsize]
   [ F] [ 32addr]

Target ARC options:
   [ mcpu=cpu]
   [ mA6| mARC600| mARC601| mA7| mARC700| mEM| mHS]
   [ mcode density]
   [ mrelax]
   [ EB| EL]

Target ARM options:
   [ mcpu=processor[+extension...]]
   [ march=architecture[+extension...]]
   [ mfpu=floating point format]
   [ mfloat abi=abi]
   [ meabi=ver]
   [ mthumb]
   [ EB| EL]
   [ mapcs 32| mapcs 26| mapcs float|
     mapcs reentrant]
   [ mthumb interwork] [ k]

Target Blackfin options:
   [ mcpu=processor[ sirevision]]
   [ mfdpic]
   [ mno fdpic]
   [ mnopic]

Target CRIS options:
   [  underscore |   no underscore]
   [  pic] [ N]
   [  emulation=criself |   emulation=crisaout]
   [  march=v0_v10 |   march=v10 |   march=v32 |   march=common_v10_v32]

Target D10V options:
   [ O]

Target D30V options:
   [ O| n| N]

Target EPIPHANY options:
   [ mepiphany| mepiphany16]

Target H8/300 options:
   [ h tick hex]

Target i386 options:
   [  32|  x32|  64] [ n]
   [ march=CPU[+EXTENSION...]] [ mtune=CPU]

Target IA 64 options:
   [ mconstant gp| mauto pic]
   [ milp32| milp64| mlp64| mp64]
   [ mle|mbe]
   [ mtune=itanium1| mtune=itanium2]
   [ munwind check=warning| munwind check=error]
   [ mhint.b=ok| mhint.b=warning| mhint.b=error]
   [ x| xexplicit] [ xauto] [ xdebug]

Target IP2K options:
   [ mip2022| mip2022ext]

Target M32C options:
   [ m32c| m16c] [ relax] [ h tick hex]

Target M32R options:
   [  m32rx|  [no ]warn explicit parallel conflicts|
     W[n]p]

Target M680X0 options:
   [ l] [ m68000| m68010| m68020|...]

Target M68HC11 options:
   [ m68hc11| m68hc12| m68hcs12| mm9s12x| mm9s12xg]
   [ mshort| mlong]
   [ mshort double| mlong double]
   [  force long branches] [  short branches]
   [  strict direct mode] [  print insn syntax]
   [  print opcodes] [  generate example]

Target MCORE options:
   [ jsri2bsr] [ sifilter] [ relax]
   [ mcpu=[210|340]]

Target Meta options:
   [ mcpu=cpu] [ mfpu=cpu] [ mdsp=cpu]
Target MICROBLAZE options:

Target MIPS options:
   [ nocpp] [ EL] [ EB] [ O[optimization level]]
   [ g[debug level]] [ G num] [ KPIC] [ call_shared]
   [ non_shared] [ xgot [ mvxworks pic]
   [ mabi=ABI] [ 32] [ n32] [ 64] [ mfp32] [ mgp32]
   [ mfp64] [ mgp64] [ mfpxx]
   [ modd spreg] [ mno odd spreg]
   [ march=CPU] [ mtune=CPU] [ mips1] [ mips2]
   [ mips3] [ mips4] [ mips5] [ mips32] [ mips32r2]
   [ mips32r3] [ mips32r5] [ mips32r6] [ mips64] [ mips64r2]
   [ mips64r3] [ mips64r5] [ mips64r6]
   [ construct floats] [ no construct floats]
   [ mignore branch isa] [ mno ignore branch isa]
   [ mnan=encoding]
   [ trap] [ no break] [ break] [ no trap]
   [ mips16] [ no mips16]
   [ mmips16e2] [ mno mips16e2]
   [ mmicromips] [ mno micromips]
   [ msmartmips] [ mno smartmips]
   [ mips3d] [ no mips3d]
   [ mdmx] [ no mdmx]
   [ mdsp] [ mno dsp]
   [ mdspr2] [ mno dspr2]
   [ mdspr3] [ mno dspr3]
   [ mmsa] [ mno msa]
   [ mxpa] [ mno xpa]
   [ mmt] [ mno mt]
   [ mmcu] [ mno mcu]
   [ mcrc] [ mno crc]
   [ mginv] [ mno ginv]
   [ minsn32] [ mno insn32]
   [ mfix7000] [ mno fix7000]
   [ mfix rm7000] [ mno fix rm7000]
   [ mfix vr4120] [ mno fix vr4120]
   [ mfix vr4130] [ mno fix vr4130]
   [ mdebug] [ no mdebug]
   [ mpdr] [ mno pdr]

Target MMIX options:
   [  fixed special register names] [  globalize symbols]
   [  gnu syntax] [  relax] [  no predefined symbols]
   [  no expand] [  no merge gregs] [ x]
   [  linker allocated gregs]

Target Nios II options:
   [ relax all] [ relax section] [ no relax]
   [ EB] [ EL]

Target NDS32 options:
    [ EL] [ EB] [ O] [ Os] [ mcpu=cpu]
    [ misa=isa] [ mabi=abi] [ mall ext]
    [ m[no ]16 bit]  [ m[no ]perf ext] [ m[no ]perf2 ext]
    [ m[no ]string ext] [ m[no ]dsp ext] [ m[no ]mac] [ m[no ]div]
    [ m[no ]audio isa ext] [ m[no ]fpu sp ext] [ m[no ]fpu dp ext]
    [ m[no ]fpu fma] [ mfpu freg=FREG] [ mreduced regs]
    [ mfull regs] [ m[no ]dx regs] [ mpic] [ mno relax]
    [ mb2bb]

Target PDP11 options:
   [ mpic| mno pic] [ mall] [ mno extensions]
   [ mextension| mno extension]
   [ mcpu] [ mmachine]

Target picoJava options:
   [ mb| me]

Target PowerPC options:
   [ a32| a64]
   [ mpwrx| mpwr2| mpwr| m601| mppc| mppc32| m603| m604| m403| m405|
     m440| m464| m476| m7400| m7410| m7450| m7455| m750cl| mppc64|
     m620| me500| e500x2| me500mc| me500mc64| me5500| me6500| mppc64bridge|
     mbooke| mpower4| mpwr4| mpower5| mpwr5| mpwr5x| mpower6| mpwr6|
     mpower7| mpwr7| mpower8| mpwr8| mpower9| mpwr9 ma2|
     mcell| mspe| mspe2| mtitan| me300| mcom]
   [ many] [ maltivec| mvsx| mhtm| mvle]
   [ mregnames| mno regnames]
   [ mrelocatable| mrelocatable lib| K PIC] [ memb]
   [ mlittle| mlittle endian| le| mbig| mbig endian| be]
   [ msolaris| mno solaris]
   [ nops=count]

Target PRU options:
   [ link relax]
   [ mnolink relax]
   [ mno warn regname label]

Target RISC V options:
   [ fpic| fPIC| fno pic]
   [ march=ISA]
   [ mabi=ABI]

Target RL78 options:
   [ mg10]
   [ m32bit doubles| m64bit doubles]

Target RX options:
   [ mlittle endian| mbig endian]
   [ m32bit doubles| m64bit doubles]
   [ muse conventional section names]
   [ msmall data limit]
   [ mpid]
   [ mrelax]
   [ mint register=number]
   [ mgcc abi| mrx abi]

Target s390 options:
   [ m31| m64] [ mesa| mzarch] [ march=CPU]
   [ mregnames| mno regnames]
   [ mwarn areg zero]

Target SCORE options:
   [ EB][ EL][ FIXDD][ NWARN]
   [ SCORE5][ SCORE5U][ SCORE7][ SCORE3]
   [ march=score7][ march=score3]
   [ USE_R1][ KPIC][ O0][ G num][ V]

Target SPARC options:
   [ Av6| Av7| Av8| Aleon| Asparclet| Asparclite
     Av8plus| Av8plusa| Av8plusb| Av8plusc| Av8plusd
     Av8plusv| Av8plusm| Av9| Av9a| Av9b| Av9c
     Av9d| Av9e| Av9v| Av9m| Asparc| Asparcvis
     Asparcvis2| Asparcfmaf| Asparcima| Asparcvis3
     Asparcvisr| Asparc5]
   [ xarch=v8plus| xarch=v8plusa]| xarch=v8plusb| xarch=v8plusc
     xarch=v8plusd| xarch=v8plusv| xarch=v8plusm| xarch=v9
     xarch=v9a| xarch=v9b| xarch=v9c| xarch=v9d| xarch=v9e
     xarch=v9v| xarch=v9m| xarch=sparc| xarch=sparcvis
     xarch=sparcvis2| xarch=sparcfmaf| xarch=sparcima
     xarch=sparcvis3| xarch=sparcvisr| xarch=sparc5
     bump]
   [ 32| 64]
   [  enforce aligned data][  dcti couples detect]

Target TIC54X options:
 [ mcpu=54[123589]| mcpu=54[56]lp] [ mfar mode| mf]
 [ merrors to file <filename>| me <filename>]

Target TIC6X options:
   [ march=arch] [ mbig endian| mlittle endian]
   [ mdsbt| mno dsbt] [ mpid=no| mpid=near| mpid=far]
   [ mpic| mno pic]

Target TILE Gx options:
   [ m32| m64][ EB][ EL]

Target Visium options:
   [ mtune=arch]

Target Xtensa options:
 [  [no ]text section literals] [  [no ]auto litpools]
 [  [no ]absolute literals]
 [  [no ]target align] [  [no ]longcalls]
 [  [no ]transform]
 [  rename section oldname=newname]
 [  [no ]trampolines]

Target Z80 options:
  [ z80] [ r800]
  [  ignore undocumented instructions] [ Wnud]
  [  ignore unportable instructions] [ Wnup]
  [  warn undocumented instructions] [ Wud]
  [  warn unportable instructions] [ Wup]
  [  forbid undocumented instructions] [ Fud]
  [  forbid unportable instructions] [ Fup]
DESCRIPTION

GNU as is really a family of assemblers.
If you use (or have used) the GNU assembler on one architecture, you
should find a fairly similar environment when you use it on another
architecture.  Each version has much in common with the others,
including object file formats, most assembler directives (often called
pseudo ops) and assembler syntax.

as is primarily intended to assemble the output of the
GNU C compiler gcc(fR for use by the linker
ld(fR.  Nevertheless, we've tried to make as
assemble correctly everything that other assemblers for the same
machine would assemble.
Any exceptions are documented explicitly.
This doesn't mean as always uses the same syntax as another
assembler for the same architecture; for example, we know of several
incompatible versions of 680x0 assembly language syntax.

Each time you run as it assembles exactly one source
program.  The source program is made up of one or more files.
(The standard input is also a file.)

You give as a command line that has zero or more input file
names.  The input files are read (from left file name to right).  A
command line argument (in any position) that has no special meaning
is taken to be an input file name.

If you give as no file names it attempts to read one input file
from the as standard input, which is normally your terminal.  You
may have to type ctl D to tell as there is no more program
to assemble.

Use    if you need to explicitly name the standard input file
in your command line.

If the source is empty, as produces a small, empty object
file.

as may write warnings and error messages to the standard error
file (usually your terminal).  This should not happen when  a compiler
runs as automatically.  Warnings report an assumption made so
that as could keep assembling a flawed program; errors report a
grave problem that stops the assembly.

If you are invoking as via the GNU C compiler,
you can use the  Wa option to pass arguments through to the assembler.
The assembler arguments must be separated from each other (and the  Wa)
by commas.  For example:
        gcc  c  g  O  Wa, alh, L file.c
This passes two options to the assembler:  alh (emit a listing to
standard output with high level and assembly source) and  L (retain
local symbols in the symbol table).

Usually you do not need to use this  Wa mechanism, since many compiler
command line options are automatically passed to the assembler by the compiler.
(You can call the GNU compiler driver with the  v option to see
precisely what options it passes to each compilation pass, including the
assembler.)
OPTIONS

@file 4

Read command line options from file.  The options read are
inserted in place of the original @file option.  If file
does not exist, or cannot be read, then the option will be treated
literally, and not removed.

Options in file are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The file may itself contain additional
@file options; any such options will be processed recursively.
 a[cdghlmns] 4

Turn on listings, in any of a variety of ways:

 ac 4

omit false conditionals
 ad 4

omit debugging directives
 ag 4

include general information, like as version and options passed
 ah 4

include high level source
 al 4

include assembly
 am 4

include macro expansions
 an 4

omit forms processing
 as 4

include symbols
=file 4

set the name of the listing file
You may combine these options; for example, use  aln for assembly
listing without forms processing.  The =file option, if used, must be
the last one.  By itself,  a defaults to  ahls.

  alternate 4

Begin in alternate macro mode.
  compress debug sections 4

Compress DWARF debug sections using zlib with SHF_COMPRESSED from the
ELF ABI.  The resulting object file may not be compatible with older
linkers and object file utilities.  Note if compression would make a
given section larger then it is not compressed.
  compress debug sections=none 4
  compress debug sections=zlib 4

  compress debug sections=zlib gnu 4

  compress debug sections=zlib gabi 4
These options control how DWARF debug sections are compressed.
  compress debug sections=none is equivalent to
  nocompress debug sections.
  compress debug sections=zlib and
  compress debug sections=zlib gabi are equivalent to
  compress debug sections.
  compress debug sections=zlib gnu compresses DWARF debug
sections using zlib.  The debug sections are renamed to begin with
.zdebug.  Note if compression would make a given section
larger then it is not compressed nor renamed.
  nocompress debug sections 4

Do not compress DWARF debug sections.  This is usually the default for all
targets except the x86/x86_64, but a configure time option can be used to
override this.
 D 4

Ignored.  This option is accepted for script compatibility with calls to
other assemblers.
  debug prefix map old=new 4

When assembling files in directory old, record debugging
information describing them as in new instead.
  defsym sym=value 4

Define the symbol sym to be value before assembling the input file.
value must be an integer constant.  As in C, a leading 0x
indicates a hexadecimal value, and a leading 0 indicates an octal
value.  The value of the symbol can be overridden inside a source file via the
use of a .set(fR pseudo op.
 f 4

fast(   skip whitespace and comment preprocessing (assume source is
compiler output).
 g 4
  gen debug 4
Generate debugging information for each assembler source line using whichever
debug format is preferred by the target.  This currently means either STABS,
ECOFF or DWARF2.
  gstabs 4

Generate stabs debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.
  gstabs+ 4

Generate stabs debugging information for each assembler line, with GNU
extensions that probably only gdb can handle, and that could make other
debuggers crash or refuse to read your program.  This
may help debugging assembler code.  Currently the only GNU extension is
the location of the current working directory at assembling time.
  gdwarf 2 4

Generate DWARF2 debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.  Note   this
option is only supported by some targets, not all of them.
  gdwarf sections 4

Instead of creating a .debug_line section, create a series of
.debug_line.foo sections where foo is the name of the
corresponding code section.  For example a code section called .text.func
will have its dwarf line number information placed into a section called
.debug_line.text.func.  If the code section is just called .text
then debug line section will still be called just .debug_line without any
suffix.
  size check=error 4
  size check=warning 4
Issue an error or warning for invalid ELF .size directive.
  elf stt common=no 4
  elf stt common=yes 4
These options control whether the ELF assembler should generate common
symbols with the STT_COMMON(fR type.  The default can be controlled
by a configure option   enable elf stt common.
  generate missing build notes=yes 4
  generate missing build notes=no 4
These options control whether the ELF assembler should generate GNU Build
attribute notes if none are present in the input sources.
The default can be controlled by the   enable generate build notes
configure option.
  help 4

Print a summary of the command line options and exit.
  target help 4

Print a summary of all target specific options and exit.
 I dir 4

Add directory dir to the search list for .include(fR directives.
 J 4

Don't warn about signed overflow.
 K 4

Issue warnings when difference tables altered for long displacements.
 L 4
  keep locals 4
Keep (in the symbol table) local symbols.  These symbols start with
system specific local label prefixes, typically .L for ELF systems
or L for traditional a.out systems.
  listing lhs width=number 4

Set the maximum width, in words, of the output data column for an assembler
listing to number.
  listing lhs width2=number 4

Set the maximum width, in words, of the output data column for continuation
lines in an assembler listing to number.
  listing rhs width=number 4

Set the maximum width of an input source line, as displayed in a listing, to
number bytes.
  listing cont lines=number 4

Set the maximum number of lines printed in a listing for a single line of input
to number + 1.
  no pad sections 4

Stop the assembler for padding the ends of output sections to the alignment
of that section.  The default is to pad the sections, but this can waste space
which might be needed on targets which have tight memory constraints.
 o objfile 4

Name the object file output from as objfile.
 R 4

Fold the data section into the text section.
  hash size=number 4

Set the default size of GAS's hash tables to a prime number close to
number.  Increasing this value can reduce the length of time it takes the
assembler to perform its tasks, at the expense of increasing the assembler's
memory requirements.  Similarly reducing this value can reduce the memory
requirements at the expense of speed.
  reduce memory overheads 4

This option reduces GAS's memory requirements, at the expense of making the
assembly processes slower.  Currently this switch is a synonym for
  hash size=4051, but in the future it may have other effects as well.
  sectname subst 4

Honor substitution sequences in section names.
  statistics 4

Print the maximum space (in bytes) and total time (in seconds) used by
assembly.
  strip local absolute 4

Remove local absolute symbols from the outgoing symbol table.
 v 4
 version 4
Print the as version.
  version 4

Print the as version and exit.
 W 4
  no warn 4
Suppress warning messages.
  fatal warnings 4

Treat warnings as errors.
  warn 4

Don't suppress warning messages or treat them as errors.
 w 4

Ignored.
 x 4

Ignored.
 Z 4

Generate an object file even after errors.
   | files ... 4

Standard input, or source files to assemble.

The following options are available when as is configured for the
64 bit mode of the ARM Architecture (AArch64).
 EB 4

This option specifies that the output generated by the assembler should
be marked as being encoded for a big endian processor.
 EL 4

This option specifies that the output generated by the assembler should
be marked as being encoded for a little endian processor.
 mabi=abi 4

Specify which ABI the source code uses.  The recognized arguments
are: ilp32(fR and lp64(fR, which decides the generated object
file in ELF32 and ELF64 format respectively.  The default is lp64(fR.
 mcpu=processor[+extension...] 4

This option specifies the target processor.  The assembler will issue an error
message if an attempt is made to assemble an instruction which will not execute
on the target processor.  The following processor names are recognized:
cortex a35(fR,
cortex a53(fR,
cortex a55(fR,
cortex a57(fR,
cortex a72(fR,
cortex a73(fR,
cortex a75(fR,
cortex a76(fR,
exynos m1(fR,
falkor(fR,
qdf24xx(fR,
saphira(fR,
thunderx(fR,
vulcan(fR,
xgene1(fR
and
xgene2(fR.
The special name all(fR may be used to allow the assembler to accept
instructions valid for any supported processor, including all optional
extensions.

In addition to the basic instruction set, the assembler can be told to
accept, or restrict, various extension mnemonics that extend the
processor.

If some implementations of a particular processor can have an
extension, then then those extensions are automatically enabled.
Consequently, you will not normally have to specify any additional
extensions.
 march=architecture[+extension...] 4

This option specifies the target architecture.  The assembler will
issue an error message if an attempt is made to assemble an
instruction which will not execute on the target architecture.  The
following architecture names are recognized: armv8 a(fR,
armv8.1 a(fR, armv8.2 a(fR, armv8.3 a(fR and armv8.4 a(fR.

If both  mcpu and  march are specified, the
assembler will use the setting for  mcpu.  If neither are
specified, the assembler will default to  mcpu=all.

The architecture option can be extended with the same instruction set
extension options as the  mcpu option.  Unlike
 mcpu, extensions are not always enabled by default,
 mverbose error 4

This option enables verbose error messages for AArch64 gas.  This option
is enabled by default.
 mno verbose error 4

This option disables verbose error messages in AArch64 gas.

The following options are available when as is configured for an Alpha
processor.
 mcpu 4

This option specifies the target processor.  If an attempt is made to
assemble an instruction which will not execute on the target processor,
the assembler may either expand the instruction as a macro or issue an
error message.  This option is equivalent to the .arch(fR directive.

The following processor names are recognized:
21064,
21064a(fR,
21066,
21068,
21164,
21164a(fR,
21164pc(fR,
21264,
21264a(fR,
21264b(fR,
ev4(fR,
ev5(fR,
lca45(fR,
ev5(fR,
ev56(fR,
pca56(fR,
ev6(fR,
ev67(fR,
ev68(fR.
The special name all(fR may be used to allow the assembler to accept
instructions valid for any Alpha processor.

In order to support existing practice in OSF/1 with respect to .arch(fR,
and existing practice within MILO (the Linux ARC bootloader), the
numbered processor names (e.g. 21064) enable the processor specific PALcode
instructions, while the electro vlasic names (e.g. ev4(fR) do not.
 mdebug 4
 no mdebug 4
Enables or disables the generation of .mdebug(fR encapsulation for
stabs directives and procedure descriptors.  The default is to automatically
enable .mdebug(fR when the first stabs directive is seen.
 relax 4

This option forces all relocations to be put into the object file, instead
of saving space and resolving some relocations at assembly time.  Note that
this option does not propagate all symbol arithmetic into the object file,
because not all symbol arithmetic can be represented.  However, the option
can still be useful in specific applications.
 replace 4
 noreplace 4
Enables or disables the optimization of procedure calls, both at assemblage
and at link time.  These options are only available for VMS targets and
( replace(fR is the default.  See section 1.4.1 of the OpenVMS Linker
Utility Manual.
 g 4

This option is used when the compiler generates debug information.  When
gcc is using mips tfile to generate debug
information for ECOFF, local labels must be passed through to the object
file.  Otherwise this option has no effect.
 Gsize 4

A local common symbol larger than size is placed in .bss(fR,
while smaller symbols are placed in .sbss(fR.
 F 4
 32addr 4
These options are ignored for backward compatibility.

The following options are available when as is configured for an ARC
processor.
 mcpu=cpu 4

This option selects the core processor variant.
 EB |  EL 4

Select either big endian ( EB) or little endian ( EL) output.
 mcode density 4

Enable Code Density extenssion instructions.

The following options are available when as is configured for the ARM
processor family.
 mcpu=processor[+extension...] 4

Specify which ARM processor variant is the target.
 march=architecture[+extension...] 4

Specify which ARM architecture variant is used by the target.
 mfpu=floating point format 4

Select which Floating Point architecture is the target.
 mfloat abi=abi 4

Select which floating point ABI is in use.
 mthumb 4

Enable Thumb only instruction decoding.
 mapcs 32 |  mapcs 26 |  mapcs float |  mapcs reentrant 4

Select which procedure calling convention is in use.
 EB |  EL 4

Select either big endian ( EB) or little endian ( EL) output.
 mthumb interwork 4

Specify that the code has been generated with interworking between Thumb and
ARM code in mind.
 mccs 4

Turns on CodeComposer Studio assembly syntax compatibility mode.
 k 4

Specify that PIC code has been generated.

The following options are available when as is configured for
the Blackfin processor family.
 mcpu=processor[ sirevision] 4

This option specifies the target processor.  The optional sirevision
is not used in assembler.  It's here such that GCC can easily pass down its
( mcpu=(fR option.  The assembler will issue an
error message if an attempt is made to assemble an instruction which
will not execute on the target processor.  The following processor names are
recognized:
bf504(fR,
bf506(fR,
bf512(fR,
bf514(fR,
bf516(fR,
bf518(fR,
bf522(fR,
bf523(fR,
bf524(fR,
bf525(fR,
bf526(fR,
bf527(fR,
bf531(fR,
bf532(fR,
bf533(fR,
bf534(fR,
bf535(fR (not implemented yet),
bf536(fR,
bf537(fR,
bf538(fR,
bf539(fR,
bf542(fR,
bf542m(fR,
bf544(fR,
bf544m(fR,
bf547(fR,
bf547m(fR,
bf548(fR,
bf548m(fR,
bf549(fR,
bf549m(fR,
bf561(fR,
and
bf592(fR.
 mfdpic 4

Assemble for the FDPIC ABI.
 mno fdpic 4
 mnopic 4
Disable  mfdpic.

See the info pages for documentation of the CRIS specific options.

The following options are available when as is configured for
a D10V processor.
 O 4

Optimize output by parallelizing instructions.

The following options are available when as is configured for a D30V
processor.
 O 4

Optimize output by parallelizing instructions.
 n 4

Warn when nops are generated.
 N 4

Warn when a nop after a 32 bit multiply instruction is generated.

The following options are available when as is configured for
an Epiphany processor.
 mepiphany 4

Specifies that the both 32 and 16 bit instructions are allowed.  This is the
default behavior.
 mepiphany16 4

Restricts the permitted instructions to just the 16 bit set.

The following options are available when as is configured for an H8/300
processor.
@chapter H8/300 Dependent Features
Options

The Renesas H8/300 version of as(fR has one
machine dependent option:
 h tick hex 4

Support H'00 style hex constants in addition to 0x00 style.
 mach=name 4

Sets the H8300 machine variant.  The following machine names
are recognised:
h8300h(fR,
h8300hn(fR,
h8300s(fR,
h8300sn(fR,
h8300sx(fR and 
h8300sxn(fR.

The following options are available when as is configured for
an i386 processor.
  32 |   x32 |   64 4

Select the word size, either 32 bits or 64 bits.    32
implies Intel i386 architecture, while   x32 and   64
imply AMD x86 64 architecture with 32 bit or 64 bit word size
respectively.

These options are only available with the ELF object file format, and
require that the necessary BFD support has been included (on a 32 bit
platform you have to add   enable 64 bit bfd to configure enable 64 bit
usage and use x86 64 as target platform).
 n 4

By default, x86 GAS replaces multiple nop instructions used for
alignment within code sections with multi byte nop instructions such
as leal 0(%esi,1),%esi.  This switch disables the optimization if a single
byte nop (0x90) is explicitly specified as the fill byte for alignment.
  divide 4

On SVR4 derived platforms, the character / is treated as a comment
character, which means that it cannot be used in expressions.  The
  divide option turns / into a normal character.  This does
not disable / at the beginning of a line starting a comment, or
affect using # for starting a comment.
 march=CPU[+EXTENSION...] 4

This option specifies the target processor.  The assembler will
issue an error message if an attempt is made to assemble an instruction
which will not execute on the target processor.  The following
processor names are recognized:
i8086(fR,
i186(fR,
i286(fR,
i386(fR,
i486(fR,
i586(fR,
i686(fR,
pentium(fR,
pentiumpro(fR,
pentiumii(fR,
pentiumiii(fR,
pentium4(fR,
prescott(fR,
nocona(fR,
core(fR,
core2(fR,
corei7(fR,
l1om(fR,
k1om(fR,
iamcu(fR,
k6(fR,
k6_2(fR,
athlon(fR,
opteron(fR,
k8(fR,
amdfam10(fR,
bdver1(fR,
bdver2(fR,
bdver3(fR,
bdver4(fR,
znver1(fR,
znver2(fR,
btver1(fR,
btver2(fR,
generic32(fR and
generic64(fR.

In addition to the basic instruction set, the assembler can be told to
accept various extension mnemonics.  For example,
( march=i686+sse4+vmx(fR extends i686 with sse4 and
vmx.  The following extensions are currently supported:
8087,
287,
387,
687,
no87(fR,
no287(fR,
no387(fR,
no687(fR,
mmx(fR,
nommx(fR,
sse(fR,
sse2(fR,
sse3(fR,
ssse3(fR,
sse4.1(fR,
sse4.2(fR,
sse4(fR,
nosse(fR,
nosse2(fR,
nosse3(fR,
nossse3(fR,
nosse4.1(fR,
nosse4.2(fR,
nosse4(fR,
avx(fR,
avx2(fR,
noavx(fR,
noavx2(fR,
adx(fR,
rdseed(fR,
prfchw(fR,
smap(fR,
mpx(fR,
sha(fR,
rdpid(fR,
ptwrite(fR,
cet(fR,
gfni(fR,
vaes(fR,
vpclmulqdq(fR,
prefetchwt1(fR,
clflushopt(fR,
se1(fR,
clwb(fR,
movdiri(fR,
movdir64b(fR,
avx512f(fR,
avx512cd(fR,
avx512er(fR,
avx512pf(fR,
avx512vl(fR,
avx512bw(fR,
avx512dq(fR,
avx512ifma(fR,
avx512vbmi(fR,
avx512_4fmaps(fR,
avx512_4vnniw(fR,
avx512_vpopcntdq(fR,
avx512_vbmi2(fR,
avx512_vnni(fR,
avx512_bitalg(fR,
noavx512f(fR,
noavx512cd(fR,
noavx512er(fR,
noavx512pf(fR,
noavx512vl(fR,
noavx512bw(fR,
noavx512dq(fR,
noavx512ifma(fR,
noavx512vbmi(fR,
noavx512_4fmaps(fR,
noavx512_4vnniw(fR,
noavx512_vpopcntdq(fR,
noavx512_vbmi2(fR,
noavx512_vnni(fR,
noavx512_bitalg(fR,
vmx(fR,
vmfunc(fR,
smx(fR,
xsave(fR,
xsaveopt(fR,
xsavec(fR,
xsaves(fR,
aes(fR,
pclmul(fR,
fsgsbase(fR,
rdrnd(fR,
f16c(fR,
bmi2(fR,
fma(fR,
movbe(fR,
ept(fR,
lzcnt(fR,
hle(fR,
rtm(fR,
invpcid(fR,
clflush(fR,
mwaitx(fR,
clzero(fR,
wbnoinvd(fR,
pconfig(fR,
waitpkg(fR,
cldemote(fR,
lwp(fR,
fma4(fR,
xop(fR,
cx16(fR,
syscall(fR,
rdtscp(fR,
3dnow(fR,
3dnowa(fR,
sse4a(fR,
sse5(fR,
svme(fR,
abm(fR and
padlock(fR.
Note that rather than extending a basic instruction set, the extension
mnemonics starting with no(fR revoke the respective functionality.

When the .arch(fR directive is used with  march, the
.arch(fR directive will take precedent.
 mtune=CPU 4

This option specifies a processor to optimize for. When used in
conjunction with the  march option, only instructions
of the processor specified by the  march option will be
generated.

Valid CPU values are identical to the processor list of
 march=CPU.
 msse2avx 4

This option specifies that the assembler should encode SSE instructions
with VEX prefix.
 msse check=none 4
 msse check=warning 4

 msse check=error 4
These options control if the assembler should check SSE instructions.
 msse check=none will make the assembler not to check SSE
instructions,  which is the default.   msse check=warning
will make the assembler issue a warning for any SSE instruction.
 msse check=error will make the assembler issue an error
for any SSE instruction.
 mavxscalar=128 4
 mavxscalar=256 4
These options control how the assembler should encode scalar AVX
instructions.   mavxscalar=128 will encode scalar
AVX instructions with 128bit vector length, which is the default.
 mavxscalar=256 will encode scalar AVX instructions
with 256bit vector length.
 mevexlig=128 4
 mevexlig=256 4

 mevexlig=512 4
These options control how the assembler should encode length ignored
(LIG) EVEX instructions.   mevexlig=128 will encode LIG
EVEX instructions with 128bit vector length, which is the default.
 mevexlig=256 and  mevexlig=512 will
encode LIG EVEX instructions with 256bit and 512bit vector length,
respectively.
 mevexwig=0 4
 mevexwig=1 4
These options control how the assembler should encode w ignored (WIG)
EVEX instructions.   mevexwig=0 will encode WIG
EVEX instructions with evex.w = 0, which is the default.
 mevexwig=1 will encode WIG EVEX instructions with
evex.w = 1.
 mmnemonic=att 4
 mmnemonic=intel 4
This option specifies instruction mnemonic for matching instructions.
The .att_mnemonic(fR and .intel_mnemonic(fR directives will
take precedent.
 msyntax=att 4
 msyntax=intel 4
This option specifies instruction syntax when processing instructions.
The .att_syntax(fR and .intel_syntax(fR directives will
take precedent.
 mnaked reg 4

This option specifies that registers don't require a % prefix.
The .att_syntax(fR and .intel_syntax(fR directives will take precedent.
 madd bnd prefix 4

This option forces the assembler to add BND prefix to all branches, even
if such prefix was not explicitly specified in the source code.
 mno shared 4

On ELF target, the assembler normally optimizes out non PLT relocations
against defined non weak global branch targets with default visibility.
The  mshared option tells the assembler to generate code which
may go into a shared library where all non weak global branch targets
with default visibility can be preempted.  The resulting code is
slightly bigger.  This option only affects the handling of branch
instructions.
 mbig obj 4

On x86 64 PE/COFF target this option forces the use of big object file
format, which allows more than 32768 sections.
 momit lock prefix=no 4
 momit lock prefix=yes 4
These options control how the assembler should encode lock prefix.
This option is intended as a workaround for processors, that fail on
lock prefix. This option can only be safely used with single core,
single thread computers
 momit lock prefix=yes will omit all lock prefixes.
 momit lock prefix=no will encode lock prefix as usual,
which is the default.
 mfence as lock add=no 4
 mfence as lock add=yes 4
These options control how the assembler should encode lfence, mfence and
sfence.
 mfence as lock add=yes will encode lfence, mfence and
sfence as lock addl $0x0, (%rsp) in 64 bit mode and
lock addl $0x0, (%esp) in 32 bit mode.
 mfence as lock add=no will encode lfence, mfence and
sfence as usual, which is the default.
 mrelax relocations=no 4
 mrelax relocations=yes 4
These options control whether the assembler should generate relax
relocations, R_386_GOT32X, in 32 bit mode, or R_X86_64_GOTPCRELX and
R_X86_64_REX_GOTPCRELX, in 64 bit mode.
 mrelax relocations=yes will generate relax relocations.
 mrelax relocations=no will not generate relax
relocations.  The default can be controlled by a configure option
  enable x86 relax relocations.
 mevexrcig=rne 4
 mevexrcig=rd 4

 mevexrcig=ru 4

 mevexrcig=rz 4
These options control how the assembler should encode SAE only
EVEX instructions.   mevexrcig=rne will encode RC bits
of EVEX instruction with 00, which is the default.
 mevexrcig=rd,  mevexrcig=ru
and  mevexrcig=rz will encode SAE only EVEX instructions
with 01, 10 and 11 RC bits, respectively.
 mamd64 4
 mintel64 4
This option specifies that the assembler should accept only AMD64 or
Intel64 ISA in 64 bit mode.  The default is to accept both.
 O0 |  O |  O1 |  O2 |  Os 4

Optimize instruction encoding with smaller instruction size.   O
and  O1 encode 64 bit register load instructions with 64 bit
immediate as 32 bit register load instructions with 31 bit or 32 bits
immediates and encode 64 bit register clearing instructions with 32 bit
register clearing instructions.   O2 includes  O1
optimization plus encodes 256 bit and 512 bit vector register clearing
instructions with 128 bit vector register clearing instructions.
 Os includes  O2 optimization plus encodes 16 bit, 32 bit
and 64 bit register tests with immediate as 8 bit register test with
immediate.   O0 turns off this optimization.

The following options are available when as is configured for the
Ubicom IP2K series.
 mip2022ext 4

Specifies that the extended IP2022 instructions are allowed.
 mip2022 4

Restores the default behaviour, which restricts the permitted instructions to
just the basic IP2022 ones.

The following options are available when as is configured for the
Renesas M32C and M16C processors.
 m32c 4

Assemble M32C instructions.
 m16c 4

Assemble M16C instructions (the default).
 relax 4

Enable support for link time relaxations.
 h tick hex 4

Support H'00 style hex constants in addition to 0x00 style.

The following options are available when as is configured for the
Renesas M32R (formerly Mitsubishi M32R) series.
  m32rx 4

Specify which processor in the M32R family is the target.  The default
is normally the M32R, but this option changes it to the M32RX.
  warn explicit parallel conflicts or   Wp 4

Produce warning messages when questionable parallel constructs are
encountered.
  no warn explicit parallel conflicts or   Wnp 4

Do not produce warning messages when questionable parallel constructs are
encountered.

The following options are available when as is configured for the
Motorola 68000 series.
 l 4

Shorten references to undefined symbols, to one word instead of two.
 m68000 |  m68008 |  m68010 |  m68020 |  m68030 4
|  m68040 |  m68060 |  m68302 |  m68331 |  m68332 4

|  m68333 |  m68340 |  mcpu32 |  m5200 4
Specify what processor in the 68000 family is the target.  The default
is normally the 68020, but this can be changed at configuration time.
 m68881 |  m68882 |  mno 68881 |  mno 68882 4

The target machine does (or does not) have a floating point coprocessor.
The default is to assume a coprocessor for 68020, 68030, and cpu32.  Although
the basic 68000 is not compatible with the 68881, a combination of the
two can be specified, since it's possible to do emulation of the
coprocessor instructions with the main processor.
 m68851 |  mno 68851 4

The target machine does (or does not) have a memory management
unit coprocessor.  The default is to assume an MMU for 68020 and up.

The following options are available when as is configured for an
Altera Nios II processor.
 relax section 4

Replace identified out of range branches with PC relative jmp(fR
sequences when possible.  The generated code sequences are suitable
for use in position independent code, but there is a practical limit
on the extended branch range because of the length of the sequences.
This option is the default.
 relax all 4

Replace branch instructions not determinable to be in range
and all call instructions with jmp(fR and callr(fR sequences
(respectively).  This option generates absolute relocations against the
target symbols and is not appropriate for position independent code.
 no relax 4

Do not replace any branches or calls.
 EB 4

Generate big endian output.
 EL 4

Generate little endian output.  This is the default.
 march=architecture 4

This option specifies the target architecture.  The assembler issues
an error message if an attempt is made to assemble an instruction which
will not execute on the target architecture.  The following architecture
names are recognized:
r1(fR,
r2(fR.  
The default is r1(fR.

The following options are available when as is configured for a
PRU processor.
 mlink relax 4

Assume that LD would optimize LDI32 instructions by checking the upper
16 bits of the expression. If they are all zeros, then LD would
shorten the LDI32 instruction to a single LDI. In such case as(fR
will output DIFF relocations for diff expressions.
 mno link relax 4

Assume that LD would not optimize LDI32 instructions. As a consequence,
DIFF relocations will not be emitted.
 mno warn regname label 4

Do not warn if a label name matches a register name. Usually assembler
programmers will want this warning to be emitted. C compilers may want
to turn this off.

The following options are available when as is configured for
a MIPS processor.
 G num 4

This option sets the largest size of an object that can be referenced
implicitly with the gp(fR register.  It is only accepted for targets that
use ECOFF format, such as a DECstation running Ultrix.  The default value is 8.
 EB 4

Generate big endian format output.
 EL 4

Generate little endian format output.
 mips1 4
 mips2 4

 mips3 4

 mips4 4

 mips5 4

 mips32 4

 mips32r2 4

 mips32r3 4

 mips32r5 4

 mips32r6 4

 mips64 4

 mips64r2 4

 mips64r3 4

 mips64r5 4

 mips64r6 4
Generate code for a particular MIPS Instruction Set Architecture level.
 mips1 is an alias for  march=r3000,  mips2 is an
alias for  march=r6000,  mips3 is an alias for
 march=r4000 and  mips4 is an alias for  march=r8000.
 mips5,  mips32,  mips32r2,  mips32r3,
 mips32r5,  mips32r6,  mips64,  mips64r2,
 mips64r3,  mips64r5, and  mips64r6 correspond to generic
MIPS V, MIPS32, MIPS32 Release 2, MIPS32 Release 3, MIPS32 Release 5, MIPS32
Release 6, MIPS64, MIPS64 Release 2, MIPS64 Release 3, MIPS64 Release 5, and
MIPS64 Release 6 ISA processors, respectively.
 march=cpu 4

Generate code for a particular MIPS CPU.
 mtune=cpu 4

Schedule and tune for a particular MIPS CPU.
 mfix7000 4
 mno fix7000 4
Cause nops to be inserted if the read of the destination register
of an mfhi or mflo instruction occurs in the following two instructions.
 mfix rm7000 4
 mno fix rm7000 4
Cause nops to be inserted if a dmult or dmultu instruction is
followed by a load instruction.
 mdebug 4
 no mdebug 4
Cause stabs style debugging output to go into an ECOFF style .mdebug
section instead of the standard ELF .stabs sections.
 mpdr 4
 mno pdr 4
Control generation of .pdr(fR sections.
 mgp32 4
 mfp32 4
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 32 bits wide at
all times.   mgp32 controls the size of general purpose registers
and  mfp32 controls the size of floating point registers.
 mgp64 4
 mfp64 4
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 64 bits wide at
all times.   mgp64 controls the size of general purpose registers
and  mfp64 controls the size of floating point registers.
 mfpxx 4

The register sizes are normally inferred from the ISA and ABI, but using
this flag in combination with  mabi=32 enables an ABI variant
which will operate correctly with floating point registers which are
32 or 64 bits wide.
 modd spreg 4
 mno odd spreg 4
Enable use of floating point operations on odd numbered single precision
registers when supported by the ISA.   mfpxx implies
 mno odd spreg, otherwise the default is  modd spreg.
 mips16 4
 no mips16 4
Generate code for the MIPS 16 processor.  This is equivalent to putting
.module mips16(fR at the start of the assembly file.   no mips16
turns off this option.
 mmips16e2 4
 mno mips16e2 4
Enable the use of MIPS16e2 instructions in MIPS16 mode.  This is equivalent
to putting .module mips16e2(fR at the start of the assembly file.
 mno mips16e2 turns off this option.
 mmicromips 4
 mno micromips 4
Generate code for the microMIPS processor.  This is equivalent to putting
.module micromips(fR at the start of the assembly file.
 mno micromips turns off this option.  This is equivalent to putting
.module nomicromips(fR at the start of the assembly file.
 msmartmips 4
 mno smartmips 4
Enables the SmartMIPS extension to the MIPS32 instruction set.  This is
equivalent to putting .module smartmips(fR at the start of the assembly
file.   mno smartmips turns off this option.
 mips3d 4
 no mips3d 4
Generate code for the MIPS 3D Application Specific Extension.
This tells the assembler to accept MIPS 3D instructions.
 no mips3d turns off this option.
 mdmx 4
 no mdmx 4
Generate code for the MDMX Application Specific Extension.
This tells the assembler to accept MDMX instructions.
 no mdmx turns off this option.
 mdsp 4
 mno dsp 4
Generate code for the DSP Release 1 Application Specific Extension.
This tells the assembler to accept DSP Release 1 instructions.
 mno dsp turns off this option.
 mdspr2 4
 mno dspr2 4
Generate code for the DSP Release 2 Application Specific Extension.
This option implies  mdsp.
This tells the assembler to accept DSP Release 2 instructions.
 mno dspr2 turns off this option.
 mdspr3 4
 mno dspr3 4
Generate code for the DSP Release 3 Application Specific Extension.
This option implies  mdsp and  mdspr2.
This tells the assembler to accept DSP Release 3 instructions.
 mno dspr3 turns off this option.
 mmsa 4
 mno msa 4
Generate code for the MIPS SIMD Architecture Extension.
This tells the assembler to accept MSA instructions.
 mno msa turns off this option.
 mxpa 4
 mno xpa 4
Generate code for the MIPS eXtended Physical Address (XPA) Extension.
This tells the assembler to accept XPA instructions.
 mno xpa turns off this option.
 mmt 4
 mno mt 4
Generate code for the MT Application Specific Extension.
This tells the assembler to accept MT instructions.
 mno mt turns off this option.
 mmcu 4
 mno mcu 4
Generate code for the MCU Application Specific Extension.
This tells the assembler to accept MCU instructions.
 mno mcu turns off this option.
 mcrc 4
 mno crc 4
Generate code for the MIPS cyclic redundancy check (CRC) Application
Specific Extension.  This tells the assembler to accept CRC instructions.
 mno crc turns off this option.
 mginv 4
 mno ginv 4
Generate code for the Global INValidate (GINV) Application Specific
Extension.  This tells the assembler to accept GINV instructions.
 mno ginv turns off this option.
 minsn32 4
 mno insn32 4
Only use 32 bit instruction encodings when generating code for the
microMIPS processor.  This option inhibits the use of any 16 bit
instructions.  This is equivalent to putting .set insn32(fR at
the start of the assembly file.   mno insn32 turns off this
option.  This is equivalent to putting .set noinsn32(fR at the
start of the assembly file.  By default  mno insn32 is
selected, allowing all instructions to be used.
  construct floats 4
  no construct floats 4
The   no construct floats option disables the construction of
double width floating point constants by loading the two halves of the
value into the two single width floating point registers that make up
the double width register.  By default   construct floats is
selected, allowing construction of these floating point constants.
  relax branch 4
  no relax branch 4
The   relax branch option enables the relaxation of out of range
branches.  By default   no relax branch is selected, causing any
out of range branches to produce an error.
 mignore branch isa 4
 mno ignore branch isa 4
Ignore branch checks for invalid transitions between ISA modes.  The
semantics of branches does not provide for an ISA mode switch, so in
most cases the ISA mode a branch has been encoded for has to be the
same as the ISA mode of the branch's target label.  Therefore GAS has
checks implemented that verify in branch assembly that the two ISA
modes match.   mignore branch isa disables these checks.  By
default  mno ignore branch isa is selected, causing any invalid
branch requiring a transition between ISA modes to produce an error.
 mnan=encoding 4

Select between the IEEE 754 2008 ( mnan=2008) or the legacy
( mnan=legacy) NaN encoding format.  The latter is the default.
  emulation=name 4

This option was formerly used to switch between ELF and ECOFF output
on targets like IRIX 5 that supported both.  MIPS ECOFF support was
removed in GAS 2.24, so the option now serves little purpose.
It is retained for backwards compatibility.

The available configuration names are: mipself, mipslelf and
mipsbelf.  Choosing mipself now has no effect, since the output
is always ELF.  mipslelf and mipsbelf select little  and
big endian output respectively, but  EL and  EB are now the
preferred options instead.
 nocpp 4

as ignores this option.  It is accepted for compatibility with
the native tools.
  trap 4
  no trap 4

  break 4

  no break 4
Control how to deal with multiplication overflow and division by zero.
  trap or   no break (which are synonyms) take a trap exception
(and only work for Instruction Set Architecture level 2 and higher);
  break or   no trap (also synonyms, and the default) take a
break exception.
 n 4

When this option is used, as will issue a warning every
time it generates a nop instruction from a macro.

The following options are available when as is configured for a
Meta processor.
Generate code for Meta 1.1.
Generate code for Meta 1.2.
Generate code for Meta 2.1.
Allow code to use FPU hardware of Meta 2.1.

See the info pages for documentation of the MMIX specific options.

The following options are available when as is configured for a
NDS32 processor.
Optimize for performance.
Optimize for space.
Produce little endian data output.
Produce little endian data output.
Generate PIC.
Suppress fp as gp relaxation for this file.
Back to back branch optimization.
Suppress all relaxation for this file.
Assemble for architecture <arch name> which could be v3, v3j, v3m, v3f,
v3s, v2, v2j, v2f, v2s.
Assemble for baseline <baseline> which could be v2, v3, v3m.
Specify a FPU configuration.
Specify a abi version <abi> could be v1, v2, v2fp, v2fpp.
Enable/Disable Multiply instructions support.
Enable/Disable Divide instructions support.
Enable/Disable 16 bit extension
Enable/Disable d0/d1 registers
Enable/Disable Performance extension
Enable/Disable Performance extension 2
Enable/Disable String extension
Enable/Disable Reduced Register configuration (GPR16) option
Enable/Disable AUDIO ISA extension
Enable/Disable FPU SP extension
Enable/Disable FPU DP extension
Enable/Disable FPU fused multiply add instructions
Turn on all extensions and instructions support

The following options are available when as is configured for a
PowerPC processor.
 a32 4

Generate ELF32 or XCOFF32.
 a64 4

Generate ELF64 or XCOFF64.
 K PIC 4

Set EF_PPC_RELOCATABLE_LIB in ELF flags.
 mpwrx |  mpwr2 4

Generate code for POWER/2 (RIOS2).
 mpwr 4

Generate code for POWER (RIOS1)
 m601 4

Generate code for PowerPC 601.
 mppc,  mppc32,  m603,  m604 4

Generate code for PowerPC 603/604.
 m403,  m405 4

Generate code for PowerPC 403/405.
 m440 4

Generate code for PowerPC 440.  BookE and some 405 instructions.
 m464 4

Generate code for PowerPC 464.
 m476 4

Generate code for PowerPC 476.
 m7400,  m7410,  m7450,  m7455 4

Generate code for PowerPC 7400/7410/7450/7455.
 m750cl 4

Generate code for PowerPC 750CL.
 m821,  m850,  m860 4

Generate code for PowerPC 821/850/860.
 mppc64,  m620 4

Generate code for PowerPC 620/625/630.
 me500,  me500x2 4

Generate code for Motorola e500 core complex.
 me500mc 4

Generate code for Freescale e500mc core complex.
 me500mc64 4

Generate code for Freescale e500mc64 core complex.
 me5500 4

Generate code for Freescale e5500 core complex.
 me6500 4

Generate code for Freescale e6500 core complex.
 mspe 4

Generate code for Motorola SPE instructions.
 mspe2 4

Generate code for Freescale SPE2 instructions.
 mtitan 4

Generate code for AppliedMicro Titan core complex.
 mppc64bridge 4

Generate code for PowerPC 64, including bridge insns.
 mbooke 4

Generate code for 32 bit BookE.
 ma2 4

Generate code for A2 architecture.
 me300 4

Generate code for PowerPC e300 family.
 maltivec 4

Generate code for processors with AltiVec instructions.
 mvle 4

Generate code for Freescale PowerPC VLE instructions.
 mvsx 4

Generate code for processors with Vector Scalar (VSX) instructions.
 mhtm 4

Generate code for processors with Hardware Transactional Memory instructions.
 mpower4,  mpwr4 4

Generate code for Power4 architecture.
 mpower5,  mpwr5,  mpwr5x 4

Generate code for Power5 architecture.
 mpower6,  mpwr6 4

Generate code for Power6 architecture.
 mpower7,  mpwr7 4

Generate code for Power7 architecture.
 mpower8,  mpwr8 4

Generate code for Power8 architecture.
 mpower9,  mpwr9 4

Generate code for Power9 architecture.
 mcell 4
 mcell 4
Generate code for Cell Broadband Engine architecture.
 mcom 4

Generate code Power/PowerPC common instructions.
 many 4

Generate code for any architecture (PWR/PWRX/PPC).
 mregnames 4

Allow symbolic names for registers.
 mno regnames 4

Do not allow symbolic names for registers.
 mrelocatable 4

Support for GCC's  mrelocatable option.
 mrelocatable lib 4

Support for GCC's  mrelocatable lib option.
 memb 4

Set PPC_EMB bit in ELF flags.
 mlittle,  mlittle endian,  le 4

Generate code for a little endian machine.
 mbig,  mbig endian,  be 4

Generate code for a big endian machine.
 msolaris 4

Generate code for Solaris.
 mno solaris 4

Do not generate code for Solaris.
 nops=count 4

If an alignment directive inserts more than count nops, put a
branch at the beginning to skip execution of the nops.

The following options are available when as is configured for a
RISC V processor.
 fpic 4
 fPIC 4
Generate position independent code
 fno pic 4

Don't generate position independent code (default)
 march=ISA 4

Select the base isa, as specified by ISA.  For example  march=rv32ima.
 mabi=ABI 4

Selects the ABI, which is either ilp32 or lp64, optionally followed
by f, d, or q to indicate single precision, double precision, or
quad precision floating point calling convention, or none to indicate
the soft float calling convention.  Also, ilp32 can optionally be followed
by e to indicate the RVE ABI, which is always soft float.
 mrelax 4

Take advantage of linker relaxations to reduce the number of instructions
required to materialize symbol addresses. (default)
 mno relax 4

Don't do linker relaxations.

See the info pages for documentation of the RX specific options.

The following options are available when as is configured for the s390
processor family.
 m31 4
 m64 4
Select the word size, either 31/32 bits or 64 bits.
 mesa 4
 mzarch 4
Select the architecture mode, either the Enterprise System
Architecture (esa) or the z/Architecture mode (zarch).
 march=processor 4

Specify which s390 processor variant is the target, g5 (or
arch3), g6, z900 (or arch5), z990 (or
arch6), z9 109, z9 ec (or arch7), z10 (or
arch8), z196 (or arch9), zEC12 (or arch10),
z13 (or arch11), or z14 (or arch12).
 mregnames 4
 mno regnames 4
Allow or disallow symbolic names for registers.
 mwarn areg zero 4

Warn whenever the operand for a base or index register has been specified
but evaluates to zero.

The following options are available when as is configured for a
TMS320C6000 processor.
 march=arch 4

Enable (only) instructions from architecture arch.  By default,
all instructions are permitted.

The following values of arch are accepted: c62x(fR,
c64x(fR, c64x+(fR, c67x(fR, c67x+(fR, c674x(fR.
 mdsbt 4
 mno dsbt 4
The  mdsbt option causes the assembler to generate the
Tag_ABI_DSBT(fR attribute with a value of 1, indicating that the
code is using DSBT addressing.  The  mno dsbt option, the
default, causes the tag to have a value of 0, indicating that the code
does not use DSBT addressing.  The linker will emit a warning if
objects of different type (DSBT and non DSBT) are linked together.
 mpid=no 4
 mpid=near 4

 mpid=far 4
The  mpid= option causes the assembler to generate the
Tag_ABI_PID(fR attribute with a value indicating the form of data
addressing used by the code.   mpid=no, the default,
indicates position dependent data addressing,  mpid=near
indicates position independent addressing with GOT accesses using near
DP addressing, and  mpid=far indicates position independent
addressing with GOT accesses using far DP addressing.  The linker will
emit a warning if objects built with different settings of this option
are linked together.
 mpic 4
 mno pic 4
The  mpic option causes the assembler to generate the
Tag_ABI_PIC(fR attribute with a value of 1, indicating that the
code is using position independent code addressing,  The
( mno pic(fR option, the default, causes the tag to have a value of
0, indicating position dependent code addressing.  The linker will
emit a warning if objects of different type (position dependent and
position independent) are linked together.
 mbig endian 4
 mlittle endian 4
Generate code for the specified endianness.  The default is
little endian.

The following options are available when as is configured for a TILE Gx
processor.
 m32 |  m64 4

Select the word size, either 32 bits or 64 bits.
 EB |  EL 4

Select the endianness, either big endian ( EB) or little endian ( EL).

The following option is available when as is configured for a Visium
processor.
 mtune=arch 4

This option specifies the target architecture.  If an attempt is made to
assemble an instruction that will not execute on the target architecture,
the assembler will issue an error message.

The following names are recognized:
mcm24(fR
mcm(fR
gr5(fR
gr6(fR

The following options are available when as is configured for an
Xtensa processor.
  text section literals |   no text section literals 4

Control the treatment of literal pools.  The default is
  no text section literals, which places literals in
separate sections in the output file.  This allows the literal pool to be
placed in a data RAM/ROM.  With   text section literals, the
literals are interspersed in the text section in order to keep them as
close as possible to their references.  This may be necessary for large
assembly files, where the literals would otherwise be out of range of the
L32R(fR instructions in the text section.  Literals are grouped into
pools following .literal_position(fR directives or preceding
ENTRY(fR instructions.  These options only affect literals referenced
via PC relative L32R(fR instructions; literals for absolute mode
L32R(fR instructions are handled separately.
  auto litpools |   no auto litpools 4

Control the treatment of literal pools.  The default is
  no auto litpools, which in the absence of
  text section literals places literals in separate sections
in the output file.  This allows the literal pool to be placed in a data
RAM/ROM.  With   auto litpools, the literals are interspersed
in the text section in order to keep them as close as possible to their
references, explicit .literal_position(fR directives are not
required.  This may be necessary for very large functions, where single
literal pool at the beginning of the function may not be reachable by
L32R(fR instructions at the end.  These options only affect
literals referenced via PC relative L32R(fR instructions; literals
for absolute mode L32R(fR instructions are handled separately.
When used together with   text section literals,
  auto litpools takes precedence.
  absolute literals |   no absolute literals 4

Indicate to the assembler whether L32R(fR instructions use absolute
or PC relative addressing.  If the processor includes the absolute
addressing option, the default is to use absolute L32R(fR
relocations.  Otherwise, only the PC relative L32R(fR relocations
can be used.
  target align |   no target align 4

Enable or disable automatic alignment to reduce branch penalties at some
expense in code size.    This optimization is enabled by default.  Note
that the assembler will always align instructions like LOOP(fR that
have fixed alignment requirements.
  longcalls |   no longcalls 4

Enable or disable transformation of call instructions to allow calls
across a greater range of addresses.    This option should be used when call
targets can potentially be out of range.  It may degrade both code size
and performance, but the linker can generally optimize away the
unnecessary overhead when a call ends up within range.  The default is
  no longcalls.
  transform |   no transform 4

Enable or disable all assembler transformations of Xtensa instructions,
including both relaxation and optimization.  The default is
  transform;   no transform should only be used in the
rare cases when the instructions must be exactly as specified in the
assembly source.  Using   no transform causes out of range
instruction operands to be errors.
  rename section oldname=newname 4

Rename the oldname section to newname.  This option can be used
multiple times to rename multiple sections.
  trampolines |   no trampolines 4

Enable or disable transformation of jump instructions to allow jumps
across a greater range of addresses.    This option should be used when jump targets can
potentially be out of range.  In the absence of such jumps this option
does not affect code size or performance.  The default is
  trampolines.

The following options are available when as is configured for
a Z80 family processor.
 z80 4

Assemble for Z80 processor.
 r800 4

Assemble for R800 processor.
 ignore undocumented instructions 4
 Wnud 4
Assemble undocumented Z80 instructions that also work on R800 without warning.
 ignore unportable instructions 4
 Wnup 4
Assemble all undocumented Z80 instructions without warning.
 warn undocumented instructions 4
 Wud 4
Issue a warning for undocumented Z80 instructions that also work on R800.
 warn unportable instructions 4
 Wup 4
Issue a warning for undocumented Z80 instructions that do not work on R800.
 forbid undocumented instructions 4
 Fud 4
Treat all undocumented instructions as errors.
 forbid unportable instructions 4
 Fup 4
Treat undocumented Z80 instructions that do not work on R800 as errors.
SEE ALSO

gcc(1), ld(1), and the Info entries for binutils and ld.
COPYRIGHT

Copyright (c) 1991 2018 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front Cover Texts, and with no
Back Cover Texts.  A copy of the license is included in the
section entitled (s 1GNU Free Documentation License.

