
{
NAME
perl5180delta   what is new for perl v5.18.0
DESCRIPTION

This document describes differences between the v5.16.0 release and the v5.18.0
release.

If you are upgrading from an earlier release such as v5.14.0, first read
perl5160delta, which describes differences between v5.14.0 and v5.16.0.
Core Enhancements

New mechanism for experimental features

Newly added experimental features will now require this incantation:
    no warnings "experimental::feature_name";
    use feature "feature_name";  # would warn without the prev line
There is a new warnings category, called experimental, containing
warnings that the feature pragma emits when enabling experimental
features.

Newly added experimental features will also be given special warning IDs,
which consist of experimental:: followed by the name of the feature.  (The
plan is to extend this mechanism eventually to all warnings, to allow them
to be enabled or disabled individually, and not just by category.)

By saying
    no warnings "experimental::feature_name";
you are taking responsibility for any breakage that future changes to, or
removal of, the feature may cause.

Since some features (like ~~(fR or my $_(fR) now emit experimental warnings,
and you may want to disable them in code that is also run on perls that do not
recognize these warning categories, consider using the if(fR pragma like this:
    no if $] >= 5.018, warnings => "experimental::feature_name";
Existing experimental features may begin emitting these warnings, too.  Please
consult perlexperiment for information on which features are considered
experimental.
Hash overhaul

Changes to the implementation of hashes in perl v5.18.0 will be one of the most
visible changes to the behavior of existing code.

By default, two distinct hash variables with identical keys and values may now
provide their contents in a different order where it was previously identical.

When encountering these changes, the key to cleaning up from them is to accept
that hashes are unordered collections and to act accordingly.

Hash randomization
The seed used by Perl's hash function is now random.  This means that the
order which keys/values will be returned from functions like keys()(fR,
values()(fR, and each()(fR will differ from run to run.

This change was introduced to make Perl's hashes more robust to algorithmic
complexity attacks, and also because we discovered that it exposes hash
ordering dependency bugs and makes them easier to track down.

Toolchain maintainers might want to invest in additional infrastructure to
test for things like this.  Running tests several times in a row and then
comparing results will make it easier to spot hash order dependencies in
code.  Authors are strongly encouraged not to expose the key order of
Perl's hashes to insecure audiences.

Further, every hash has its own iteration order, which should make it much
more difficult to determine what the current hash seed is.

New hash functions
Perl v5.18 includes support for multiple hash functions, and changed
the default (to ONE_AT_A_TIME_HARD), you can choose a different
algorithm by defining a symbol at compile time.  For a current list,
consult the INSTALL document.  Note that as of Perl v5.18 we can
only recommend use of the default or SIPHASH. All the others are
known to have security issues and are for research purposes only.

PERL_HASH_SEED environment variable now takes a hex value
PERL_HASH_SEED(fR no longer accepts an integer as a parameter;
instead the value is expected to be a binary value encoded in a hex
string, such as 0xf5867c55039dc724.  This is to make the
infrastructure support hash seeds of arbitrary lengths, which might
exceed that of an integer.  (SipHash uses a 16 byte seed.)

PERL_PERTURB_KEYS environment variable added
The PERL_PERTURB_KEYS(fR environment variable allows one to control the level of
randomization applied to keys(fR and friends.

When PERL_PERTURB_KEYS(fR is 0, perl will not randomize the key order at all. The
chance that keys(fR changes due to an insert will be the same as in previous
perls, basically only when the bucket size is changed.

When PERL_PERTURB_KEYS(fR is 1, perl will randomize keys in a non repeatable
way. The chance that keys(fR changes due to an insert will be very high.  This
is the most secure and default mode.

When PERL_PERTURB_KEYS(fR is 2, perl will randomize keys in a repeatable way.
Repeated runs of the same program should produce the same output every time.

PERL_HASH_SEED(fR implies a non default PERL_PERTURB_KEYS(fR setting. Setting
PERL_HASH_SEED=0(fR (exactly one 0) implies PERL_PERTURB_KEYS=0(fR (hash key
randomization disabled); setting PERL_HASH_SEED(fR to any other value implies
PERL_PERTURB_KEYS=2(fR (deterministic and repeatable hash key randomization).
Specifying PERL_PERTURB_KEYS(fR explicitly to a different level overrides this
behavior.

Hash::Util::hash_seed() now returns a string
Hash::Util::hash_seed() now returns a string instead of an integer.  This
is to make the infrastructure support hash seeds of arbitrary lengths
which might exceed that of an integer.  (SipHash uses a 16 byte seed.)

Output of PERL_HASH_SEED_DEBUG has been changed
The environment variable PERL_HASH_SEED_DEBUG now makes perl show both the
hash function perl was built with, and the seed, in hex, in use for that
process. Code parsing this output, should it exist, must change to accommodate
the new format.  Example of the new format:
    $ PERL_HASH_SEED_DEBUG=1 ./perl  e1
    HASH_FUNCTION = MURMUR3 HASH_SEED = 0x1476bb9f

Upgrade to Unicode 6.2

Perl now supports Unicode 6.2.  A list of changes from Unicode
6.1 is at <http://www.unicode.org/versions/Unicode6.2.0>.
Character name aliases may now include non Latin1 range characters

It is possible to define your own names for characters for use in
(eN{...}(fR, charnames::vianame()(fR, etc.  These names can now be
comprised of characters from the whole Unicode range.  This allows for
names to be in your native language, and not just English.  Certain
restrictions apply to the characters that may be used (you can't define
a name that has punctuation in it, for example).  See (s 1CUSTOM
ALIASES(s0 in charnames.
New DTrace probes

The following new DTrace probes have been added:
o 4
op entry(fR
o 4
loading file(fR
o 4
loaded file(fR
This new variable provides access to the filehandle that was last read.
This is the handle used by $. and by tell(fR and eof(fR without
arguments.
Regular Expression Set Operations

This is an experimental feature to allow matching against the union,
intersection, etc., of sets of code points, similar to
Unicode::Regex::Set.  It can also be used to extend /x(fR processing
to [bracketed] character classes, and as a replacement of user defined
properties, allowing more complex expressions than they do.  See
Extended Bracketed Character Classes in perlrecharclass.
Lexical subroutines

This new feature is still considered experimental.  To enable it:
    use 5.018;
    no warnings "experimental::lexical_subs";
    use feature "lexical_subs";
You can now declare subroutines with state sub foo(fR, my sub foo(fR, and
our sub foo(fR.  (state sub(fR requires that the state feature be
enabled, unless you write it as CORE::state sub foo(fR.)

state sub(fR creates a subroutine visible within the lexical scope in which
it is declared.  The subroutine is shared between calls to the outer sub.

my sub(fR declares a lexical subroutine that is created each time the
enclosing block is entered.  state sub(fR is generally slightly faster than
my sub(fR.

our sub(fR declares a lexical alias to the package subroutine of the same
name.

For more information, see Lexical Subroutines in perlsub.
Computed Labels

The loop controls next(fR, last(fR and redo(fR, and the special dump(fR
operator, now allow arbitrary expressions to be used to compute labels at run
time.  Previously, any argument that was not a constant was treated as the
empty string.
More CORE:: subs

Several more built in functions have been added as subroutines to the
CORE:: namespace   namely, those non overridable keywords that can be
implemented without custom parsers: defined(fR, delete(fR, exists(fR,
glob(fR, pos(fR, prototype(fR, scalar(fR, split(fR, study(fR, and undef(fR.

As some of these have prototypes, prototype(CORE::...)(fR has been
changed to not make a distinction between overridable and non overridable
keywords.  This is to make prototype(CORE::pos)(fR consistent with
prototype(&CORE::pos)(fR.
kill(fR has always allowed a negative signal number, which kills the
process group instead of a single process.  It has also allowed signal
names.  But it did not behave consistently, because negative signal names
were treated as 0.  Now negative signals names like ( INT(fR are supported
and treated the same way as  2 [perl #112990].
Security

See also: hash overhaul

Some of the changes in the hash overhaul were made to
enhance security.  Please read that section.
The documentation for Storable(fR now includes a section which warns readers
of the danger of accepting Storable documents from untrusted sources. The
short version is that deserializing certain types of data can lead to loading
modules and other code execution. This is documented behavior and wanted
behavior, but this opens an attack vector for malicious entities.
If users could provide a translation string to Locale::Maketext, this could be
used to invoke arbitrary Perl subroutines available in the current process.

This has been fixed, but it is still possible to invoke any method provided by
Locale::Maketext(fR itself or a subclass that you are using. One of these
methods in turn will invoke the Perl core's sprintf(fR subroutine.

In summary, allowing users to provide translation strings without auditing
them is a bad idea.

This vulnerability is documented in CVE 2012 6329.
Avoid calling memset with a negative count

Poorly written perl code that allows an attacker to specify the count to perl's
x(fR string repeat operator can already cause a memory exhaustion
denial of service attack. A flaw in versions of perl before v5.15.5 can escalate
that into a heap buffer overrun; coupled with versions of glibc before 2.16, it
possibly allows the execution of arbitrary code.

The flaw addressed to this commit has been assigned identifier CVE 2012 5195
and was researched by Tim Brown.
Incompatible Changes

See also: hash overhaul

Some of the changes in the hash overhaul are not fully
compatible with previous versions of perl.  Please read that section.
Previously, it warned, and the Unicode REPLACEMENT CHARACTER was
substituted.  Unicode now recommends that this situation be a syntax
error.  Also, the previous behavior led to some confusing warnings and
behaviors, and since the REPLACEMENT CHARACTER has no use other than as
a stand in for some unknown character, any code that has this problem is
buggy.
Since v5.12.0, it has been deprecated to use certain characters in
user defined (eN{...}(fR character names.  These now cause a syntax
error.  For example, it is now an error to begin a name with a digit,
such as in
 my $undraftable = "(N{4F}";    # Syntax error!
or to have commas anywhere in the name.  See (s 1CUSTOM ALIASES(s0 in charnames.
Unicode 6.0 reused the name (s 1BELL(s0 for a different code point than it
traditionally had meant.  Since Perl v5.14, use of this name still
referred to U+0007, but would raise a deprecation warning.  Now, (s 1BELL(s0
refers to U+1F514, and the name for U+0007 is (s 1ALERT.  All the
functions in charnames have been correspondingly updated.
New Restrictions in Multi Character Case Insensitive Matching in Regular Expression Bracketed Character Classes

Unicode has now withdrawn their previous recommendation for regular
expressions to automatically handle cases where a single character can
match multiple characters case insensitively, for example, the letter
LATIN SMALL LETTER SHARP S and the sequence ss(fR.  This is because
it turns out to be impracticable to do this correctly in all
circumstances.  Because Perl has tried to do this as best it can, it
will continue to do so.  (We are considering an option to turn it off.)
However, a new restriction is being added on such matches when they
occur in [bracketed] character classes.  People were specifying
things such as /[(0 (xff]/i(fR, and being surprised that it matches the
two character sequence ss(fR (since LATIN SMALL LETTER SHARP S occurs in
this range).  This behavior is also inconsistent with using a
property instead of a range:  (ep{Block=Latin1}(fR also includes LATIN
SMALL LETTER SHARP S, but /[(p{Block=Latin1}]/i(fR does not match ss(fR.
The new rule is that for there to be a multi character case insensitive
match within a bracketed character class, the character must be
explicitly listed, and not as an end point of a range.  This more
closely obeys the Principle of Least Astonishment.  See
Bracketed Character Classes in perlrecharclass.  Note that a bug [perl
#89774], now fixed as part of this change, prevented the previous
behavior from working fully.
Explicit rules for variable names and identifiers

Due to an oversight, single character variable names in v5.16 were
completely unrestricted.  This opened the door to several kinds of
insanity.  As of v5.18, these now follow the rules of other identifiers,
in addition to accepting characters that match the (ep{POSIX_Punct}(fR
property.

There is no longer any difference in the parsing of identifiers
specified by using braces versus without braces.  For instance, perl
used to allow ${foo:bar}(fR (with a single colon) but not $foo:bar.
Now that both are handled by a single code path, they are both treated
the same way: both are forbidden.  Note that this change is about the
range of permissible literal identifiers, not other expressions.
Vertical tabs are now whitespace

No one could recall why (es(fR didn't match (ecK(fR, the vertical tab.
Now it does.  Given the extreme rarity of that character, very little
breakage is expected.  That said, here's what it means:

(es(fR in a regex now matches a vertical tab in all circumstances.

Literal vertical tabs in a regex literal are ignored when the /x(fR
modifier is used.

Leading vertical tabs, alone or mixed with other whitespace, are now
ignored when interpreting a string as a number.  For example:
  $dec = " (cK (t 123";
  $hex = " (cK (t 0xF";

  say 0 + $dec;   # was 0 with warning, now 123
  say int $dec;   # was 0, now 123
  say oct $hex;   # was 0, now  15
The implementation of this feature has been almost completely rewritten.
Although its main intent is to fix bugs, some behaviors, especially
related to the scope of lexical variables, will have changed.  This is
described more fully in the Selected Bug Fixes section.
Stricter parsing of substitution replacement

It is no longer possible to abuse the way the parser parses s///e(fR like
this:
    %_=(_,"Just another ");
    $_="Perl hacker,(n";
    s//_} >{_/e;print
Instead of assigning to an implicit lexical $_, given(fR now makes the
global $_ an alias for its argument, just like foreach(fR.  However, it
still uses lexical $_ if there is lexical $_ in scope (again, just like
foreach(fR) [perl #114020].
The smartmatch family of features are now experimental

Smart match, added in v5.10.0 and significantly revised in v5.10.1, has been
a regular point of complaint.  Although there are a number of ways in which
it is useful, it has also proven problematic and confusing for both users and
implementors of Perl.  There have been a number of proposals on how to best
address the problem.  It is clear that smartmatch is almost certainly either
going to change or go away in the future.  Relying on its current behavior
is not recommended.

Warnings will now be issued when the parser sees ~~(fR, given(fR, or when(fR.
To disable these warnings, you can add this line to the appropriate scope:
  no if $] >= 5.018, warnings => "experimental::smartmatch";
Consider, though, replacing the use of these features, as they may change
behavior again before becoming stable.
Since it was introduced in Perl v5.10, it has caused much confusion with no
obvious solution:
o 4
Various modules (e.g., List::Util) expect callback routines to use the
global $_.  use List::Util first; my $_; first { $_ == 1 } @list(fR
does not work as one would expect.
o 4
A my $_(fR declaration earlier in the same file can cause confusing closure
warnings.
o 4
The _ subroutine prototype character allows called subroutines to access
your lexical $_, so it is not really private after all.
o 4
Nevertheless, subroutines with a (@) prototype and methods cannot access
the caller's lexical $_, unless they are written in XS.
o 4
But even XS routines cannot access a lexical $_ declared, not in the
calling subroutine, but in an outer scope, iff that subroutine happened not
to mention $_ or use any operators that default to $_.

It is our hope that lexical $_ can be rehabilitated, but this may
cause changes in its behavior.  Please use it with caution until it
becomes stable.
Previously, when reading from a stream with I/O layers such as
encoding(fR, the readline() function, otherwise known as the <>(fR
operator, would read N bytes from the top most layer. [perl #79960]

Now, N characters are read instead.

There is no change in behaviour when reading from streams with no
extra layers, since bytes map exactly to characters.
glob(fR overrides used to be passed a magical undocumented second argument
that identified the caller.  Nothing on CPAN was using this, and it got in
the way of a bug fix, so it was removed.  If you really need to identify
the caller, see Devel::Callsite on CPAN.
Here doc parsing

The body of a here document inside a quote like operator now always begins
on the line after the <<foo marker.  Previously, it was documented to
begin on the line following the containing quote like operator, but that
was only sometimes the case [perl #114040].
Alphanumeric operators must now be separated from the closing delimiter of regular expressions

You may no longer write something like:
 m/a/and 1
Instead you must write
 m/a/ and 1
with whitespace separating the operator from the closing delimiter of
the regular expression.  Not having whitespace has resulted in a
deprecation warning since Perl v5.14.0.
qw(...) can no longer be used as parentheses

qw(fR lists used to fool the parser into thinking they were always
surrounded by parentheses.  This permitted some surprising constructions
such as foreach $x qw(a b c) {...}(fR, which should really be written
foreach $x (qw(a b c)) {...}(fR.  These would sometimes get the lexer into
the wrong state, so they didn't fully work, and the similar foreach qw(a
b c) {...}(fR that one might expect to be permitted never worked at all.

This side effect of qw(fR has now been abolished.  It has been deprecated
since Perl v5.13.11.  It is now necessary to use real parentheses
everywhere that the grammar calls for them.
Interaction of lexical and default warnings

Turning on any lexical warnings used first to disable all default warnings
if lexical warnings were not already enabled:
    $W; # deprecation warning
    use warnings "void";
    $#; # void warning; no deprecation warning
Now, the debugging(fR, deprecated(fR, glob(fR, inplace(fR and malloc(fR warnings
categories are left on when turning on lexical warnings (unless they are
turned off by no warnings(fR, of course).

This may cause deprecation warnings to occur in code that used to be free
of warnings.

Those are the only categories consisting only of default warnings.  Default
warnings in other categories are still disabled by use warnings "category"(fR,
as we do not yet have the infrastructure for controlling
individual warnings.
Due to an accident of history, state sub(fR and our sub(fR were equivalent
to a plain sub(fR, so one could even create an anonymous sub with
our sub { ... }(fR.  These are now disallowed outside of the lexical_subs
feature.  Under the lexical_subs feature they have new meanings described
in Lexical Subroutines in perlsub.
Defined values stored in environment are forced to byte strings

A value stored in an environment variable has always been stringified when
inherited by child processes.

In this release, when assigning to %ENV, values are immediately stringified,
and converted to be only a byte string.

First, it is forced to be only a string.  Then if the string is utf8 and the
equivalent of utf8::downgrade()(fR works, that result is used; otherwise, the
equivalent of utf8::encode()(fR is used, and a warning is issued about wide
characters (Diagnostics).
When require(fR encounters an unreadable file, it now dies.  It used to
ignore the file and continue searching the directories in @INC
[perl #113422].
The various gv_fetchmeth_W(fR XS functions used to treat a package whose
named ended with ::SUPER(fR specially.  A method lookup on the Foo::SUPER(fR
package would be treated as a SUPER(fR method lookup on the Foo(fR package.  This
is no longer the case.  To do a SUPER(fR lookup, pass the Foo(fR stash and the
GV_SUPER(fR flag.
After some changes earlier in v5.17, split(fR's behavior has been
simplified: if the PATTERN argument evaluates to a string
containing one space, it is treated the way that a literal string
containing one space once was.
Deprecations

Module removals

The following modules will be removed from the core distribution in a future
release, and will at that time need to be installed from CPAN. Distributions
on CPAN which require these modules will need to list them as prerequisites.

The core versions of these modules will now issue "deprecated" category
warnings to alert you to this fact. To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use. Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN capable Perl installation,
not usually on concerns over their design.
encoding 4

The use of this pragma is now strongly discouraged. It conflates the encoding
of source text with the encoding of I/O data, reinterprets escape sequences in
source text (a questionable choice), and introduces the UTF 8 bug to all runtime
handling of character strings. It is broken as designed and beyond repair.

For using non ASCII literal characters in source text, please refer to utf8.
For dealing with textual I/O data, please refer to Encode and open.
Archive::Extract 4
B::Lint 4

B::Lint::Debug 4
Devel::InnerPackage 4

Log::Message 4

Log::Message::Config 4

Log::Message::Handlers 4

Log::Message::Item 4

Log::Message::Simple 4

Module::Pluggable 4

Module::Pluggable::Object 4

Object::Accessor 4

Pod::LaTeX 4

Term::UI 4

Term::UI::History 4
Deprecated Utilities

The following utilities will be removed from the core distribution in a
future release as their associated modules have been deprecated. They
will remain available with the applicable CPAN distribution.
cpanp 4
cpan2dist 4
These items are part of the CPANPLUS(fR distribution.
pod2latex 4

This item is part of the Pod::LaTeX(fR distribution.
PL_sv_objcount

This interpreter global variable used to track the total number of
Perl objects in the interpreter. It is no longer maintained and will
be removed altogether in Perl v5.20.
When a regular expression pattern is compiled with /x(fR, Perl treats 6
characters as white space to ignore, such as SPACE and TAB.  However,
Unicode recommends 11 characters be treated thusly.  We will conform
with this in a future Perl version.  In the meantime, use of any of the
missing characters will raise a deprecation warning, unless turned off.
The five characters are:
    U+0085 NEXT LINE
    U+200E LEFT TO RIGHT MARK
    U+200F RIGHT TO LEFT MARK
    U+2028 LINE SEPARATOR
    U+2029 PARAGRAPH SEPARATOR

User defined charnames with surprising whitespace

A user defined character name with trailing or multiple spaces in a row is
likely a typo.  This now generates a warning when defined, on the assumption
that uses of it will be unlikely to include the excess whitespace.
Various XS callable functions are now deprecated

All the functions used to classify characters will be removed from a
future version of Perl, and should not be used.  With participating C
compilers (e.g., gcc), compiling any file that uses any of these will
generate a warning.  These were not intended for public use; there are
equivalent, faster, macros for most of them.

See Character classes in perlapi.  The complete list is:

is_uni_alnum(fR, is_uni_alnumc(fR, is_uni_alnumc_lc(fR,
is_uni_alnum_lc(fR, is_uni_alpha(fR, is_uni_alpha_lc(fR,
is_uni_ascii(fR, is_uni_ascii_lc(fR, is_uni_blank(fR,
is_uni_blank_lc(fR, is_uni_cntrl(fR, is_uni_cntrl_lc(fR,
is_uni_digit(fR, is_uni_digit_lc(fR, is_uni_graph(fR,
is_uni_graph_lc(fR, is_uni_idfirst(fR, is_uni_idfirst_lc(fR,
is_uni_lower(fR, is_uni_lower_lc(fR, is_uni_print(fR,
is_uni_print_lc(fR, is_uni_punct(fR, is_uni_punct_lc(fR,
is_uni_space(fR, is_uni_space_lc(fR, is_uni_upper(fR,
is_uni_upper_lc(fR, is_uni_xdigit(fR, is_uni_xdigit_lc(fR,
is_utf8_alnum(fR, is_utf8_alnumc(fR, is_utf8_alpha(fR,
is_utf8_ascii(fR, is_utf8_blank(fR, is_utf8_char(fR,
is_utf8_cntrl(fR, is_utf8_digit(fR, is_utf8_graph(fR,
is_utf8_idcont(fR, is_utf8_idfirst(fR, is_utf8_lower(fR,
is_utf8_mark(fR, is_utf8_perl_space(fR, is_utf8_perl_word(fR,
is_utf8_posix_digit(fR, is_utf8_print(fR, is_utf8_punct(fR,
is_utf8_space(fR, is_utf8_upper(fR, is_utf8_xdigit(fR,
is_utf8_xidcont(fR, is_utf8_xidfirst(fR.

In addition these three functions that have never worked properly are
deprecated:
to_uni_lower_lc(fR, to_uni_title_lc(fR, and to_uni_upper_lc(fR.
Certain rare uses of backslashes within regexes are now deprecated

There are three pairs of characters that Perl recognizes as
metacharacters in regular expression patterns: {}(fR, [](fR, and ()(fR.
These can be used as well to delimit patterns, as in:
  m{foo}
  s(foo)(bar)
Since they are metacharacters, they have special meaning to regular
expression patterns, and it turns out that you can't turn off that
special meaning by the normal means of preceding them with a backslash,
if you use them, paired, within a pattern delimited by them.  For
example, in
  m{foo({1,3(}}
the backslashes do not change the behavior, and this matches
"f o" followed by one to three more occurrences of "o".

Usages like this, where they are interpreted as metacharacters, are
exceedingly rare; we think there are none, for example, in all of CPAN.
Hence, this deprecation should affect very little code.  It does give
notice, however, that any such code needs to change, which will in turn
allow us to change the behavior in future Perl versions so that the
backslashes do have an effect, and without fear that we are silently
breaking any existing code.
A deprecation warning is now raised if the ((fR and ?(fR are separated
by white space or comments in (?...)(fR regular expression constructs.
Similarly, if the ((fR and W(fR are separated in (WVERB...)(fR
constructs.
Pre PerlIO IO implementations

In theory, you can currently build perl without PerlIO.  Instead, you'd use a
wrapper around stdio or sfio.  In practice, this isn't very useful.  It's not
well tested, and without any support for IO layers or (thus) Unicode, it's not
much of a perl.  Building without PerlIO will most likely be removed in the
next version of perl.

PerlIO supports a stdio(fR layer if stdio use is desired.  Similarly a
sfio layer could be produced in the future, if needed.
Future Deprecations

o 4
Platforms without support infrastructure

Both Windows CE and z/OS have been historically under maintained, and are
currently neither successfully building nor regularly being smoke tested.
Efforts are underway to change this situation, but it should not be taken for
granted that the platforms are safe and supported.  If they do not become
buildable and regularly smoked, support for them may be actively removed in
future releases.  If you have an interest in these platforms and you can lend
your time, expertise, or hardware to help support these platforms, please let
the perl development effort know by emailing perl5 porters@perl.org(fR.

Some platforms that appear otherwise entirely dead are also on the short list
for removal between now and v5.20.0:

DG/UX 4
NeXT 4
We also think it likely that current versions of Perl will no longer
build AmigaOS, DJGPP, NetWare (natively), OS/2 and Plan 9. If you
are using Perl on such a platform and have an interest in ensuring
Perl's future on them, please contact us.

We believe that Perl has long been unable to build on mixed endian
architectures (such as PDP 11s), and intend to remove any remaining
support code. Similarly, code supporting the long umaintained GNU
dld will be removed soon if no one makes themselves known as an
active user.

o 4
Swapping of $< and $>

Perl has supported the idiom of swapping $< and $> (and likewise $( and
$)) to temporarily drop permissions since 5.0, like this:
    ($<, $>) = ($>, $<);
However, this idiom modifies the real user/group id, which can have
undesirable side effects, is no longer useful on any platform perl
supports and complicates the implementation of these variables and list
assignment in general.

As an alternative, assignment only to $> is recommended:
    local $> = $<;
See also: Setuid Demystified <http://www.cs.berkeley.edu/~daw/papers/setuid usenix02.pdf>.
o 4
microperl(fR, long broken and of unclear present purpose, will be removed.
o 4
Revamping "(Q" semantics in double quotish strings when combined with
other escapes.

There are several bugs and inconsistencies involving combinations
of (eQ(fR and escapes like (ex(fR, (eL(fR, etc., within a (eQ...(E(fR pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.
o 4
Use of $x, where x(fR stands for any actual (non printing) C0 control
character will be disallowed in a future Perl version.  Use ${x}(fR
instead (where again x(fR stands for a control character),
or better, $^A , where ^(fR is a caret (CIRCUMFLEX ACCENT),
and A(fR stands for any of the characters listed at the end of
(s 1OPERATOR DIFFERENCES(s0 in perlebcdic.
Performance Enhancements

o 4
Lists of lexical variable declarations (my($x, $y)(fR) are now optimised
down to a single op and are hence faster than before.
o 4
A new C preprocessor define NO_TAINT_SUPPORT(fR was added that, if set,
disables Perl's taint support altogether.  Using the  T or  t command
line flags will cause a fatal error.  Beware that both core tests as
well as many a CPAN distribution's tests will fail with this change.  On
the upside, it provides a small performance benefit due to reduced
branching.

Do not enable this unless you know exactly what you are getting yourself
into.
o 4
pack(fR with constant arguments is now constant folded in most cases
[perl #113470].
o 4
Speed up in regular expression matching against Unicode properties.  The
largest gain is for (eX(fR, the Unicode extended grapheme cluster.  The
gain for it is about 35%   40%.  Bracketed character classes, e.g.,
[0 9(x{100}](fR containing code points above 255 are also now faster.
o 4
On platforms supporting it, several former macros are now implemented as static
inline functions. This should speed things up slightly on non GCC platforms.
o 4
The optimisation of hashes in boolean context has been extended to
affect scalar(%hash)(fR, %hash ? ... : ...(fR, and sub { %hash || ... }(fR.
o 4
Filetest operators manage the stack in a fractionally more efficient manner.
o 4
Globs used in a numeric context are now numified directly in most cases,
rather than being numified via stringification.
o 4
The x(fR repetition operator is now folded to a single constant at compile
time if called in scalar context with constant operands and no parentheses
around the left operand.
Modules and Pragmata

New Modules and Pragmata

o 4
Config::Perl::V version 0.16 has been added as a dual lifed module.
It provides structured data retrieval of perl  V(fR output including
information only known to the perl(fR binary and not available via Config.
Updated Modules and Pragmata

For a complete list of updates, run:
  $ corelist   diff 5.16.0 5.18.0
You can substitute your favorite version in place of 5.16.0, too.
o 4
Archive::Extract has been upgraded to 0.68.

Work around an edge case on Linux with Busybox's unzip.
o 4
Archive::Tar has been upgraded to 1.90.

ptar now supports the  T option as well as dashless options
[rt.cpan.org #75473], [rt.cpan.org #75475].

Auto encode filenames marked as UTF 8 [rt.cpan.org #75474].

Don't use tell(fR on IO::Zlib handles [rt.cpan.org #64339].

Don't try to chown(fR on symlinks.
o 4
autodie has been upgraded to 2.13.

autodie(fR now plays nicely with the 'open' pragma.
o 4
B has been upgraded to 1.42.

The stashoff(fR method of COPs has been added.   This provides access to an
internal field added in perl 5.16 under threaded builds [perl #113034].

B::COP::stashpv(fR now supports UTF 8 package names and embedded NULs.

All CVf_W(fR and GVf_W(fR
and more SV related flag values are now provided as constants in the B::(fR
namespace and available for export.  The default export list has not changed.

This makes the module work with the new pad API.
o 4
B::Concise has been upgraded to 0.95.

The ( nobanner(fR option has been fixed, and format(fRs can now be dumped.
When passed a sub name to dump, it will check also to see whether it
is the name of a format.  If a sub and a format share the same name,
it will dump both.

This adds support for the new OpMAYBE_TRUEBOOL(fR and OPpTRUEBOOL(fR flags.
o 4
B::Debug has been upgraded to 1.18.

This adds support (experimentally) for B::PADLIST(fR, which was
added in Perl 5.17.4.
o 4
B::Deparse has been upgraded to 1.20.

Avoid warning when run under perl  w(fR.

It now deparses
loop controls with the correct precedence, and multiple statements in a
format(fR line are also now deparsed correctly.

This release suppresses trailing semicolons in formats.

This release adds stub deparsing for lexical subroutines.

It no longer dies when deparsing sort(fR without arguments.  It now
correctly omits the comma for system $prog @args(fR and exec $prog
@args(fR.
o 4
bignum, bigint and bigrat have been upgraded to 0.33.

The overrides for hex(fR and oct(fR have been rewritten, eliminating
several problems, and making one incompatible change:

o 4
Formerly, whichever of use bigint(fR or use bigrat(fR was compiled later
would take precedence over the other, causing hex(fR and oct(fR not to
respect the other pragma when in scope.
o 4
Using any of these three pragmata would cause hex(fR and oct(fR anywhere
else in the program to evaluate their arguments in list context and prevent
them from inferring $_ when called without arguments.
o 4
Using any of these three pragmata would make oct("1234")(fR return 1234
(for any number not beginning with 0) anywhere in the program.  Now 1234
is translated from octal to decimal, whether within the pragma's scope or
not.
o 4
The global overrides that facilitate lexical use of hex(fR and oct(fR now
respect any existing overrides that were in place before the new overrides
were installed, falling back to them outside of the scope of use bignum(fR.
o 4
use bignum "hex"(fR, use bignum "oct"(fR and similar invocations for bigint
and bigrat now export a hex(fR or oct(fR function, instead of providing a
global override.
o 4
Carp has been upgraded to 1.29.

Carp is no longer confused when caller(fR returns undef for a package that
has been deleted.

The longmess()(fR and shortmess()(fR functions are now documented.
o 4
CGI has been upgraded to 3.63.

Unrecognized HTML escape sequences are now handled better, problematic
trailing newlines are no longer inserted after <form> tags
by startform()(fR or start_form()(fR, and bogus Insecure Dependency
warnings appearing with some versions of perl are now worked around.
o 4
Class::Struct has been upgraded to 0.64.

The constructor now respects overridden accessor methods [perl #29230].
o 4
Compress::Raw::Bzip2 has been upgraded to 2.060.

The misuse of Perl's magic API has been fixed.
o 4
Compress::Raw::Zlib has been upgraded to 2.060.

Upgrade bundled zlib to version 1.2.7.

Fix build failures on Irix, Solaris, and Win32, and also when building as C .1v'++.1v'[rt.cpan.org #69985], [rt.cpan.org #77030], [rt.cpan.org #75222].

The misuse of Perl's magic API has been fixed.

compress()(fR, uncompress()(fR, memGzip()(fR and memGunzip()(fR have
been speeded up by making parameter validation more efficient.
o 4
CPAN::Meta::Requirements has been upgraded to 2.122.

Treat undef requirements to from_string_hash(fR as 0 (with a warning).

Added requirements_for_module(fR method.
o 4
CPANPLUS has been upgraded to 0.9135.

Allow adding blib/script to PATH.

Save the history between invocations of the shell.

Handle multiple makemakerargs(fR and makeflags(fR arguments better.

This resolves issues with the SQLite source engine.
o 4
Data::Dumper has been upgraded to 2.145.

It has been optimized to only build a seen scalar hash as necessary,
thereby speeding up serialization drastically.

Additional tests were added in order to improve statement, branch, condition
and subroutine coverage.  On the basis of the coverage analysis, some of the
internals of Dumper.pm were refactored.  Almost all methods are now
documented.
o 4
DB_File has been upgraded to 1.827.

The main Perl module no longer uses the "@_" construct.
o 4
Devel::Peek has been upgraded to 1.11.

This fixes compilation with C .1v'++.1v'the new pad API.
o 4
Digest::MD5 has been upgraded to 2.52.

Fix Digest::Perl::MD5(fR OO fallback [rt.cpan.org #66634].
o 4
Digest::SHA has been upgraded to 5.84.

This fixes a double free bug, which might have caused vulnerabilities
in some cases.
o 4
DynaLoader has been upgraded to 1.18.

This is due to a minor code change in the XS for the VMS implementation.

This fixes warnings about using CODE(fR sections without an OUTPUT(fR
section.
o 4
Encode has been upgraded to 2.49.

The Mac alias x mac ce has been added, and various bugs have been fixed
in Encode::Unicode, Encode::UTF7 and Encode::GSM0338.
o 4
Env has been upgraded to 1.04.

Its SPLICE implementation no longer misbehaves in list context.
o 4
ExtUtils::CBuilder has been upgraded to 0.280210.

Manifest files are now correctly embedded for those versions of VC++ which
make use of them. [perl #111782, #111798].

A list of symbols to export can now be passed to link()(fR when on
Windows, as on other OSes [perl #115100].
o 4
ExtUtils::ParseXS has been upgraded to 3.18.

The generated C code now avoids unnecessarily incrementing
PL_amagic_generation(fR on Perl versions where it's done automatically
(or on current Perl where the variable no longer exists).

This avoids a bogus warning for initialised XSUB non parameters [perl
#112776].
o 4
File::Copy has been upgraded to 2.26.

copy()(fR no longer zeros files when copying into the same directory,
and also now fails (as it has long been documented to do) when attempting
to copy a file over itself.
o 4
File::DosGlob has been upgraded to 1.10.

The internal cache of file names that it keeps for each caller is now
freed when that caller is freed.  This means
use File::DosGlob glob; eval scalar <W>(W(C' no longer leaks memory.
o 4
File::Fetch has been upgraded to 0.38.

Added the 'file_default' option for URLs that do not have a file
component.

Use File::HomeDir(fR when available, and provide PERL5_CPANPLUS_HOME(fR to
override the autodetection.

Always re fetch CHECKSUMS if fetchdir(fR is set.
o 4
File::Find has been upgraded to 1.23.

This fixes inconsistent unixy path handling on VMS.

Individual files may now appear in list of directories to be searched
[perl #59750].
o 4
File::Glob has been upgraded to 1.20.

File::Glob has had exactly the same fix as File::DosGlob.  Since it is
what Perl's own glob(fR operator itself uses (except on VMS), this means
eval scalar <W>(W(C' no longer leaks.

A space separated list of patterns return long lists of results no longer
results in memory corruption or crashes.  This bug was introduced in
Perl 5.16.0.  [perl #114984]
o 4
File::Spec::Unix has been upgraded to 3.40.

abs2rel(fR could produce incorrect results when given two relative paths or
the root directory twice [perl #111510].
o 4
File::stat has been upgraded to 1.07.

File::stat(fR ignores the filetest pragma, and warns when used in
combination therewith.  But it was not warning for ( r(fR.  This has been
fixed [perl #111640].

( p(fR now works, and does not return false for pipes [perl #111638].

Previously File::stat(fR's overloaded ( x(fR and ( X(fR operators did not give
the correct results for directories or executable files when running as
root. They had been treating executable permissions for root just like for
any other user, performing group membership tests etc for files not owned
by root. They now follow the correct Unix behaviour   for a directory they
are always true, and for a file if any of the three execute permission bits
are set then they report that root can execute the file. Perl's builtin
( x(fR and ( X(fR operators have always been correct.
o 4
File::Temp has been upgraded to 0.23

Fixes various bugs involving directory removal.  Defers unlinking tempfiles if
the initial unlink fails, which fixes problems on NFS.
o 4
GDBM_File has been upgraded to 1.15.

The undocumented optional fifth parameter to TIEHASH(fR has been
removed. This was intended to provide control of the callback used by
gdbmW(fR functions in case of fatal errors (such as filesystem problems),
but did not work (and could never have worked). No code on CPAN even
attempted to use it. The callback is now always the previous default,
croak(fR. Problems on some platforms with how the C(fR croak(fR function
is called have also been resolved.
o 4
Hash::Util has been upgraded to 0.15.

hash_unlocked(fR and hashref_unlocked(fR now returns true if the hash is
unlocked, instead of always returning false [perl #112126].

hash_unlocked(fR, hashref_unlocked(fR, lock_hash_recurse(fR and
unlock_hash_recurse(fR are now exportable [perl #112126].

Two new functions, hash_locked(fR and hashref_locked(fR, have been added.
Oddly enough, these two functions were already exported, even though they
did not exist [perl #112126].
o 4
HTTP::Tiny has been upgraded to 0.025.

Add SSL verification features [github #6], [github #9].

Include the final URL in the response hashref.

Add local_address(fR option.

This improves SSL support.
o 4
IO has been upgraded to 1.28.

sync()(fR can now be called on read only file handles [perl #64772].

IO::Socket tries harder to cache or otherwise fetch socket
information.
o 4
IPC::Cmd has been upgraded to 0.80.

Use POSIX::_exit(fR instead of exit(fR in run_forked(fR [rt.cpan.org #76901].
o 4
IPC::Open3 has been upgraded to 1.13.

The open3()(fR function no longer uses POSIX::close()(fR to close file
descriptors since that breaks the ref counting of file descriptors done by
PerlIO in cases where the file descriptors are shared by PerlIO streams,
leading to attempts to close the file descriptors a second time when
any such PerlIO streams are closed later on.
o 4
Locale::Codes has been upgraded to 3.25.

It includes some new codes.
o 4
Memoize has been upgraded to 1.03.

Fix the MERGE(fR cache option.
o 4
Module::Build has been upgraded to 0.4003.

Fixed bug where modules without $VERSION might have a version of '0' listed
in 'provides' metadata, which will be rejected by PAUSE.

Fixed bug in PodParser to allow numerals in module names.

Fixed bug where giving arguments twice led to them becoming arrays, resulting
in install paths like ARRAY(0xdeadbeef)/lib/Foo.pm.

A minor bug fix allows markup to be used around the leading Name in
a POD abstract line, and some documentation improvements have been made.
o 4
Module::CoreList has been upgraded to 2.90

Version information is now stored as a delta, which greatly reduces the
size of the CoreList.pm file.

This restores compatibility with older versions of perl and cleans up
the corelist data for various modules.
o 4
Module::Load::Conditional has been upgraded to 0.54.

Fix use of requires(fR on perls installed to a path with spaces.

Various enhancements include the new use of Module::Metadata.
o 4
Module::Metadata has been upgraded to 1.000011.

The creation of a Module::Metadata object for a typical module file has
been sped up by about 40%, and some spurious warnings about $VERSIONs
have been suppressed.
o 4
Module::Pluggable has been upgraded to 4.7.

Amongst other changes, triggers are now allowed on events, which gives
a powerful way to modify behaviour.
o 4
Net::Ping has been upgraded to 2.41.

This fixes some test failures on Windows.
o 4
Opcode has been upgraded to 1.25.

Reflect the removal of the boolkeys opcode and the addition of the
clonecv, introcv and padcv opcodes.
o 4
overload has been upgraded to 1.22.

no overload(fR now warns for invalid arguments, just like use overload(fR.
o 4
PerlIO::encoding has been upgraded to 0.16.

This is the module implementing the :encoding(...) I/O layer.  It no
longer corrupts memory or crashes when the encoding back end reallocates
the buffer or gives it a typeglob or shared hash key scalar.
o 4
PerlIO::scalar has been upgraded to 0.16.

The buffer scalar supplied may now only contain code points 0xFF or
lower. [perl #109828]
o 4
Perl::OSType has been upgraded to 1.003.

This fixes a bug detecting the VOS operating system.
o 4
Pod::Html has been upgraded to 1.18.

The option (  libpods(fR has been reinstated. It is deprecated, and its use
does nothing other than issue a warning that it is no longer supported.

Since the HTML files generated by pod2html claim to have a UTF 8 charset,
actually write the files out using UTF 8 [perl #111446].
o 4
Pod::Simple has been upgraded to 3.28.

Numerous improvements have been made, mostly to Pod::Simple::XHTML,
which also has a compatibility change: the codes_in_verbatim(fR option
is now disabled by default.  See cpan/Pod Simple/ChangeLog for the
full details.
o 4
re has been upgraded to 0.23

Single character [class]es like /[s]/(fR or /[s]/i(fR are now optimized
as if they did not have the brackets, i.e. /s/(fR or /s/i(fR.

See note about op_comp(fR in the Internal Changes section below.
o 4
Safe has been upgraded to 2.35.

Fix interactions with Devel::Cover(fR.

Don't eval code under no strict(fR.
o 4
Scalar::Util has been upgraded to version 1.27.

Fix an overloading issue with sum(fR.

first(fR and reduce(fR now check the callback first (so &first(1) is
disallowed).

Fix tainted(fR on magical values [rt.cpan.org #55763].

Fix sum(fR on previously magical values [rt.cpan.org #61118].

Fix reading past the end of a fixed buffer [rt.cpan.org #72700].
o 4
Search::Dict has been upgraded to 1.07.

No longer require stat(fR on filehandles.

Use fc(fR for casefolding.
o 4
Socket has been upgraded to 2.009.

Constants and functions required for IP multicast source group membership
have been added.

unpack_sockaddr_in()(fR and unpack_sockaddr_in6()(fR now return just the IP
address in scalar context, and inet_ntop()(fR now guards against incorrect
length scalars being passed in.

This fixes an uninitialized memory read.
o 4
Storable has been upgraded to 2.41.

Modifying $_[0] within STORABLE_freeze(fR no longer results in crashes
[perl #112358].

An object whose class implements STORABLE_attach(fR is now thawed only once
when there are multiple references to it in the structure being thawed
[perl #111918].

Restricted hashes were not always thawed correctly [perl #73972].

Storable would croak when freezing a blessed REF object with a
STORABLE_freeze()(fR method [perl #113880].

It can now freeze and thaw vstrings correctly.  This causes a slight
incompatible change in the storage format, so the format version has
increased to 2.9.

This contains various bugfixes, including compatibility fixes for older
versions of Perl and vstring handling.
o 4
Sys::Syslog has been upgraded to 0.32.

This contains several bug fixes relating to getservbyname()(fR,
setlogsock()(fRand log levels in syslog()(fR, together with fixes for
Windows, Haiku OS and GNU/kFreeBSD.  See cpan/Sys Syslog/Changes
for the full details.
o 4
Term::ANSIColor has been upgraded to 4.02.

Add support for italics.

Improve error handling.
o 4
Term::ReadLine has been upgraded to 1.10.  This fixes the
use of the cpan and cpanp shells on Windows in the event that the current
drive happens to contain a (dev(tty file.
o 4
Test::Harness has been upgraded to 3.26.

Fix glob semantics on Win32 [rt.cpan.org #49732].

Don't use Win32::GetShortPathName(fR when calling perl [rt.cpan.org #47890].

Ignore  T when reading shebang [rt.cpan.org #64404].

Handle the case where we don't know the wait status of the test more
gracefully.

Make the test summary 'ok' line overridable so that it can be changed to a
plugin to make the output of prove idempotent.

Don't run world writable files.
o 4
Text::Tabs and Text::Wrap have been upgraded to
2012.0818.  Support for Unicode combining characters has been added to them
both.
o 4
threads::shared has been upgraded to 1.31.

This adds the option to warn about or ignore attempts to clone structures
that can't be cloned, as opposed to just unconditionally dying in
that case.

This adds support for dual valued values as created by
Scalar::Util::dualvar.
o 4
Tie::StdHandle has been upgraded to 4.3.

READ(fR now respects the offset argument to read(fR [perl #112826].
o 4
Time::Local has been upgraded to 1.2300.

Seconds values greater than 59 but less than 60 no longer cause
timegm()(fR and timelocal()(fR to croak.
o 4
Unicode::UCD has been upgraded to 0.53.

This adds a function all_casefolds()
that returns all the casefolds.
o 4
Win32 has been upgraded to 0.47.

New APIs have been added for getting and setting the current code page.
Removed Modules and Pragmata

o 4
Version::Requirements has been removed from the core distribution.  It is
available under a different name: CPAN::Meta::Requirements.
Documentation

Changes to Existing Documentation

perlcheat

o 4
perlcheat has been reorganized, and a few new sections were added.

perldata

o 4
Now explicitly documents the behaviour of hash initializer lists that
contain duplicate keys.

perldiag

o 4
The explanation of symbolic references being prevented by strict refs
now doesn't assume that the reader knows what symbolic references are.

perlfaq

o 4
perlfaq has been synchronized with version 5.0150040 from CPAN.

perlfunc

o 4
The return value of pipe(fR is now documented.
o 4
Clarified documentation of our(fR.

perlop

o 4
Loop control verbs (dump(fR, goto(fR, next(fR, last(fR and redo(fR) have always
had the same precedence as assignment operators, but this was not documented
until now.

Diagnostics
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
New Diagnostics

New Errors

o 4
Unterminated delimiter for here document

This message now occurs when a here document label has an initial quotation
mark but the final quotation mark is missing.

This replaces a bogus and misleading error message about not finding the label
itself [perl #114104].
o 4
panic: child pseudo process was never scheduled

This error is thrown when a child pseudo process in the ithreads implementation
on Windows was not scheduled within the time period allowed and therefore was
not able to initialize properly [perl #88840].
o 4
Group name must start with a non digit word character in regex; marked by <   HERE in m/%s/

This error has been added for (?&0)(fR, which is invalid.  It used to
produce an incomprehensible error message [perl #101666].
o 4
Can't use an undefined value as a subroutine reference

Calling an undefined value as a subroutine now produces this error message.
It used to, but was accidentally disabled, first in Perl 5.004 for
non magical variables, and then in Perl v5.14 for magical (e.g., tied)
variables.  It has now been restored.  In the mean time, undef was treated
as an empty string [perl #113576].
o 4
Experimental %s subs not enabled

To use lexical subs, you must first enable them:
    no warnings experimental::lexical_subs;
    use feature lexical_subs;
    my sub foo { ... }
New Warnings

o 4
'Strings with code points over 0xFF may not be mapped into in memory file handles'
o 4
'%s' resolved to '(o{%s}%d'
o 4
'Trailing white space in a charnames alias definition is deprecated'
o 4
'A sequence of multiple spaces in a charnames alias definition is deprecated'
o 4
'Passing malformed UTF 8 to %s is deprecated'
o 4
Subroutine &%s is not available

(W closure) During compilation, an inner named subroutine or eval is
attempting to capture an outer lexical subroutine that is not currently
available.  This can happen for one of two reasons.  First, the lexical
subroutine may be declared in an outer anonymous subroutine that has not
yet been created.  (Remember that named subs are created at compile time,
while anonymous subs are created at run time.)  For example,
    sub { my sub a {...} sub f { (&a } }
At the time that f is created, it can't capture the current the a sub,
since the anonymous subroutine hasn't been created yet.  Conversely, the
following won't give a warning since the anonymous subroutine has by now
been created and is live:
    sub { my sub a {...} eval sub f { (&a } } >();
The second situation is caused by an eval accessing a variable that has
gone out of scope, for example,
    sub f {
        my sub a {...}
        sub { eval (e&a }
    }
    f() >();
Here, when the '(&a' in the eval is being compiled, f() is not currently
being executed, so its &a is not available for capture.
o 4
%s subroutine &%s masks earlier declaration in same %s

(W misc) A my or state subroutine has been redeclared in the
current scope or statement, effectively eliminating all access to
the previous instance.  This is almost always a typographical error.
Note that the earlier subroutine will still exist until the end of
the scope or until all closure references to it are destroyed.
o 4
The %s feature is experimental

(S experimental) This warning is emitted if you enable an experimental
feature via use feature(fR.  Simply suppress the warning if you want
to use the feature, but know that in doing so you are taking the risk
of using an experimental feature which may change or be removed in a
future Perl version:
    no warnings "experimental::lexical_subs";
    use feature "lexical_subs";

o 4
sleep(%u) too large

(W overflow) You called sleep(fR with a number that was larger than it can
reliably handle and sleep(fR probably slept for less time than requested.
o 4
Wide character in setenv

Attempts to put wide characters into environment variables via %ENV now
provoke this warning.
o 4
"Invalid negative number (%s) in chr"

chr()(fR now warns when passed a negative value [perl #83048].
o 4
"Integer overflow in srand"

srand()(fR now warns when passed a value that doesn't fit in a UV(fR (since the
value will be truncated rather than overflowing) [perl #40605].
o 4
" i used with no filenames on the command line, reading from STDIN"

Running perl with the ( i(fR flag now warns if no input files are provided on
the command line [perl #113410].
Changes to Existing Diagnostics

o 4
$W is no longer supported

The warning that use of $W and $# is no longer supported is now
generated for every location that references them.  Previously it would fail
to be generated if another variable using the same typeglob was seen first
(e.g. @W(fR before $W), and would not be generated for the second and
subsequent uses.  (It's hard to fix the failure to generate warnings at all
without also generating them every time, and warning every time is
consistent with the warnings that $[ used to generate.)
o 4
The warnings for (eb{(fR and (eB{(fR were added.  They are a deprecation
warning which should be turned off by that category.  One should not
have to turn off regular regexp warnings as well to get rid of these.
o 4
Constant(%s): Call to &{$^H{%s}} did not return a defined value

Constant overloading that returns undef(fR results in this error message.
For numeric constants, it used to say Constant(undef).  undef has been
replaced with the number itself.
o 4
The error produced when a module cannot be loaded now includes a hint that
the module may need to be installed: Can't locate hopping.pm in @INC (you
may need to install the hopping module) (@INC contains: ...)
o 4
vector argument not supported with alpha versions

This warning was not suppressible, even with no warnings(fR.  Now it is
suppressible, and has been moved from the internal category to the
printf category.
o 4
Cant do {n,m} with n > m in regex; marked by <   HERE in m/%s/(fR

This fatal error has been turned into a warning that reads:

Quantifier {n,m} with n > m can't match in regex

(W regexp) Minima should be less than or equal to maxima.  If you really want
your regexp to match something 0 times, just put {0}.
o 4
The Runaway prototype warning that occurs in bizarre cases has been
removed as being unhelpful and inconsistent.
o 4
The Not a format reference error has been removed, as the only case in
which it could be triggered was a bug.
o 4
The Unable to create sub named %s error has been removed for the same
reason.
o 4
The 'Can't use my %s in sort comparison' error has been downgraded to a
warning, 'my %s used in sort comparison' (with 'state' instead of 'my'
for state variables).  In addition, the heuristics for guessing whether
lexical $a or $b has been misused have been improved to generate fewer
false positives.  Lexical $a and $b are no longer disallowed if they are
outside the sort block.  Also, a named unary or list operator inside the
sort block no longer causes the $a or $b to be ignored [perl #86136].
Utility Changes

h2xs

o 4
h2xs no longer produces invalid code for empty defines.  [perl #20636]
Configuration and Compilation

o 4
Added useversionedarchname(fR option to Configure

When set, it includes 'api_versionstring' in 'archname'. E.g.
x86_64 linux 5.13.6 thread multi.  It is unset by default.

This feature was requested by Tim Bunce, who observed that
INSTALL_BASE(fR creates a library structure that does not
differentiate by perl version.  Instead, it places architecture
specific files in $install_base/lib/perl5/$archname.  This makes
it difficult to use a common INSTALL_BASE(fR library path with
multiple versions of perl.

By setting ( Duseversionedarchname(fR, the $archname will be
distinct for architecture and API version, allowing mixed use of
INSTALL_BASE(fR.
o 4
Add a PERL_NO_INLINE_FUNCTIONS(fR option

If PERL_NO_INLINE_FUNCTIONS(fR is defined, don't include inline.h

This permits test code to include the perl headers for definitions without
creating a link dependency on the perl library (which may not exist yet).
o 4
Configure will honour the external MAILDOMAIN(fR environment variable, if set.
o 4
installman(fR no longer ignores the silent option
o 4
Both META.yml(fR and META.json(fR files are now included in the distribution.
o 4
Configure will now correctly detect isblank()(fR when compiling with a C .1v'++.1v'compiler.
o 4
The pager detection in Configure has been improved to allow responses which
specify options after the program name, e.g. /usr/bin/less  R, if the user
accepts the default value.  This helps perldoc when handling ANSI escapes
[perl #72156].
Testing

o 4
The test suite now has a section for tests that require very large amounts
of memory.  These tests won't run by default; they can be enabled by
setting the PERL_TEST_MEMORY(fR environment variable to the number of
gibibytes of memory that may be safely used.
Platform Support

Discontinued Platforms

BeOS 4

BeOS was an operating system for personal computers developed by Be Inc,
initially for their BeBox hardware. The OS Haiku was written as an open
source replacement for/continuation of BeOS, and its perl port is current and
actively maintained.
UTS Global 4

Support code relating to UTS global has been removed.  UTS was a mainframe
version of System V created by Amdahl, subsequently sold to UTS Global.  The
port has not been touched since before Perl v5.8.0, and UTS Global is now
defunct.
VM/ESA 4

Support for VM/ESA has been removed. The port was tested on 2.3.0, which
IBM ended service on in March 2002. 2.4.0 ended service in June 2003, and
was superseded by Z/VM. The current version of Z/VM is V6.2.0, and scheduled
for end of service on 2015/04/30.
MPE/IX 4

Support for MPE/IX has been removed.
EPOC 4

Support code relating to EPOC has been removed.  EPOC was a family of
operating systems developed by Psion for mobile devices.  It was the
predecessor of Symbian.  The port was last updated in April 2002.
Rhapsody 4

Support for Rhapsody has been removed.
Platform Specific Notes

AIX
Configure now always adds ( qlanglvl=extc99(fR to the CC flags on AIX when
using xlC.  This will make it easier to compile a number of XS based modules
that assume C99 [perl #113778].

clang++
There is now a workaround for a compiler bug that prevented compiling
with clang++ since Perl v5.15.7 [perl #112786].

C .1v'++.1v'

When compiling the Perl core as C .1v'++.1v'mathom functions are now compiled as extern "C"(fR, to ensure proper
binary compatibility.  (However, binary compatibility isn't generally
guaranteed anyway in the situations where this would matter.)

Darwin
Stop hardcoding an alignment on 8 byte boundaries to fix builds using
 Dusemorebits.

Haiku
Perl should now work out of the box on Haiku R1 Alpha 4.

MidnightBSD
libc_r(fR was removed from recent versions of MidnightBSD and older versions
work better with pthread(fR. Threading is now enabled using pthread(fR which
corrects build errors with threading enabled on 0.4 CURRENT.

Solaris
In Configure, avoid running sed commands with flags not supported on Solaris.

VMS

o 4
Where possible, the case of filenames and command line arguments is now
preserved by enabling the CRTL features DECC$EFS_CASE_PRESERVE(fR and
DECC$ARGV_PARSE_STYLE(fR at start up time.  The latter only takes effect
when extended parse is enabled in the process from which Perl is run.
o 4
The character set for Extended Filename Syntax (EFS) is now enabled by default
on VMS.  Among other things, this provides better handling of dots in directory
names, multiple dots in filenames, and spaces in filenames.  To obtain the old
behavior, set the logical name DECC$EFS_CHARSET(fR to DISABLE(fR.
o 4
Fixed linking on builds configured with ( Dusemymalloc=y(fR.
o 4
Experimental support for building Perl with the HP C .1v'++.1v'by configuring with ( Dusecxx(fR.
o 4
All C header files from the top level directory of the distribution are now
installed on VMS, providing consistency with a long standing practice on other
platforms. Previously only a subset were installed, which broke non core
extension builds for extensions that depended on the missing include files.
o 4
Quotes are now removed from the command verb (but not the parameters) for
commands spawned via system(fR, backticks, or a piped open(fR.  Previously,
quotes on the verb were passed through to DCL, which would fail to recognize
the command.  Also, if the verb is actually a path to an image or command
procedure on an ODS 5 volume, quoting it now allows the path to contain spaces.
o 4
The a2p build has been fixed for the HP C .1v'++.1v'
Win32

o 4
Perl can now be built using Microsoft's Visual C .1v'++.1v'CCTYPE=MSVC110 (or MSVC110FREE if you are using the free Express edition for
Windows Desktop) in win32/Makefile.
o 4
The option to build without USE_SOCKETS_AS_HANDLES(fR has been removed.
o 4
Fixed a problem where perl could crash while cleaning up threads (including the
main thread) in threaded debugging builds on Win32 and possibly other platforms
[perl #114496].
o 4
A rare race condition that would lead to sleep taking more
time than requested, and possibly even hanging, has been fixed [perl #33096].
o 4
link(fR on Win32 now attempts to set $! to more appropriate values
based on the Win32 API error code. [perl #112272]

Perl no longer mangles the environment block, e.g. when launching a new
sub process, when the environment contains non ASCII characters. Known
problems still remain, however, when the environment contains characters
outside of the current ANSI codepage (e.g. see the item about Unicode in
%ENV in <http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>).
[perl #113536]
o 4
Building perl with some Windows compilers used to fail due to a problem
with miniperl's glob(fR operator (which uses the perlglob(fR program)
deleting the PATH environment variable [perl #113798].
o 4
A new makefile option, USE_64_BIT_INT(fR, has been added to the Windows
makefiles.  Set this to define when building a 32 bit perl if you want
it to use 64 bit integers.

Machine code size reductions, already made to the DLLs of XS modules in
Perl v5.17.2, have now been extended to the perl DLL itself.

Building with VC++ 6.0 was inadvertently broken in Perl v5.17.2 but has
now been fixed again.

WinCE
Building on WinCE is now possible once again, although more work is required
to fully restore a clean build.
Internal Changes

o 4
Synonyms for the misleadingly named av_len()(fR have been created:
av_top_index()(fR and av_tindex(fR.  All three of these return the
number of the highest index in the array, not the number of elements it
contains.
o 4
SvUPGRADE() is no longer an expression. Originally this macro (and its
underlying function, sv_upgrade()) were documented as boolean, although
in reality they always croaked on error and never returned false. In 2005
the documentation was updated to specify a void return value, but
SvUPGRADE() was left always returning 1 for backwards compatibility. This
has now been removed, and SvUPGRADE() is now a statement with no return
value.

So this is now a syntax error:
    if (!SvUPGRADE(sv)) { croak(...); }
If you have code like that, simply replace it with
    SvUPGRADE(sv);
or to avoid compiler warnings with older perls, possibly
    (void)SvUPGRADE(sv);

o 4
Perl has a new copy on write mechanism that allows any SvPOK scalar to be
upgraded to a copy on write scalar.  A reference count on the string buffer
is stored in the string buffer itself.  This feature is not enabled by
default.

It can be enabled in a perl build by running Configure with
 Accflags= DPERL_NEW_COPY_ON_WRITE, and we would encourage XS authors
to try their code with such an enabled perl, and provide feedback.
Unfortunately, there is not yet a good guide to updating XS code to cope
with COW.  Until such a document is available, consult the perl5 porters
mailing list.

It breaks a few XS modules by allowing copy on write scalars to go
through code paths that never encountered them before.
o 4
Copy on write no longer uses the SvFAKE and SvREADONLY flags.  Hence,
SvREADONLY indicates a true read only SV.

Use the SvIsCOW macro (as before) to identify a copy on write scalar.
o 4
PL_glob_index(fR is gone.
o 4
The private Perl_croak_no_modify has had its context parameter removed.  It is
now has a void prototype.  Users of the public API croak_no_modify remain
unaffected.
o 4
Copy on write (shared hash key) scalars are no longer marked read only.
SvREADONLY(fR returns false on such an SV, but SvIsCOW(fR still returns
true.
o 4
A new op type, OP_PADRANGE(fR has been introduced.  The perl peephole
optimiser will, where possible, substitute a single padrange op for a
pushmark followed by one or more pad ops, and possibly also skipping list
and nextstate ops.  In addition, the op can carry out the tasks associated
with the RHS of a my(...) = @_(fR assignment, so those ops may be optimised
away too.
o 4
Case insensitive matching inside a [bracketed] character class with a
multi character fold no longer excludes one of the possibilities in the
circumstances that it used to. [perl #89774].
o 4
PL_formfeed(fR has been removed.
o 4
The regular expression engine no longer reads one byte past the end of the
target string.  While for all internally well formed scalars this should
never have been a problem, this change facilitates clever tricks with
string buffers in CPAN modules.  [perl #73542]
o 4
Inside a BEGIN block, PL_compcv(fR now points to the currently compiling
subroutine, rather than the BEGIN block itself.
o 4
mg_length(fR has been deprecated.
o 4
sv_len(fR now always returns a byte count and sv_len_utf8(fR a character
count.  Previously, sv_len(fR and sv_len_utf8(fR were both buggy and would
sometimes returns bytes and sometimes characters.  sv_len_utf8(fR no longer
assumes that its argument is in UTF 8.  Neither of these creates UTF 8 caches
for tied or overloaded values or for non PVs any more.
o 4
sv_mortalcopy(fR now copies string buffers of shared hash key scalars when
called from XS modules [perl #79824].
o 4
The new RXf_MODIFIES_VARS(fR flag can be set by custom regular expression
engines to indicate that the execution of the regular expression may cause
variables to be modified.  This lets s///(fR know to skip certain
optimisations.  Perl's own regular expression engine sets this flag for the
special backtracking verbs that set $REGMARK and $REGERROR.
o 4
The APIs for accessing lexical pads have changed considerably.

PADLIST(fRs are now longer AV(fRs, but their own type instead.
PADLIST(fRs now contain a PAD(fR and a PADNAMELIST(fR of PADNAME(fRs,
rather than AV(fRs for the pad and the list of pad names.  PAD(fRs,
PADNAMELIST(fRs, and PADNAME(fRs are to be accessed as such through the
newly added pad API instead of the plain AV(fR and SV(fR APIs.  See
perlapi for details.
o 4
In the regex API, the numbered capture callbacks are passed an index
indicating what match variable is being accessed. There are special
index values for the $`, $&, $&(fR variables. Previously the same three
values were used to retrieve ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH}(fR
too, but these have now been assigned three separate values. See
Numbered capture callbacks in perlreapi.
o 4
PL_sawampersand(fR was previously a boolean indicating that any of
$`, $&, $&(fR had been seen; it now contains three one bit flags
indicating the presence of each of the variables individually.
o 4
The CV W(fR typemap entry now supports &{}(fR overloading and typeglobs,
just like &{...}(fR [perl #96872].
o 4
The SVf_AMAGIC(fR flag to indicate overloading is now on the stash, not the
object.  It is now set automatically whenever a method or @ISA changes, so
its meaning has changed, too.  It now means potentially overloaded.  When
the overload table is calculated, the flag is automatically turned off if
there is no overloading, so there should be no noticeable slowdown.

The staleness of the overload tables is now checked when overload methods
are invoked, rather than during bless(fR.

A magic is gone.  The changes to the handling of the SVf_AMAGIC(fR flag
eliminate the need for it.

PL_amagic_generation(fR has been removed as no longer necessary.  For XS
modules, it is now a macro alias to PL_na(fR.

The fallback overload setting is now stored in a stash entry separate from
overloadedness itself.
o 4
The character processing code has been cleaned up in places.  The changes
should be operationally invisible.
o 4
The study(fR function was made a no op in v5.16.  It was simply disabled via
a return(fR statement; the code was left in place.  Now the code supporting
what study(fR used to do has been removed.
o 4
Under threaded perls, there is no longer a separate PV allocated for every
COP to store its package name (cop >stashpv(fR).  Instead, there is an
offset (cop >stashoff(fR) into the new PL_stashpad(fR array, which
holds stash pointers.
o 4
In the pluggable regex API, the regexp_engine(fR struct has acquired a new
field op_comp(fR, which is currently just for perl's internal use, and
should be initialized to NULL by other regex plugin modules.
o 4
A new function alloccopstash(fR has been added to the API, but is considered
experimental.  See perlapi.
o 4
Perl used to implement get magic in a way that would sometimes hide bugs in
code that could call mg_get() too many times on magical values.  This hiding of
errors no longer occurs, so long standing bugs may become visible now.  If
you see magic related errors in XS code, check to make sure it, together
with the Perl API functions it uses, calls mg_get() only once on SvGMAGICAL()
values.
o 4
OP allocation for CVs now uses a slab allocator.  This simplifies
memory management for OPs allocated to a CV, so cleaning up after a
compilation error is simpler and safer [perl #111462][perl #112312].
o 4
PERL_DEBUG_READONLY_OPS(fR has been rewritten to work with the new slab
allocator, allowing it to catch more violations than before.
o 4
The old slab allocator for ops, which was only enabled for PERL_IMPLICIT_SYS(fR
and PERL_DEBUG_READONLY_OPS(fR, has been retired.
Selected Bug Fixes

o 4
Here document terminators no longer require a terminating newline character when
they occur at the end of a file.  This was already the case at the end of a
string eval [perl #65838].
o 4
( DPERL_GLOBAL_STRUCT(fR builds now free the global struct after
they've finished using it.
o 4
A trailing '/' on a path in @INC will no longer have an additional '/'
appended.
o 4
The :crlf(fR layer now works when unread data doesn't fit into its own
buffer. [perl #112244].
o 4
ungetc()(fR now handles UTF 8 encoded data. [perl #116322].
o 4
A bug in the core typemap caused any C types that map to the T_BOOL core
typemap entry to not be set, updated, or modified when the T_BOOL variable was
used in an OUTPUT: section with an exception for RETVAL. T_BOOL in an INPUT:
section was not affected. Using a T_BOOL return type for an XSUB (RETVAL)
was not affected. A side effect of fixing this bug is, if a T_BOOL is specified
in the OUTPUT: section (which previous did nothing to the SV), and a read only
SV (literal) is passed to the XSUB, croaks like Modification of a read only
value attempted will happen. [perl #115796]
o 4
On many platforms, providing a directory name as the script name caused perl
to do nothing and report success.  It should now universally report an error
and exit nonzero. [perl #61362]
o 4
sort {undef} ...(fR under fatal warnings no longer crashes.  It had
begun crashing in Perl v5.16.
o 4
Stashes blessed into each other
(bless (%Foo::, Bar; bless (%Bar::, Foo(W(C') no longer result in double
frees.  This bug started happening in Perl v5.16.
o 4
Numerous memory leaks have been fixed, mostly involving fatal warnings and
syntax errors.
o 4
Some failed regular expression matches such as (W(Aqf =~ /../g(fR were not
resetting pos(fR.  Also, match once patterns (m?...?g(fR) failed to reset
it, too, when invoked a second time [perl #23180].
o 4
Several bugs involving local WISA(fR and local WFoo::(fR causing stale
MRO caches have been fixed.
o 4
Defining a subroutine when its typeglob has been aliased no longer results
in stale method caches.  This bug was introduced in Perl v5.10.
o 4
Localising a typeglob containing a subroutine when the typeglob's package
has been deleted from its parent stash no longer produces an error.  This
bug was introduced in Perl v5.14.
o 4
Under some circumstances, local Wmethod=...(fR would fail to reset method
caches upon scope exit.
o 4
/[.foo.]/(fR is no longer an error, but produces a warning (as before) and
is treated as /[.fo]/(fR [perl #115818].
o 4
goto $tied_var(fR now calls FETCH before deciding what type of goto
(subroutine or label) this is.
o 4
Renaming packages through glob assignment
(WFoo:: = WBar::; WBar:: = WBaz::(fR) in combination with m?...?(fR and
reset(fR no longer makes threaded builds crash.
o 4
A number of bugs related to assigning a list to hash have been fixed. Many of
these involve lists with repeated keys like (1, 1, 1, 1)(fR.

o 4
The expression scalar(%h = (1, 1, 1, 1))(fR now returns 4, not 2.
o 4
The return value of %h = (1, 1, 1)(fR in list context was wrong. Previously
this would return (1, undef, 1)(fR, now it returns (1, undef)(fR.
o 4
Perl now issues the same warning on ($s, %h) = (1, {})(fR as it does for
(%h) = ({})(fR, Reference found where even sized list expected.
o 4
A number of additional edge cases in list assignment to hashes were
corrected. For more details see commit 23b7025ebc.
o 4
Attributes applied to lexical variables no longer leak memory.
[perl #114764]
o 4
dump(fR, goto(fR, last(fR, next(fR, redo(fR or require(fR followed by a
bareword (or version) and then an infix operator is no longer a syntax
error.  It used to be for those infix operators (like +(fR) that have a
different meaning where a term is expected.  [perl #105924]
o 4
require a::b . 1(fR and require a::b + 1(fR no longer produce erroneous
ambiguity warnings.  [perl #107002]
o 4
Class method calls are now allowed on any string, and not just strings
beginning with an alphanumeric character.  [perl #105922]
o 4
An empty pattern created with qr//(fR used in m///(fR no longer triggers
the empty pattern reuses last pattern behaviour.  [perl #96230]
o 4
Tying a hash during iteration no longer results in a memory leak.
o 4
Freeing a tied hash during iteration no longer results in a memory leak.
o 4
List assignment to a tied array or hash that dies on STORE no longer
results in a memory leak.
o 4
If the hint hash (%^H(fR) is tied, compile time scope entry (which copies
the hint hash) no longer leaks memory if FETCH dies.  [perl #107000]
o 4
Constant folding no longer inappropriately triggers the special
split " "(fR behaviour.  [perl #94490]
o 4
defined scalar(@array)(fR, defined do { &foo }(fR, and similar constructs
now treat the argument to defined(fR as a simple scalar.  [perl #97466]
o 4
Running a custom debugging that defines no WDB::DB glob or provides a
subroutine stub for &DB::DB no longer results in a crash, but an error
instead.  [perl #114990]
o 4
reset ""(fR now matches its documentation.  reset(fR only resets m?...?(fR
patterns when called with no argument.  An empty string for an argument now
does nothing.  (It used to be treated as no argument.)  [perl #97958]
o 4
printf(fR with an argument returning an empty list no longer reads past the
end of the stack, resulting in erratic behaviour.  [perl #77094]
o 4
(  subname(fR no longer produces erroneous ambiguity warnings.
[perl #77240]
o 4
v10(fR is now allowed as a label or package name.  This was inadvertently
broken when v strings were added in Perl v5.6.  [perl #56880]
o 4
length(fR, pos(fR, substr(fR and sprintf(fR could be confused by ties,
overloading, references and typeglobs if the stringification of such
changed the internal representation to or from UTF 8.  [perl #114410]
o 4
utf8::encode now calls FETCH and STORE on tied variables.  utf8::decode now
calls STORE (it was already calling FETCH).
o 4
$tied =~ s/$non_utf8/$utf8/(fR no longer loops infinitely if the tied
variable returns a Latin 1 string, shared hash key scalar, or reference or
typeglob that stringifies as ASCII or Latin 1.  This was a regression from
v5.12.
o 4
s///(fR without /e is now better at detecting when it needs to forego
certain optimisations, fixing some buggy cases:

o 4
Match variables in certain constructs (&&(fR, ||(fR, ..(fR and others) in
the replacement part; e.g., s/(.)/$l{$a||$1}/g(fR.  [perl #26986]
o 4
Aliases to match variables in the replacement.
o 4
$REGERROR or $REGMARK in the replacement.  [perl #49190]
o 4
An empty pattern (s//$foo/(fR) that causes the last successful pattern to
be used, when that pattern contains code blocks that modify the variables
in the replacement.
o 4
The taintedness of the replacement string no longer affects the taintedness
of the return value of s///e(fR.
o 4
The $| autoflush variable is created on the fly when needed.  If this
happened (e.g., if it was mentioned in a module or eval) when the
currently selected filehandle was a typeglob with an empty IO slot, it used
to crash.  [perl #115206]
o 4
Line numbers at the end of a string eval are no longer off by one.
[perl #114658]
o 4
@INC filters (subroutines returned by subroutines in @INC) that set $_ to a
copy on write scalar no longer cause the parser to modify that string
buffer in place.
o 4
length($object)(fR no longer returns the undefined value if the object has
string overloading that returns undef.  [perl #115260]
o 4
The use of PL_stashcache(fR, the stash name lookup cache for method calls, has
been restored,

Commit da6b625f78f5f133 in August 2011 inadvertently broke the code that looks
up values in PL_stashcache(fR. As it's only a cache, quite correctly everything
carried on working without it.
o 4
The error Can't localize through a reference had disappeared in v5.16.0
when local %$ref(fR appeared on the last line of an lvalue subroutine.
This error disappeared for (elocal %$ref(fR in perl v5.8.1.  It has now
been restored.
o 4
The parsing of here docs has been improved significantly, fixing several
parsing bugs and crashes and one memory leak, and correcting wrong
subsequent line numbers under certain conditions.
o 4
Inside an eval, the error message for an unterminated here doc no longer
has a newline in the middle of it [perl #70836].
o 4
A substitution inside a substitution pattern (s/${s|||}//(fR) no longer
confuses the parser.
o 4
It may be an odd place to allow comments, but s//"" # hello/e(fR has
always worked, unless there happens to be a null character before the
first #.  Now it works even in the presence of nulls.
o 4
An invalid range in tr///(fR or y///(fR no longer results in a memory leak.
o 4
String eval no longer treats a semicolon delimited quote like operator at
the very end (eval q;;(W(C') as a syntax error.
o 4
warn {$_ => 1} + 1(fR is no longer a syntax error.  The parser used to
get confused with certain list operators followed by an anonymous hash and
then an infix operator that shares its form with a unary operator.
o 4
(caller $n)[6](fR (which gives the text of the eval) used to return the
actual parser buffer.  Modifying it could result in crashes.  Now it always
returns a copy.  The string returned no longer has (en; tacked on to the
end.  The returned text also includes here doc bodies, which used to be
omitted.
o 4
The UTF 8 position cache is now reset when accessing magical variables, to
avoid the string buffer and the UTF 8 position cache getting out of sync
[perl #114410].
o 4
Various cases of get magic being called twice for magical UTF 8
strings have been fixed.
o 4
This code (when not in the presence of $& etc)
    $_ = x x 1_000_000;
    1 while /(.)/;
used to skip the buffer copy for performance reasons, but suffered from $1
etc changing if the original string changed.  That's now been fixed.
o 4
Perl doesn't use PerlIO anymore to report out of memory messages, as PerlIO
might attempt to allocate more memory.
o 4
In a regular expression, if something is quantified with {n,m}(fR where
n > m(fR, it can't possibly match.  Previously this was a fatal
error, but now is merely a warning (and that something won't match).
[perl #82954].
o 4
It used to be possible for formats defined in subroutines that have
subsequently been undefined and redefined to close over variables in the
wrong pad (the newly defined enclosing sub), resulting in crashes or
Bizarre copy errors.
o 4
Redefinition of XSUBs at run time could produce warnings with the wrong
line number.
o 4
The %vd sprintf format does not support version objects for alpha versions.
It used to output the format itself (%vd) when passed an alpha version, and
also emit an Invalid conversion in printf warning.  It no longer does,
but produces the empty string in the output.  It also no longer leaks
memory in this case.
o 4
$obj >SUPER::method(fR calls in the main package could fail if the
SUPER package had already been accessed by other means.
o 4
Stash aliasing (Wfoo:: = Wbar::(fR) no longer causes SUPER calls to ignore
changes to methods or @ISA or use the wrong package.
o 4
Method calls on packages whose names end in ::SUPER are no longer treated
as SUPER method calls, resulting in failure to find the method.
Furthermore, defining subroutines in such packages no longer causes them to
be found by SUPER method calls on the containing package [perl #114924].
o 4
(ew(fR now matches the code points U+200C (ZERO WIDTH NON JOINER) and U+200D
(ZERO WIDTH JOINER).  (eW(fR no longer matches these.  This change is because
Unicode corrected their definition of what (ew(fR should match.
o 4
dump LABEL(fR no longer leaks its label.
o 4
Constant folding no longer changes the behaviour of functions like stat()(fR
and truncate()(fR that can take either filenames or handles.
stat 1 ? foo : bar(fR nows treats its argument as a file name (since it is an
arbitrary expression), rather than the handle foo.
o 4
truncate FOO, $len(fR no longer falls back to treating (s 1FOO(s0 as a file name if
the filehandle has been deleted.  This was broken in Perl v5.16.0.
o 4
Subroutine redefinitions after sub to glob and glob to glob assignments no
longer cause double frees or panic messages.
o 4
s///(fR now turns vstrings into plain strings when performing a substitution,
even if the resulting string is the same (s/a/a/(fR).
o 4
Prototype mismatch warnings no longer erroneously treat constant subs as having
no prototype when they actually have "".
o 4
Constant subroutines and forward declarations no longer prevent prototype
mismatch warnings from omitting the sub name.
o 4
undef(fR on a subroutine now clears call checkers.
o 4
The ref(fR operator started leaking memory on blessed objects in Perl v5.16.0.
This has been fixed [perl #114340].
o 4
use(fR no longer tries to parse its arguments as a statement, making
use constant { () };(fR a syntax error [perl #114222].
o 4
On debugging builds, uninitialized warnings inside formats no longer cause
assertion failures.
o 4
On debugging builds, subroutines nested inside formats no longer cause
assertion failures [perl #78550].
o 4
Formats and use(fR statements are now permitted inside formats.
o 4
print $x(fR and sub { print $x } >()(fR now always produce the same output.
It was possible for the latter to refuse to close over $x if the variable was
not active; e.g., if it was defined outside a currently running named
subroutine.
o 4
Similarly, print $x(fR and print eval $x(W(C' now produce the same output.
This also allows my $x if 0 variables to be seen in the debugger [perl
#114018].
o 4
Formats called recursively no longer stomp on their own lexical variables, but
each recursive call has its own set of lexicals.
o 4
Attempting to free an active format or the handle associated with it no longer
results in a crash.
o 4
Format parsing no longer gets confused by braces, semicolons and low precedence
operators.  It used to be possible to use braces as format delimiters (instead
of =(fR and .(fR), but only sometimes.  Semicolons and low precedence operators
in format argument lines no longer confuse the parser into ignoring the line's
return value.  In format argument lines, braces can now be used for anonymous
hashes, instead of being treated always as do(fR blocks.
o 4
Formats can now be nested inside code blocks in regular expressions and other
quoted constructs (/(?{...})/(fR and qq/${...}/(fR) [perl #114040].
o 4
Formats are no longer created after compilation errors.
o 4
Under debugging builds, the  DA command line option started crashing in Perl
v5.16.0.  It has been fixed [perl #114368].
o 4
A potential deadlock scenario involving the premature termination of a pseudo 
forked child in a Windows build with ithreads enabled has been fixed.  This
resolves the common problem of the t/op/fork.t test hanging on Windows [perl
#88840].
o 4
The code which generates errors from require()(fR could potentially read one or
two bytes before the start of the filename for filenames less than three bytes
long and ending /(.p?(z/(fR.  This has now been fixed.  Note that it could
never have happened with module names given to use()(fR or require()(fR anyway.
o 4
The handling of pathnames of modules given to require()(fR has been made
thread safe on VMS.
o 4
Non blocking sockets have been fixed on VMS.
o 4
Pod can now be nested in code inside a quoted construct outside of a string
eval.  This used to work only within string evals [perl #114040].
o 4
goto (W(Aq(fR now looks for an empty label, producing the goto must have
label error message, instead of exiting the program [perl #111794].
o 4
goto "(0"(fR now dies with Can't find label instead of goto must have
label.
o 4
The C function hv_store(fR used to result in crashes when used on %^H(fR
[perl #111000].
o 4
A call checker attached to a closure prototype via cv_set_call_checker(fR
is now copied to closures cloned from it.  So cv_set_call_checker(fR now
works inside an attribute handler for a closure.
o 4
Writing to $^N used to have no effect.  Now it croaks with Modification
of a read only value by default, but that can be overridden by a custom
regular expression engine, as with $1 [perl #112184].
o 4
undef(fR on a control character glob (undef W^H(fR) no longer emits an
erroneous warning about ambiguity [perl #112456].
o 4
For efficiency's sake, many operators and built in functions return the
same scalar each time.  Lvalue subroutines and subroutines in the CORE::
namespace were allowing this implementation detail to leak through.
print &CORE::uc("a"), &CORE::uc("b")(fR used to print (s 1BB.  The same thing
would happen with an lvalue subroutine returning the return value of uc(fR.
Now the value is copied in such cases.
o 4
method {}(fR syntax with an empty block or a block returning an empty list
used to crash or use some random value left on the stack as its invocant.
Now it produces an error.
o 4
vec(fR now works with extremely large offsets (>2 GB) [perl #111730].
o 4
Changes to overload settings now take effect immediately, as do changes to
inheritance that affect overloading.  They used to take effect only after
bless(fR.

Objects that were created before a class had any overloading used to remain
non overloaded even if the class gained overloading through use overload(fR
or @ISA changes, and even after bless(fR.  This has been fixed
[perl #112708].
o 4
Classes with overloading can now inherit fallback values.
o 4
Overloading was not respecting a fallback value of 0 if there were
overloaded objects on both sides of an assignment operator like +=(fR
[perl #111856].
o 4
pos(fR now croaks with hash and array arguments, instead of producing
erroneous warnings.
o 4
while(each %h)(fR now implies while(defined($_ = each %h))(fR, like
readline(fR and readdir(fR.
o 4
Subs in the CORE:: namespace no longer crash after undef W_(fR when called
with no argument list (&CORE::time with no parentheses).
o 4
unpack(fR no longer produces the '/' must follow a numeric type in unpack
error when it is the data that are at fault [perl #60204].
o 4
join(fR and "@array" now call FETCH only once on a tied $"
[perl #8931].
o 4
Some subroutine calls generated by compiling core ops affected by a
CORE::GLOBAL(fR override had op checking performed twice.  The checking
is always idempotent for pure Perl code, but the double checking can
matter when custom call checkers are involved.
o 4
A race condition used to exist around fork that could cause a signal sent to
the parent to be handled by both parent and child. Signals are now blocked
briefly around fork to prevent this from happening [perl #82580].
o 4
The implementation of code blocks in regular expressions, such as (?{})(fR
and (??{})(fR, has been heavily reworked to eliminate a whole slew of bugs.
The main user visible changes are:

o 4
Code blocks within patterns are now parsed in the same pass as the
surrounding code; in particular it is no longer necessary to have balanced
braces: this now works:
    /(?{  $x={  })/
This means that this error message is no longer generated:
    Sequence (?{...}) not terminated or not {} balanced in regex
but a new error may be seen:
    Sequence (?{...}) not terminated with )
In addition, literal code blocks within run time patterns are only
compiled once, at perl compile time:
    for my $p (...) {
        # this FOO block of code is compiled once,
        # at the same time as the surrounding for loop
        /$p{(?{FOO;})/;
    }

o 4
Lexical variables are now sane as regards scope, recursion and closure
behavior. In particular, /A(?{B})C/(fR behaves (from a closure viewpoint)
exactly like /A/ && do { B } && /C/(fR, while  qr/A(?{B})C/(fR is like
sub {/A/ && do { B } && /C/}(fR. So this code now works how you might
expect, creating three regexes that match 0, 1, and 2:
    for my $i (0..2) {
        push @r, qr/^(??{$i})$/;
    }
    "1" =~ $r[1]; # matches

o 4
The use re eval(W(C' pragma is now only required for code blocks defined
at runtime; in particular in the following, the text of the $r pattern is
still interpolated into the new pattern and recompiled, but the individual
compiled code blocks within $r are reused rather than being recompiled,
and use re eval(W(C' isn't needed any more:
    my $r = qr/abc(?{....})def/;
    /xyz$r/;

o 4
Flow control operators no longer crash. Each code block runs in a new
dynamic scope, so next(fR etc. will not see
any enclosing loops. return(fR returns a value
from the code block, not from any enclosing subroutine.
o 4
Perl normally caches the compilation of run time patterns, and doesn't
recompile if the pattern hasn't changed, but this is now disabled if
required for the correct behavior of closures. For example:
    my $code = (??{$x});
    for my $x (1..3) {
        # recompile to see fresh value of $x each time
        $x =~ /$code/;
    }

o 4
The /msix(fR and (?msix)(fR etc. flags are now propagated into the return
value from (??{})(fR; this now works:
    "AB" =~ /a(??{b})/i;

o 4
Warnings and errors will appear to come from the surrounding code (or for
run time code blocks, from an eval) rather than from an re_eval(fR:
    use re eval; $c = (?{ warn "foo" }); /$c/;
    /(?{ warn "foo" })/;
formerly gave:
    foo at (re_eval 1) line 1.
    foo at (re_eval 2) line 1.
and now gives:
    foo at (eval 1) line 1.
    foo at /some/prog line 2.
o 4
Perl now can be recompiled to use any Unicode version.  In v5.16, it
worked on Unicodes 6.0 and 6.1, but there were various bugs if earlier
releases were used; the older the release the more problems.
o 4
vec(fR no longer produces uninitialized warnings in lvalue context
[perl #9423].
o 4
An optimization involving fixed strings in regular expressions could cause
a severe performance penalty in edge cases.  This has been fixed
[perl #76546].
o 4
In certain cases, including empty subpatterns within a regular expression (such
as (?:)(fR or (?:|)(fR) could disable some optimizations. This has been fixed.
o 4
The Can't find an opnumber message that prototype(fR produces when passed
a string like CORE::nonexistent_keyword now passes UTF 8 and embedded
NULs through unchanged [perl #97478].
o 4
prototype(fR now treats magical variables like $1 the same way as
non magical variables when checking for the CORE:: prefix, instead of
treating them as subroutine names.
o 4
Under threaded perls, a runtime code block in a regular expression could
corrupt the package name stored in the op tree, resulting in bad reads
in caller(fR, and possibly crashes [perl #113060].
o 4
Referencing a closure prototype ((e&{$_[1]}(fR in an attribute handler for a
closure) no longer results in a copy of the subroutine (or assertion
failures on debugging builds).
o 4
eval __PACKAGE__(W(C' now returns the right answer on threaded builds if
the current package has been assigned over (as in
WThisPackage:: = WThatPackage::(fR) [perl #78742].
o 4
If a package is deleted by code that it calls, it is possible for caller(fR
to see a stack frame belonging to that deleted package.  caller(fR could
crash if the stash's memory address was reused for a scalar and a
substitution was performed on the same scalar [perl #113486].
o 4
UNIVERSAL::can(fR no longer treats its first argument differently
depending on whether it is a string or number internally.
o 4
open(fR with <&(fR for the mode checks to see whether the third argument is
a number, in determining whether to treat it as a file descriptor or a handle
name.  Magical variables like $1 were always failing the numeric check and
being treated as handle names.
o 4
warn(fR's handling of magical variables ($1, ties) has undergone several
fixes.  FETCH(fR is only called once now on a tied argument or a tied $@
[perl #97480].  Tied variables returning objects that stringify as "" are
no longer ignored.  A tied $@ that happened to return a reference the
previous time it was used is no longer ignored.
o 4
warn ""(fR now treats $@ with a number in it the same way, regardless of
whether it happened via $@=3(fR or $@="3"(fR.  It used to ignore the
former.  Now it appends (et...caught, as it has always done with
$@="3"(fR.
o 4
Numeric operators on magical variables (e.g., $1 + 1(fR) used to use
floating point operations even where integer operations were more appropriate,
resulting in loss of accuracy on 64 bit platforms [perl #109542].
o 4
Unary negation no longer treats a string as a number if the string happened
to be used as a number at some point.  So, if $x contains the string dogs,
( $x(fR returns ( dogs even if $y=0+$x(fR has happened at some point.
o 4
In Perl v5.14, ( ( 10(W(C' was fixed to return 10, not +10.  But magical
variables ($1, ties) were not fixed till now [perl #57706].
o 4
Unary negation now treats strings consistently, regardless of the internal
UTF8(fR flag.
o 4
A regression introduced in Perl v5.16.0 involving
tr/SEARCHLIST/REPLACEMENTLIST/(fR has been fixed.  Only the first
instance is supposed to be meaningful if a character appears more than
once in (f(CISEARCHLIST(fR.  Under some circumstances, the final instance
was overriding all earlier ones.  [perl #113584]
o 4
Regular expressions like qr/(87/(fR previously silently inserted a NUL
character, thus matching as if it had been written qr/(00087/(fR.  Now it
matches as if it had been written as qr/87/(fR, with a message that the
sequence "(8" is unrecognized.
o 4
__SUB__(fR now works in special blocks (BEGIN(fR, END(fR, etc.).
o 4
Thread creation on Windows could theoretically result in a crash if done
inside a BEGIN(fR block.  It still does not work properly, but it no longer
crashes [perl #111610].
o 4
(e&{(W(Aq}(fR (with the empty string) now autovivifies a stub like any other
sub name, and no longer produces the Unable to create sub error
[perl #94476].
o 4
A regression introduced in v5.14.0 has been fixed, in which some calls
to the re(fR module would clobber $_ [perl #113750].
o 4
do FILE(fR now always either sets or clears $@, even when the file can't be
read. This ensures that testing $@ first (as recommended by the
documentation) always returns the correct result.
o 4
The array iterator used for the each @array(fR construct is now correctly
reset when @array is cleared [perl #75596]. This happens, for example, when
the array is globally assigned to, as in @array = (...)(fR, but not when its
values are assigned to. In terms of the XS API, it means that av_clear()(fR
will now reset the iterator.

This mirrors the behaviour of the hash iterator when the hash is cleared.
o 4
$class >can(fR, $class >isa(fR, and $class >DOES(fR now return
correct results, regardless of whether that package referred to by $class
exists [perl #47113].
o 4
Arriving signals no longer clear $@ [perl #45173].
o 4
Allow my ()(fR declarations with an empty variable list [perl #113554].
o 4
During parsing, subs declared after errors no longer leave stubs
[perl #113712].
o 4
Closures containing no string evals no longer hang on to their containing
subroutines, allowing variables closed over by outer subroutines to be
freed when the outer sub is freed, even if the inner sub still exists
[perl #89544].
o 4
Duplication of in memory filehandles by opening with a <&= or >&= mode
stopped working properly in v5.16.0.  It was causing the new handle to
reference a different scalar variable.  This has been fixed [perl #113764].
o 4
qr//(fR expressions no longer crash with custom regular expression engines
that do not set offs(fR at regular expression compilation time
[perl #112962].
o 4
delete local(fR no longer crashes with certain magical arrays and hashes
[perl #112966].
o 4
local(fR on elements of certain magical arrays and hashes used not to
arrange to have the element deleted on scope exit, even if the element did
not exist before local(fR.
o 4
scalar(write)(fR no longer returns multiple items [perl #73690].
o 4
String to floating point conversions no longer misparse certain strings under
use locale(fR [perl #109318].
o 4
@INC filters that die no longer leak memory [perl #92252].
o 4
The implementations of overloaded operations are now called in the correct
context. This allows, among other things, being able to properly override
<>(fR [perl #47119].
o 4
Specifying only the fallback(fR key when calling use overload(fR now behaves
properly [perl #113010].
o 4
sub foo { my $a = 0; while ($a) { ... } }(fR and
sub foo { while (0) { ... } }(fR now return the same thing [perl #73618].
o 4
String negation now behaves the same under use integer;(fR as it does
without [perl #113012].
o 4
chr(fR now returns the Unicode replacement character (U+FFFD) for  1,
regardless of the internal representation.   1 used to wrap if the argument
was tied or a string internally.
o 4
Using a format(fR after its enclosing sub was freed could crash as of
perl v5.12.0, if the format referenced lexical variables from the outer sub.
o 4
Using a format(fR after its enclosing sub was undefined could crash as of
perl v5.10.0, if the format referenced lexical variables from the outer sub.
o 4
Using a format(fR defined inside a closure, which format references
lexical variables from outside, never really worked unless the write(fR
call was directly inside the closure.  In v5.10.0 it even started crashing.
Now the copy of that closure nearest the top of the call stack is used to
find those variables.
o 4
Formats that close over variables in special blocks no longer crash if a
stub exists with the same name as the special block before the special
block is compiled.
o 4
The parser no longer gets confused, treating eval foo ()(fR as a syntax
error if preceded by print;(fR [perl #16249].
o 4
The return value of syscall(fR is no longer truncated on 64 bit platforms
[perl #113980].
o 4
Constant folding no longer causes print 1 ? FOO : BAR(fR to print to the
FOO handle [perl #78064].
o 4
do subname(fR now calls the named subroutine and uses the file name it
returns, instead of opening a file named subname.
o 4
Subroutines looked up by rv2cv check hooks (registered by XS modules) are
now taken into consideration when determining whether foo bar(fR should be
the sub call foo(bar)(fR or the method call "bar" >foo(fR.
o 4
CORE::foo::bar(fR is no longer treated specially, allowing global overrides
to be called directly via CORE::GLOBAL::uc(...)(fR [perl #113016].
o 4
Calling an undefined sub whose typeglob has been undefined now produces the
customary Undefined subroutine called error, instead of Not a CODE
reference.
o 4
Two bugs involving @ISA have been fixed.  WISA = Wglob_without_array(fR and
undef WISA; @{WISA}(fR would prevent future modifications to @ISA from
updating the internal caches used to look up methods.  The
Wglob_without_array case was a regression from Perl v5.12.
o 4
Regular expression optimisations sometimes caused $(fR with /m(fR to
produce failed or incorrect matches [perl #114068].
o 4
__SUB__(fR now works in a sort(fR block when the enclosing subroutine is
predeclared with sub foo;(fR syntax [perl #113710].
o 4
Unicode properties only apply to Unicode code points, which leads to
some subtleties when regular expressions are matched against
above Unicode code points.  There is a warning generated to draw your
attention to this.  However, this warning was being generated
inappropriately in some cases, such as when a program was being parsed.
Non Unicode matches such as (ew(fR and [:word:](fR should not generate the
warning, as their definitions don't limit them to apply to only Unicode
code points.  Now the message is only generated when matching against
(ep{}(fR and (eP{}(fR.  There remains a bug, [perl #114148], for the very
few properties in Unicode that match just a single code point.  The
warning is not generated if they are matched against an above Unicode
code point.
o 4
Uninitialized warnings mentioning hash elements would only mention the
element name if it was not in the first bucket of the hash, due to an
off by one error.
o 4
A regular expression optimizer bug could cause multiline ^ to behave
incorrectly in the presence of line breaks, such that
"/(n(n" =~ m#(A(?:^/$)#im(fR would not match [perl #115242].
o 4
Failed fork(fR in list context no longer corrupts the stack.
@a = (1, 2, fork, 3)(fR used to gobble up the 2 and assign (1, undef, 3)(fR
if the fork(fR call failed.
o 4
Numerous memory leaks have been fixed, mostly involving tied variables that
die, regular expression character classes and code blocks, and syntax
errors.
o 4
Assigning a regular expression (${qr//}(fR) to a variable that happens to
hold a floating point number no longer causes assertion failures on
debugging builds.
o 4
Assigning a regular expression to a scalar containing a number no longer
causes subsequent numification to produce random numbers.
o 4
Assigning a regular expression to a magic variable no longer wipes away the
magic.  This was a regression from v5.10.
o 4
Assigning a regular expression to a blessed scalar no longer results in
crashes.  This was also a regression from v5.10.
o 4
Regular expression can now be assigned to tied hash and array elements with
flattening into strings.
o 4
Numifying a regular expression no longer results in an uninitialized
warning.
o 4
Negative array indices no longer cause EXISTS methods of tied variables to
be ignored.  This was a regression from v5.12.
o 4
Negative array indices no longer result in crashes on arrays tied to
non objects.
o 4
$byte_overload .= $utf8(fR no longer results in doubly encoded UTF 8 if the
left hand scalar happened to have produced a UTF 8 string the last time
overloading was invoked.
o 4
goto &sub(fR now uses the current value of @_, instead of using the array
the subroutine was originally called with.  This means
local @_ = (...); goto &sub(fR now works [perl #43077].
o 4
If a debugger is invoked recursively, it no longer stomps on its own
lexical variables.  Formerly under recursion all calls would share the same
set of lexical variables [perl #115742].
o 4
W_{ARRAY} returned from a subroutine no longer spontaneously
becomes empty.
o 4
When using say(fR to print to a tied filehandle, the value of $((fR is
correctly localized, even if it was previously undef.  [perl #119927]
Known Problems

o 4
UTF8 flagged strings in %ENV on HP UX 11.00 are buggy

The interaction of UTF8 flagged strings and %ENV on HP UX 11.00 is
currently dodgy in some not yet fully diagnosed way.  Expect test
failures in t/op/magic.t, followed by unknown behavior when storing
wide characters in the environment.
Obituary

Hojung Yoon (AMORETTE), 24, of Seoul, South Korea, went to his long rest
on May 8, 2013 with llama figurine and autographed TIMTOADY card.  He
was a brilliant young Perl 5 & 6 hacker and a devoted member of
Seoul.pm.  He programmed Perl, talked Perl, ate Perl, and loved Perl.  We
believe that he is still programming in Perl with his broken IBM laptop
somewhere.  He will be missed.
Acknowledgements

Perl v5.18.0 represents approximately 12 months of development since
Perl v5.16.0 and contains approximately 400,000 lines of changes across
2,100 files from 113 authors.

Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers. The following people are known to
have contributed the improvements that became Perl v5.18.0:

Aaron Crane, Aaron Trevena, Abhijit Menon Sen, Adrian M. Enache, Alan
Haggai Alavi, Alexandr Ciornii, Andrew Tam, Andy Dougherty, Anton Nikishaev,
Aristotle Pagaltzis, Augustina Blair, Bob Ernst, Brad Gilbert, Breno G. de
Oliveira, Brian Carlson, Brian Fraser, Charlie Gonzalez, Chip Salzenberg, Chris
'BinGOs' Williams, Christian Hansen, Colin Kuskie, Craig A. Berry, Dagfinn
Ilmari Mannsa(k: ((n(.wu+u )/2u' .3n'(z°.3n'|(n:u'David Golden, David Leadbeater, David Mitchell, David Nicol, Dominic
Hargreaves, E. Choroba, Eric Brine, Evan Miller, Father Chrysostomos, Florian
Ragwitz, Francois Perrad, George Greer, Goro Fuji, H.Merijn Brand, Herbert
Breunung, Hugo van der Sanden, Igor Zaytsev, James E Keenan, Jan Dubois,
Jasmine Ahuja, Jerry D. Hedden, Jess Robinson, Jesse Luehrs, Joaquin Ferrero,
Joel Berger, John Goodyear, John Peacock, Karen Etheridge, Karl Williamson,
Karthik Rajagopalan, Kent Fredric, Leon Timmermans, Lucas Holt, Lukas Mai,
Marcus Holland Moritz, Markus Jansen, Martin Hasch, Matthew Horsfall, Max
Maischein, Michael G Schwern, Michael Schroeder, Moritz Lenz, Nicholas Clark,
Niko Tyni, Oleg Nesterov, Patrik Ha(k: ((n(.wuW8/10 +.1m+)' 'z..2m+'.|(n:u'Marquess, Peter Martini, Rafael Garcia Suarez, Reini Urban, Renee Baecker,
Rhesa Rozendaal, Ricardo Signes, Robin Barker, Ronald J. Kimball, Ruslan
Zakirov, Salvador Fandino, Sawyer X, Scott Lanning, Sergey Alekseev, Shawn M
Moore, Shirakata Kentaro, Shlomi Fish, Sisyphus, Smylers, Steffen Mu(k: ((n(.wuW8/10 +.1m+)' 'z..2m+'.|(n:u'Steve Hay, Steve Peters, Steven Schubiger, Sullivan Beck, Sven Strickroth,
Sebastien Aperghis Tramoni, Thomas Sibley, Tobias Leich, Tom Wyant, Tony Cook,
Vadim Konovalov, Vincent Pit, Volker Schatz, Walt Mankowski, Yves Orton,
Zefram.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the AUTHORS file in the Perl source distribution.
Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of perl  V(fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5 security report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.
SEE ALSO

The Changes file for an explanation of how to view exhaustive details on
what changed.

The INSTALL file for how to build Perl.

The README file for general stuff.

The Artistic and Copying files for copyright information.

