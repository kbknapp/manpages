
{
NAME
c++filt   Demangle C++ and Java symbols.
SYNOPSIS

c++filt [ _|  strip underscore]
        [ n|  no strip underscore]
        [ p|  no params]
        [ t|  types]
        [ i|  no verbose]
        [ s format|  format=format]
        [  help]  [  version]  [symbol...]
DESCRIPTION

The C .1v'++.1v'that you can write many functions with the same name, providing that
each function takes parameters of different types.  In order to be
able to distinguish these similarly named functions C .1v'++.1v'encode them into a low level assembler name which uniquely identifies
each different version.  This process is known as mangling. The
c++filt
[1]
program does the inverse mapping: it decodes (demangles) low level
names into user level names so that they can be read.

Every alphanumeric word (consisting of letters, digits, underscores,
dollars, or periods) seen in the input is a potential mangled name.
If the name decodes into a C .1v'++.1v'low level name in the output, otherwise the original word is output.
In this way you can pass an entire assembler source file, containing
mangled names, through c++filt and see the same source file
containing demangled names.

You can also use c++filt to decipher individual symbols by
passing them on the command line:
        c++filt <symbol>
If no symbol arguments are given, c++filt reads symbol
names from the standard input instead.  All the results are printed on
the standard output.  The difference between reading names from the
command line versus reading names from the standard input is that
command line arguments are expected to be just mangled names and no
checking is performed to separate them from surrounding text.  Thus
for example:
        c++filt  n _Z1fv
will work and demangle the name to f() whereas:
        c++filt  n _Z1fv,
will not work.  (Note the extra comma at the end of the mangled
name which makes it invalid).  This command however will work:
        echo _Z1fv, | c++filt  n
and will display f(),, i.e., the demangled name followed by a
trailing comma.  This behaviour is because when the names are read
from the standard input it is expected that they might be part of an
assembler source file where there might be extra, extraneous
characters trailing after a mangled name.  For example:
            .type   _Z1fv, @function

OPTIONS

 _ 4
  strip underscore 4
On some systems, both the C and C .1v'++.1v'of every name.  For example, the C name foo(fR gets the low level
name _foo(fR.  This option removes the initial underscore.  Whether
c++filt removes the underscore by default is target dependent.
 n 4
  no strip underscore 4
Do not remove the initial underscore.
 p 4
  no params 4
When demangling the name of a function, do not display the types of
the function's parameters.
 t 4
  types 4
Attempt to demangle types as well as function names.  This is disabled
by default since mangled types are normally only used internally in
the compiler, and they can be confused with non mangled names.  For example,
a function called a treated as a mangled type name would be
demangled to signed char.
 i 4
  no verbose 4
Do not include implementation details (if any) in the demangled
output.
 s format 4
  format=format 4
c++filt can decode various methods of mangling, used by
different compilers.  The argument to this option selects which
method it uses:
Automatic selection based on executable (the default method)
the one used by the GNU C .1v'++.1v'
the one used by the Lucid compiler (lcc)
the one specified by the C .1v'++.1v'
the one used by the HP compiler (aCC)
the one used by the EDG compiler
the one used by the GNU C .1v'++.1v'
the one used by the GNU Java compiler (gcj)
the one used by the GNU Ada compiler (GNAT).
  help 4

Print a summary of the options to c++filt and exit.
  version 4

Print the version number of c++filt and exit.
@file 4

Read command line options from file.  The options read are
inserted in place of the original @file option.  If file
does not exist, or cannot be read, then the option will be treated
literally, and not removed.

Options in file are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The file may itself contain additional
@file options; any such options will be processed recursively.
FOOTNOTES

1. 4
MS DOS does not allow +(fR characters in file names, so on
MS DOS this program is named CXXFILT.
SEE ALSO

the Info entries for binutils.
COPYRIGHT

Copyright (c) 1991 2018 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front Cover Texts, and with no
Back Cover Texts.  A copy of the license is included in the
section entitled (s 1GNU Free Documentation License.

