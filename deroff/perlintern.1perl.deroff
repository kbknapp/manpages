
{
NAME
perlintern   autogenerated documentation of purely internal
		 Perl functions
DESCRIPTION
This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl API.  In other words,
they are not for use in extensions!
Compile time scope hooks

BhkENTRY 8
NOTE: this function is experimental and may change or be
removed without notice.

Return an entry from the BHK structure.  which(fR is a preprocessor token
indicating which entry to return.  If the appropriate flag is not set
this will return NULL(fR.  The type of the return value depends on which
entry you ask for.
        void W  BhkENTRY(BHK Whk, which)

BhkFLAGS 8
NOTE: this function is experimental and may change or be
removed without notice.

Return the BHK's flags.
        U32     BhkFLAGS(BHK Whk)

CALL_BLOCK_HOOKS 8
NOTE: this function is experimental and may change or be
removed without notice.

Call all the registered block hooks for type which(fR.  which(fR is a
preprocessing token; the type of arg(fR depends on which(fR.
        void    CALL_BLOCK_HOOKS(which, arg)

Custom Operators

core_prototype 8
This function assigns the prototype of the named core function to sv(fR, or
to a new mortal SV if sv(fR is NULL(fR.  It returns the modified sv(fR, or
NULL(fR if the core function has no prototype.  code(fR is a code as returned
by keyword()(fR.  It must not be equal to 0.
        SV W    core_prototype(SV Wsv, const char Wname,
                               const int code,
                               int W const opnum)

CV Manipulation Functions

docatch 8
Check for the cases 0 or 3 of cur_env.je_ret, only used inside an eval context.

0 is used as continue inside eval,

3 is used for a die caught by an inner eval   continue inner loop

See cop.h: je_mustcatch, when set at any runlevel to TRUE, means eval ops must
establish a local jmpenv to handle exception traps.
        OPW     docatch(Perl_ppaddr_t firstpp)

CV reference counts and CvOUTSIDE

CvWEAKOUTSIDE 8
Each CV has a pointer, CvOUTSIDE()(fR, to its lexically enclosing
CV (if any).  Because pointers to anonymous sub prototypes are
stored in &(fR pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice versa.  To avoid the
ensuing memory leak, we do not increment the reference count of the CV
pointed to by CvOUTSIDE(fR in the one specific instance that the parent
has a &(fR pad slot pointing back to us.  In this case, we set the
CvWEAKOUTSIDE(fR flag in the child.  This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.

There is a further complication with non closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub).  In this case, the
anonymous prototype is shared rather than being cloned.  This has the
consequence that the parent may be freed while there are still active
children, e.g.,
    BEGIN { $a = sub { eval $x } }
In this case, the BEGIN is freed immediately after execution since there
are no active references to it: the anon sub prototype has
CvWEAKOUTSIDE(fR set since it's not a closure, and $a points to the same
CV, so it doesn't contribute to BEGIN's refcount either.  When $a is
executed, the eval $x(W(C' causes the chain of CvOUTSIDE(fRs to be followed,
and the freed BEGIN is accessed.

To avoid this, whenever a CV and its associated pad is freed, any
&(fR entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed to anon sub is still positive, then that
child's CvOUTSIDE(fR is set to point to its grandparent.  This will only
occur in the single specific case of a non closure anon prototype
having one or more active references (such as $a above).

One other thing to consider is that a CV may be merely undefined
rather than freed, eg undef &foo(fR.  In this case, its refcount may
not have reached zero, but we still delete its pad and its CvROOT(fR etc.
Since various children may still have their CvOUTSIDE(fR pointing at this
undefined CV, we keep its own CvOUTSIDE(fR for the time being, so that
the chain of lexical scopes is unbroken.  For example, the following
should print 123:
    my $x = 123;
    sub tmp { sub { eval $x } }
    my $a = tmp();
    undef &tmp;
    print  $a >();

        bool    CvWEAKOUTSIDE(CV Wcv)

Embedding Functions

cv_dump 8
dump the contents of a CV
        void    cv_dump(CV Wcv, const char Wtitle)

cv_forget_slab 8
When a CV has a reference count on its slab (CvSLABBED(fR), it is responsible
for making sure it is freed.  (Hence, no two CVs should ever have a
reference count on the same slab.)  The CV only needs to reference the slab
during compilation.  Once it is compiled and CvROOT(fR attached, it has
finished its job, so it can forget the slab.
        void    cv_forget_slab(CV Wcv)

do_dump_pad 8
Dump the contents of a padlist
        void    do_dump_pad(I32 level, PerlIO Wfile,
                            PADLIST Wpadlist, int full)

pad_alloc_name 8
Allocates a place in the currently compiling
pad (via pad_alloc in perlapi) and
then stores a name for that entry.  name(fR is adopted and
becomes the name entry; it must already contain the name
string.  typestash(fR and ourstash(fR and the padadd_STATE(fR
flag get added to name(fR.  None of the other
processing of pad_add_name_pvn in perlapi
is done.  Returns the offset of the allocated pad slot.
        PADOFFSET pad_alloc_name(PADNAME Wname, U32 flags,
                                 HV Wtypestash, HV Wourstash)

pad_block_start 8
Update the pad compilation state variables on entry to a new block.
        void    pad_block_start(int full)

pad_check_dup 8
Check for duplicate declarations: report any of:
     W a my in the current scope with the same name;
     W an our (anywhere in the pad) with the same name and the
       same stash as ourstash
is_our(fR indicates that the name to check is an "our" declaration.
        void    pad_check_dup(PADNAME Wname, U32 flags,
                              const HV Wourstash)

pad_findlex 8
Find a named lexical anywhere in a chain of nested pads.  Add fake entries
in the inner pads if it's found in an outer one.

Returns the offset in the bottom pad of the lex or the fake lex.
cv(fR is the CV in which to start the search, and seq is the current cop_seq(fR
to match against.  If warn(fR is true, print appropriate warnings.  The out_(fRW
vars return values, and so are pointers to where the returned values
should be stored.  out_capture(fR, if non null, requests that the innermost
instance of the lexical is captured; out_name(fR is set to the innermost
matched pad name or fake pad name; out_flags(fR returns the flags normally
associated with the PARENT_FAKELEX_FLAGS(fR field of a fake pad name.

Note that pad_findlex()(fR is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries
as it goes.  It has to be this way
because fake names in anon protoypes have to store in xpadn_low(fR the
index into the parent pad.
        PADOFFSET pad_findlex(const char Wnamepv,
                              STRLEN namelen, U32 flags,
                              const CVW cv, U32 seq, int warn,
                              SVWW out_capture,
                              PADNAMEWW out_name,
                              int Wout_flags)

pad_fixup_inner_anons 8
For any anon CVs in the pad, change CvOUTSIDE(fR of that CV from
old_cv(fR to new_cv(fR if necessary.  Needed when a newly compiled CV has to be
moved to a pre existing CV struct.
        void    pad_fixup_inner_anons(PADLIST Wpadlist,
                                      CV Wold_cv, CV Wnew_cv)

pad_free 8
Free the SV at offset po in the current pad.
        void    pad_free(PADOFFSET po)

pad_leavemy 8
Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.
        void    pad_leavemy()

padlist_dup 8
Duplicates a pad.
        PADLIST W padlist_dup(PADLIST Wsrcpad,
                              CLONE_PARAMS Wparam)

padname_dup 8
Duplicates a pad name.
        PADNAME W padname_dup(PADNAME Wsrc, CLONE_PARAMS Wparam)

padnamelist_dup 8
Duplicates a pad name list.
        PADNAMELIST W padnamelist_dup(PADNAMELIST Wsrcpad,
                                      CLONE_PARAMS Wparam)

pad_push 8
Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an @_ in slot zero.
        void    pad_push(PADLIST Wpadlist, int depth)

pad_reset 8
Mark all the current temporaries for reuse
        void    pad_reset()

pad_swipe 8
Abandon the tmp in the current pad at offset po(fR and replace with a
new one.
        void    pad_swipe(PADOFFSET po, bool refadjust)

GV Functions

gv_try_downgrade 8
NOTE: this function is experimental and may change or be
removed without notice.

If the typeglob gv(fR can be expressed more succinctly, by having
something other than a real GV in its place in the stash, replace it
with the optimised form.  Basic requirements for this are that gv(fR
is a real typeglob, is sufficiently ordinary, and is only referenced
from its package.  This function is meant to be used when a GV has been
looked up in part to see what was there, causing upgrading, but based
on what was found it turns out that the real GV isn't required after all.

If gv(fR is a completely empty typeglob, it is deleted from the stash.

If gv(fR is a typeglob containing only a sufficiently ordinary constant
sub, the typeglob is replaced with a scalar reference placeholder that
more compactly represents the same thing.
        void    gv_try_downgrade(GVW gv)

Hash Manipulation Functions

hv_ename_add 8
Adds a name to a stash's internal list of effective names.  See
"hv_ename_delete".

This is called when a stash is assigned to a new location in the symbol
table.
        void    hv_ename_add(HV Whv, const char Wname, U32 len,
                             U32 flags)

hv_ename_delete 8
Removes a name from a stash's internal list of effective names.  If this is
the name returned by HvENAME(fR, then another name in the list will take
its place (HvENAME(fR will use it).

This is called when a stash is deleted from the symbol table.
        void    hv_ename_delete(HV Whv, const char Wname,
                                U32 len, U32 flags)

refcounted_he_chain_2hv 8
Generates and returns a HV W(fR representing the content of a
refcounted_he(fR chain.
flags(fR is currently unused and must be zero.
        HV W    refcounted_he_chain_2hv(
                    const struct refcounted_he Wc, U32 flags
                )

refcounted_he_fetch_pv 8
Like refcounted_he_fetch_pvn, but takes a nul terminated string
instead of a string/length pair.
        SV W    refcounted_he_fetch_pv(
                    const struct refcounted_he Wchain,
                    const char Wkey, U32 hash, U32 flags
                )

refcounted_he_fetch_pvn 8
Search along a refcounted_he(fR chain for an entry with the key specified
by keypv(fR and keylen(fR.  If flags(fR has the REFCOUNTED_HE_KEY_UTF8(fR
bit set, the key octets are interpreted as UTF 8, otherwise they
are interpreted as Latin 1.  hash(fR is a precomputed hash of the key
string, or zero if it has not been precomputed.  Returns a mortal scalar
representing the value associated with the key, or &PL_sv_placeholder
if there is no value associated with the key.
        SV W    refcounted_he_fetch_pvn(
                    const struct refcounted_he Wchain,
                    const char Wkeypv, STRLEN keylen, U32 hash,
                    U32 flags
                )

refcounted_he_fetch_pvs 8
Like refcounted_he_fetch_pvn, but takes a literal string
instead of a string/length pair, and no precomputed hash.
        SV W    refcounted_he_fetch_pvs(
                    const struct refcounted_he Wchain,
                    "literal string" key, U32 flags
                )

refcounted_he_fetch_sv 8
Like refcounted_he_fetch_pvn, but takes a Perl scalar instead of a
string/length pair.
        SV W    refcounted_he_fetch_sv(
                    const struct refcounted_he Wchain, SV Wkey,
                    U32 hash, U32 flags
                )

refcounted_he_free 8
Decrements the reference count of a refcounted_he(fR by one.  If the
reference count reaches zero the structure's memory is freed, which
(recursively) causes a reduction of its parent refcounted_he(fR's
reference count.  It is safe to pass a null pointer to this function:
no action occurs in this case.
        void    refcounted_he_free(struct refcounted_he Whe)

refcounted_he_inc 8
Increment the reference count of a refcounted_he(fR.  The pointer to the
refcounted_he(fR is also returned.  It is safe to pass a null pointer
to this function: no action occurs and a null pointer is returned.
        struct refcounted_he W refcounted_he_inc(
                                   struct refcounted_he Whe
                               )

refcounted_he_new_pv 8
Like refcounted_he_new_pvn, but takes a nul terminated string instead
of a string/length pair.
        struct refcounted_he W refcounted_he_new_pv(
                                   struct refcounted_he Wparent,
                                   const char Wkey, U32 hash,
                                   SV Wvalue, U32 flags
                               )

refcounted_he_new_pvn 8
Creates a new refcounted_he(fR.  This consists of a single key/value
pair and a reference to an existing refcounted_he(fR chain (which may
be empty), and thus forms a longer chain.  When using the longer chain,
the new key/value pair takes precedence over any entry for the same key
further along the chain.

The new key is specified by keypv(fR and keylen(fR.  If flags(fR has
the REFCOUNTED_HE_KEY_UTF8(fR bit set, the key octets are interpreted
as UTF 8, otherwise they are interpreted as Latin 1.  hash(fR is
a precomputed hash of the key string, or zero if it has not been
precomputed.

value(fR is the scalar value to store for this key.  value(fR is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the refcounted_he(fR.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.
value(fR may be either null or &PL_sv_placeholder to indicate that no
value is to be associated with the key; this, as with any non null value,
takes precedence over the existence of a value for the key further along
the chain.

parent(fR points to the rest of the refcounted_he(fR chain to be
attached to the new refcounted_he(fR.  This function takes ownership
of one reference to parent(fR, and returns one reference to the new
refcounted_he(fR.
        struct refcounted_he W refcounted_he_new_pvn(
                                   struct refcounted_he Wparent,
                                   const char Wkeypv,
                                   STRLEN keylen, U32 hash,
                                   SV Wvalue, U32 flags
                               )

refcounted_he_new_pvs 8
Like refcounted_he_new_pvn, but takes a literal string
instead of a string/length pair, and no precomputed hash.
        struct refcounted_he W refcounted_he_new_pvs(
                                   struct refcounted_he Wparent,
                                   "literal string" key,
                                   SV Wvalue, U32 flags
                               )

refcounted_he_new_sv 8
Like refcounted_he_new_pvn, but takes a Perl scalar instead of a
string/length pair.
        struct refcounted_he W refcounted_he_new_sv(
                                   struct refcounted_he Wparent,
                                   SV Wkey, U32 hash, SV Wvalue,
                                   U32 flags
                               )

IO Functions

start_glob 8
NOTE: this function is experimental and may change or be
removed without notice.

Function called by do_readline(fR to spawn a glob (or do the glob inside
perl on VMS).  This code used to be inline, but now perl uses File::Glob(fR
this glob starter is only used by miniperl during the build process,
or when PERL_EXTERNAL_GLOB is defined.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.
        PerlIOW start_glob(SV Wtmpglob, IO Wio)

Lexer interface

validate_proto 8
NOTE: this function is experimental and may change or be
removed without notice.

This function performs syntax checking on a prototype, proto(fR.
If warn(fR is true, any illegal characters or mismatched brackets
will trigger illegalproto warnings, declaring that they were
detected in the prototype for name(fR.

The return value is true(fR if this is a valid prototype, and
false(fR if it is not, regardless of whether warn(fR was true(fR or
false(fR.

Note that NULL(fR is a valid proto(fR and will always return true(fR.

NOTE: the perl_ form of this function is deprecated.
        bool    validate_proto(SV Wname, SV Wproto, bool warn,
                               bool curstash)

Magical Functions

magic_clearhint 8
Triggered by a delete from %^H(fR, records the key to
PL_compiling.cop_hints_hash(fR.
        int     magic_clearhint(SVW sv, MAGICW mg)

magic_clearhints 8
Triggered by clearing %^H(fR, resets PL_compiling.cop_hints_hash(fR.
        int     magic_clearhints(SVW sv, MAGICW mg)

magic_methcall 8
Invoke a magic method (like FETCH).

sv(fR and mg(fR are the tied thingy and the tie magic.

meth(fR is the name of the method to call.

argc(fR is the number of args (in addition to $self) to pass to the method.

The flags(fR can be:
    G_DISCARD     invoke method with G_DISCARD flag and dont
                  return a value
    G_UNDEF_FILL  fill the stack with argc pointers to
                  PL_sv_undef
The arguments themselves are any values following the flags(fR argument.

Returns the SV (if any) returned by the method, or NULL(fR on failure.
        SVW     magic_methcall(SV Wsv, const MAGIC Wmg,
                               SV Wmeth, U32 flags, U32 argc,
                               ...)

magic_sethint 8
Triggered by a store to %^H(fR, records the key/value pair to
PL_compiling.cop_hints_hash(fR.  It is assumed that hints aren't storing
anything that would need a deep copy.  Maybe we should warn if we find a
reference.
        int     magic_sethint(SVW sv, MAGICW mg)

mg_localize 8
Copy some of the magic from an existing SV to new localized version of that
SV.  Container magic (e.g., %ENV, $1, tie(fR)
gets copied, value magic doesn't (e.g.,
taint(fR, pos(fR).

If setmagic(fR is false then no set magic will be called on the new (empty) SV.
This typically means that assignment will soon follow (e.g. local $x = $y(fR),
and that will handle the magic.
        void    mg_localize(SVW sv, SVW nsv, bool setmagic)

Miscellaneous Functions

free_c_backtrace 8
Deallocates a backtrace received from get_c_bracktrace.
        void    free_c_backtrace(Perl_c_backtraceW bt)

get_c_backtrace 8
Collects the backtrace (aka stacktrace) into a single linear
malloced buffer, which the caller must Perl_free_c_backtrace()(fR.

Scans the frames back by depth + skip(fR, then drops the skip(fR innermost,
returning at most depth(fR frames.
        Perl_c_backtraceW get_c_backtrace(int max_depth,
                                          int skip)

MRO Functions

mro_get_linear_isa_dfs 8
Returns the Depth First Search linearization of @ISA
the given stash.  The return value is a read only AVW.
level(fR should be 0 (it is used internally in this
function's recursion).

You are responsible for SvREFCNT_inc()(fR on the
return value if you plan to store it anywhere
semi permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
        AVW     mro_get_linear_isa_dfs(HVW stash, U32 level)

mro_isa_changed_in 8
Takes the necessary steps (cache invalidations, mostly)
when the @ISA of the given package has changed.  Invoked
by the setisa(fR magic, should not need to invoke directly.
        void    mro_isa_changed_in(HVW stash)

mro_package_moved 8
Call this function to signal to a stash that it has been assigned to
another spot in the stash hierarchy.  stash(fR is the stash that has been
assigned.  oldstash(fR is the stash it replaces, if any.  gv(fR is the glob
that is actually being assigned to.

This can also be called with a null first argument to
indicate that oldstash(fR has been deleted.

This function invalidates isa caches on the old stash, on all subpackages
nested inside it, and on the subclasses of all those, including
non existent packages that have corresponding entries in stash(fR.

It also sets the effective names (HvENAME(fR) on all the stashes as
appropriate.

If the gv(fR is present and is not in the symbol table, then this function
simply returns.  This checked will be skipped if flags & 1(fR.
        void    mro_package_moved(HV W const stash,
                                  HV W const oldstash,
                                  const GV W const gv,
                                  U32 flags)

Optree Manipulation Functions

finalize_optree 8
This function finalizes the optree.  Should be called directly after
the complete optree is built.  It does some additional
checking which can't be done in the normal ck_(fRxxx functions and makes
the tree thread safe.
        void    finalize_optree(OPW o)

newATTRSUB_x 8
Construct a Perl subroutine, also performing some surrounding jobs.

This function is expected to be called in a Perl compilation context,
and some aspects of the subroutine are taken from global variables
associated with compilation.  In particular, PL_compcv(fR represents
the subroutine that is currently being compiled.  It must be non null
when this function is called, and some aspects of the subroutine being
constructed are taken from it.  The constructed subroutine may actually
be a reuse of the PL_compcv(fR object, but will not necessarily be so.

If block(fR is null then the subroutine will have no body, and for the
time being it will be an error to call it.  This represents a forward
subroutine declaration such as sub foo ($$);(fR.  If block(fR is
non null then it provides the Perl code of the subroutine body, which
will be executed when the subroutine is called.  This body includes
any argument unwrapping code resulting from a subroutine signature or
similar.  The pad use of the code must correspond to the pad attached
to PL_compcv(fR.  The code is not expected to include a leavesub(fR or
leavesublv(fR op; this function will add such an op.  block(fR is consumed
by this function and will become part of the constructed subroutine.

proto(fR specifies the subroutine's prototype, unless one is supplied
as an attribute (see below).  If proto(fR is null, then the subroutine
will not have a prototype.  If proto(fR is non null, it must point to a
const(fR op whose value is a string, and the subroutine will have that
string as its prototype.  If a prototype is supplied as an attribute, the
attribute takes precedence over proto(fR, but in that case proto(fR should
preferably be null.  In any case, proto(fR is consumed by this function.

attrs(fR supplies attributes to be applied the subroutine.  A handful of
attributes take effect by built in means, being applied to PL_compcv(fR
immediately when seen.  Other attributes are collected up and attached
to the subroutine by this route.  attrs(fR may be null to supply no
attributes, or point to a const(fR op for a single attribute, or point
to a list(fR op whose children apart from the pushmark(fR are const(fR
ops for one or more attributes.  Each const(fR op must be a string,
giving the attribute name optionally followed by parenthesised arguments,
in the manner in which attributes appear in Perl source.  The attributes
will be applied to the sub by this function.  attrs(fR is consumed by
this function.

If o_is_gv(fR is false and o(fR is null, then the subroutine will
be anonymous.  If o_is_gv(fR is false and o(fR is non null, then o(fR
must point to a const(fR op, which will be consumed by this function,
and its string value supplies a name for the subroutine.  The name may
be qualified or unqualified, and if it is unqualified then a default
stash will be selected in some manner.  If o_is_gv(fR is true, then o(fR
doesn't point to an OP(fR at all, but is instead a cast pointer to a GV(fR
by which the subroutine will be named.

If there is already a subroutine of the specified name, then the new
sub will either replace the existing one in the glob or be merged with
the existing one.  A warning may be generated about redefinition.

If the subroutine has one of a few special names, such as BEGIN(fR or
END(fR, then it will be claimed by the appropriate queue for automatic
running of phase related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
In the case of BEGIN(fR, the subroutine will be executed and the reference
to it disposed of before this function returns.

The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase named
subroutine will usually be alive by virtue of the reference owned by the
phase's automatic run queue.  But a BEGIN(fR subroutine, having already
been executed, will quite likely have been destroyed already by the
time this function returns, making it erroneous for the caller to make
any use of the returned pointer.  It is the caller's responsibility to
ensure that it knows which of these situations applies.
        CV W    newATTRSUB_x(I32 floor, OP Wo, OP Wproto,
                             OP Wattrs, OP Wblock, bool o_is_gv)

newXS_len_flags 8
Construct an XS subroutine, also performing some surrounding jobs.

The subroutine will have the entry point subaddr(fR.  It will have
the prototype specified by the nul terminated string proto(fR, or
no prototype if proto(fR is null.  The prototype string is copied;
the caller can mutate the supplied string afterwards.  If filename(fR
is non null, it must be a nul terminated filename, and the subroutine
will have its CvFILE(fR set accordingly.  By default CvFILE(fR is set to
point directly to the supplied string, which must be static.  If flags(fR
has the XS_DYNAMIC_FILENAME(fR bit set, then a copy of the string will
be taken instead.

Other aspects of the subroutine will be left in their default state.
If anything else needs to be done to the subroutine for it to function
correctly, it is the caller's responsibility to do that after this
function has constructed it.  However, beware of the subroutine
potentially being destroyed before this function returns, as described
below.

If name(fR is null then the subroutine will be anonymous, with its
CvGV(fR referring to an __ANON__(fR glob.  If name(fR is non null then the
subroutine will be named accordingly, referenced by the appropriate glob.
name(fR is a string of length len(fR bytes giving a sigilless symbol name,
in UTF 8 if flags(fR has the SVf_UTF8(fR bit set and in Latin 1 otherwise.
The name may be either qualified or unqualified, with the stash defaulting
in the same manner as for gv_fetchpvn_flags(fR.  flags(fR may contain
flag bits understood by gv_fetchpvn_flags(fR with the same meaning as
they have there, such as GV_ADDWARN(fR.  The symbol is always added to
the stash if necessary, with GV_ADDMULTI(fR semantics.

If there is already a subroutine of the specified name, then the new sub
will replace the existing one in the glob.  A warning may be generated
about the redefinition.  If the old subroutine was CvCONST(fR then the
decision about whether to warn is influenced by an expectation about
whether the new subroutine will become a constant of similar value.
That expectation is determined by const_svp(fR.  (Note that the call to
this function doesn't make the new subroutine CvCONST(fR in any case;
that is left to the caller.)  If const_svp(fR is null then it indicates
that the new subroutine will not become a constant.  If const_svp(fR
is non null then it indicates that the new subroutine will become a
constant, and it points to an SVW(fR that provides the constant value
that the subroutine will have.

If the subroutine has one of a few special names, such as BEGIN(fR or
END(fR, then it will be claimed by the appropriate queue for automatic
running of phase related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
In the case of BEGIN(fR, the subroutine will be executed and the reference
to it disposed of before this function returns, and also before its
prototype is set.  If a BEGIN(fR subroutine would not be sufficiently
constructed by this function to be ready for execution then the caller
must prevent this happening by giving the subroutine a different name.

The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase named
subroutine will usually be alive by virtue of the reference owned by the
phase's automatic run queue.  But a BEGIN(fR subroutine, having already
been executed, will quite likely have been destroyed already by the
time this function returns, making it erroneous for the caller to make
any use of the returned pointer.  It is the caller's responsibility to
ensure that it knows which of these situations applies.
        CV W    newXS_len_flags(const char Wname, STRLEN len,
                                XSUBADDR_t subaddr,
                                const char Wconst filename,
                                const char Wconst proto,
                                SV WWconst_svp, U32 flags)

optimize_optree 8
This function applies some optimisations to the optree in top down order.
It is called before the peephole optimizer, which processes ops in
execution order. Note that finalize_optree() also does a top down scan,
but is called WafterW the peephole optimizer.
        void    optimize_optree(OPW o)

Pad Data Structures

CX_CURPAD_SAVE 8
Save the current pad in the given context block structure.
        void    CX_CURPAD_SAVE(struct context)

CX_CURPAD_SV 8
Access the SV at offset po(fR in the saved current pad in the given
context block structure (can be used as an lvalue).
        SV W    CX_CURPAD_SV(struct context, PADOFFSET po)

PAD_BASE_SV 8
Get the value from slot po(fR in the base (DEPTH=1) pad of a padlist
        SV W    PAD_BASE_SV(PADLIST padlist, PADOFFSET po)

PAD_CLONE_VARS 8
Clone the state variables associated with running and compiling pads.
        void    PAD_CLONE_VARS(PerlInterpreter Wproto_perl,
                               CLONE_PARAMSW param)

PAD_COMPNAME_FLAGS 8
Return the flags for the current compiling pad name
at offset po(fR.  Assumes a valid slot entry.
        U32     PAD_COMPNAME_FLAGS(PADOFFSET po)

PAD_COMPNAME_GEN 8
The generation number of the name at offset po(fR in the current
compiling pad (lvalue).
        STRLEN  PAD_COMPNAME_GEN(PADOFFSET po)

PAD_COMPNAME_GEN_set 8
Sets the generation number of the name at offset po(fR in the current
ling pad (lvalue) to gen(fR.
	STRLEN	PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)
PAD_COMPNAME_OURSTASH 8
Return the stash associated with an our(fR variable.
Assumes the slot entry is a valid our(fR lexical.
        HV W    PAD_COMPNAME_OURSTASH(PADOFFSET po)

PAD_COMPNAME_PV 8
Return the name of the current compiling pad name
at offset po(fR.  Assumes a valid slot entry.
        char W  PAD_COMPNAME_PV(PADOFFSET po)

PAD_COMPNAME_TYPE 8
Return the type (stash) of the current compiling pad name at offset
po(fR.  Must be a valid name.  Returns null if not typed.
        HV W    PAD_COMPNAME_TYPE(PADOFFSET po)

PadnameIsOUR 8
Whether this is an our variable.
        bool    PadnameIsOUR(PADNAME pn)

PadnameIsSTATE 8
Whether this is a state variable.
        bool    PadnameIsSTATE(PADNAME pn)

PadnameOURSTASH 8
The stash in which this our variable was declared.
        HV W    PadnameOURSTASH()

PadnameOUTER 8
Whether this entry belongs to an outer pad.  Entries for which this is true
are often referred to as 'fake'.
        bool    PadnameOUTER(PADNAME pn)

PadnameTYPE 8
The stash associated with a typed lexical.  This returns the %Foo:: hash
for my Foo $bar(fR.
        HV W    PadnameTYPE(PADNAME pn)

PAD_RESTORE_LOCAL 8
Restore the old pad saved into the local variable opad(fR by PAD_SAVE_LOCAL()(fR
        void    PAD_RESTORE_LOCAL(PAD Wopad)

PAD_SAVE_LOCAL 8
Save the current pad to the local variable opad(fR, then make the
current pad equal to npad(fR
        void    PAD_SAVE_LOCAL(PAD Wopad, PAD Wnpad)

PAD_SAVE_SETNULLPAD 8
Save the current pad then set it to null.
        void    PAD_SAVE_SETNULLPAD()

PAD_SETSV 8
Set the slot at offset po(fR in the current pad to sv(fR
        SV W    PAD_SETSV(PADOFFSET po, SVW sv)

PAD_SET_CUR 8
Set the current pad to be pad n(fR in the padlist, saving
the previous current pad.  NB currently this macro expands to a string too
long for some compilers, so it's best to replace it with
    SAVECOMPPAD();
    PAD_SET_CUR_NOSAVE(padlist,n);
        void    PAD_SET_CUR(PADLIST padlist, I32 n)

PAD_SET_CUR_NOSAVE 8
like PAD_SET_CUR, but without the save
        void    PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)

PAD_SV 8
Get the value at offset po(fR in the current pad
        SV W    PAD_SV(PADOFFSET po)

PAD_SVl 8
Lightweight and lvalue version of PAD_SV(fR.
Get or set the value at offset po(fR in the current pad.
Unlike PAD_SV(fR, does not print diagnostics with  DX.
For internal use only.
        SV W    PAD_SVl(PADOFFSET po)

SAVECLEARSV 8
Clear the pointed to pad value on scope exit.  (i.e. the runtime action of
my(fR)
        void    SAVECLEARSV(SV WWsvp)

SAVECOMPPAD 8
save PL_comppad(fR and PL_curpad(fR
        void    SAVECOMPPAD()

SAVEPADSV 8
Save a pad slot (used to restore after an iteration)

XXX DAPM it would make more sense to make the arg a PADOFFSET
	void	SAVEPADSV(PADOFFSET po)
Per Interpreter Variables

PL_DBsingle 8
When Perl is run in debugging mode, with the  d switch, this SV is a
boolean which indicates whether subs are being single stepped.
Single stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
"PL_DBsub".
        SV W    PL_DBsingle

PL_DBsub 8
When Perl is run in debugging mode, with the  d switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
"PL_DBsingle".
        GV W    PL_DBsub

PL_DBtrace 8
Trace variable used when Perl is run in debugging mode, with the  d
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See "PL_DBsingle".
        SV W    PL_DBtrace

PL_dowarn 8
The C variable that roughly corresponds to Perl's $^W warning variable.
However, $^W is treated as a boolean, whereas PL_dowarn(fR is a
collection of flag bits.
        U8      PL_dowarn

PL_last_in_gv 8
The GV which was last used for a filehandle input operation.  (<FH>(fR)
        GVW     PL_last_in_gv

PL_ofsgv 8
The glob containing the output field separator   W,(fR in Perl space.
        GVW     PL_ofsgv

PL_rs 8
The input record separator   $/ in Perl space.
        SVW     PL_rs

Stack Manipulation Macros

djSP 8
Declare Just SP(fR.  This is actually identical to dSP(fR, and declares
a local copy of perl's stack pointer, available via the SP(fR macro.
See "SP" in perlapi(fR.  (Available for backward source code compatibility with
the old (Perl 5.005) thread model.)
                djSP;

LVRET 8
True if this op will be the return value of an lvalue subroutine
SV Body Allocation

sv_2num 8
NOTE: this function is experimental and may change or be
removed without notice.

Return an SV with the numeric value of the source SV, doing any necessary
reference or overload conversion.  The caller is expected to have handled
get magic already.
        SVW     sv_2num(SV Wconst sv)

SV Manipulation Functions

An SV (or AV, HV, etc.) is allocated in two parts: the head (struct
sv, av, hv...) contains type and reference count information, and for
many types, a pointer to the body (struct xrv, xpv, xpviv...), which
contains fields specific to each type.  Some types store all they need
in the head, so don't have a body.

In all but the most memory paranoid configurations (ex: PURIFY), heads
and bodies are allocated out of arenas, which by default are
approximately 4K chunks of memory parcelled up into N heads or bodies.
Sv bodies are allocated by their sv type, guaranteeing size
consistency needed to allocate safely from arrays.

For SV heads, the first slot in each arena is reserved, and holds a
link to the next arena, some flags, and a note of the number of slots.
Snaked through each arena chain is a linked list of free items; when
this becomes empty, an extra arena is allocated and divided up into N
items which are threaded into the free list.

SV bodies are similar, but they use arena sets by default, which
separate the link and info from the arena itself, and reclaim the 1st
slot in the arena.  SV bodies are further described later.

The following global variables are associated with arenas:
 PL_sv_arenaroot     pointer to list of SV arenas
 PL_sv_root          pointer to list of free SV structures

 PL_body_arenas      head of linked list of body arenas
 PL_body_roots[]     array of pointers to list of free bodies of svtype
                     arrays are indexed by the svtype needed
A few special SV heads are not allocated from an arena, but are
instead directly created in the interpreter structure, eg PL_sv_undef.
The size of arenas can be changed from the default by setting
PERL_ARENA_SIZE appropriately at compile time.

The SV arena serves the secondary purpose of allowing still live SVs
to be located and destroyed during final cleanup.

At the lowest level, the macros new_SV() and del_SV() grab and free
an SV head.  (If debugging with  DD, del_SV() calls the function S_del_sv()
to return the SV to the free list with error checking.) new_SV() calls
more_sv() / sv_add_arena() to add an extra arena if the free list is empty.
SVs in the free list have their SvTYPE field set to all ones.

At the time of very final cleanup, sv_free_arenas() is called from
perl_destruct() to physically free all the arenas allocated since the
start of the interpreter.

The function visit() scans the SV arenas list, and calls a specified
function for each SV it finds which is still live   ie which has an SvTYPE
other than all 1's, and a non zero SvREFCNT. visit() is used by the
following functions (specified as [function that calls visit()] / [function
called by visit() for each SV]):
    sv_report_used() / do_report_used()
                        dump all remaining SVs (debugging aid)

    sv_clean_objs() / do_clean_objs(),do_clean_named_objs(),
                      do_clean_named_io_objs(),do_curse()
                        Attempt to free all objects pointed to by RVs,
                        try to do the same for all objects indir 
                        ectly referenced by typeglobs too, and
                        then do a final sweep, cursing any
                        objects that remain.  Called once from
                        perl_destruct(), prior to calling sv_clean_all()
                        below.

    sv_clean_all() / do_clean_all()
                        SvREFCNT_dec(sv) each remaining SV, possibly
                        triggering an sv_free(). It also sets the
                        SVf_BREAK flag on the SV to indicate that the
                        refcnt has been artificially lowered, and thus
                        stopping sv_free() from giving spurious warnings
                        about SVs which unexpectedly have a refcnt
                        of zero.  called repeatedly from perl_destruct()
                        until there are no SVs left.

sv_add_arena 8
Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.
        void    sv_add_arena(char Wconst ptr, const U32 size,
                             const U32 flags)

sv_clean_all 8
Decrement the refcnt of each remaining SV, possibly triggering a
cleanup.  This function may have to be called multiple times to free
SVs which are in complex self referential hierarchies.
        I32     sv_clean_all()

sv_clean_objs 8
Attempt to destroy all objects not yet freed.
        void    sv_clean_objs()

sv_free_arenas 8
Deallocate the memory used by all arenas.  Note that all the individual SV
heads and bodies within the arenas must already have been freed.
        void    sv_free_arenas()

SvTHINKFIRST 8
A quick flag check to see whether an sv(fR should be passed to sv_force_normal(fR
to be downgraded before SvIVX(fR or SvPVX(fR can be modified directly.

For example, if your scalar is a reference and you want to modify the SvIVX(fR
slot, you can't just do SvROK_off(fR, as that will leak the referent.

This is used internally by various sv modifying functions, such as
sv_setsv(fR, sv_setiv(fR and sv_pvn_force(fR.

One case that this does not handle is a gv without SvFAKE set.  After
    if (SvTHINKFIRST(gv)) sv_force_normal(gv);
it will still be a gv.

SvTHINKFIRST(fR sometimes produces false positives.  In those cases
sv_force_normal(fR does nothing.
        U32     SvTHINKFIRST(SV Wsv)

Unicode Support

find_uninit_var 8
NOTE: this function is experimental and may change or be
removed without notice.

Find the name of the undefined variable (if any) that caused the operator
to issue a Use of uninitialized value warning.
If match is true, only return a name if its value matches uninit_sv(fR.
So roughly speaking, if a unary operator (such as OP_COS(fR) generates a
warning, then following the direct child of the op may yield an
OP_PADSV(fR or OP_GV(fR that gives the name of the undefined variable.  On the
other hand, with OP_ADD(fR there are two branches to follow, so we only print
the variable name if we get an exact match.
desc_p(fR points to a string pointer holding the description of the op.
This may be updated if needed.

The name is returned as a mortal SV.

Assumes that PL_op(fR is the OP that originally triggered the error, and that
PL_comppad(fR/PL_curpad(fR points to the currently executing pad.
        SVW     find_uninit_var(const OP Wconst obase,
                                const SV Wconst uninit_sv,
                                bool match, const char WWdesc_p)

isSCRIPT_RUN 8
Returns a bool as to whether or not the sequence of bytes from s(fR up to but
not including send(fR form a script run.  utf8_target(fR is TRUE iff the
sequence starting at s(fR is to be treated as UTF 8.  To be precise, except for
two degenerate cases given below, this function returns TRUE iff all code
points in it come from any combination of three scripts given by the Unicode
Script Extensions property: Common, Inherited, and possibly one other.
Additionally all decimal digits must come from the same consecutive sequence of
10.

For example, if all the characters in the sequence are Greek, or Common, or
Inherited, this function will return TRUE, provided any decimal digits in it
are the ASCII digits 0..9.  For scripts (unlike Greek) that have their own
digits defined this will accept either digits from that set or from 0..9, but
not a combination of the two.  Some scripts, such as Arabic, have more than one
set of digits.  All digits must come from the same set for this function to
return TRUE.

Wret_script, if ret_script(fR is not NULL, will on return of TRUE
contain the script found, using the SCX_enum(fR typedef.  Its value will be
SCX_INVALID(fR if the function returns FALSE.

If the sequence is empty, TRUE is returned, but Wret_script (if asked for)
will be SCX_INVALID(fR.

If the sequence contains a single code point which is unassigned to a character
in the version of Unicode being used, the function will return TRUE, and the
script will be SCX_Unknown(fR.  Any other combination of unassigned code points
in the input sequence will result in the function treating the input as not
being a script run.

The returned script will be SCX_Inherited(fR iff all the code points in it are
from the Inherited script.

Otherwise, the returned script will be SCX_Common(fR iff all the code points in
it are from the Inherited or Common scripts.
        bool    isSCRIPT_RUN(const U8 Ws, const U8 Wsend,
                             const bool utf8_target)

is_utf8_non_invariant_string 8
Returns TRUE if is_utf8_invariant_string in perlapi returns FALSE for the first
len(fR bytes of the string s(fR, but they are, nonetheless, legal Perl extended
UTF 8; otherwise returns FALSE.

A TRUE return means that at least one code point represented by the sequence
either is a wide character not representable as a single byte, or the
representation differs depending on whether the sequence is encoded in UTF 8 or
not.

See also
"is_utf8_invariant_string" in perlapi(fR,
"is_utf8_string" in perlapi(fR
        bool    is_utf8_non_invariant_string(const U8W const s,
                                             STRLEN len)

report_uninit 8
Print appropriate Use of uninitialized variable warning.
        void    report_uninit(const SV Wuninit_sv)

variant_under_utf8_count 8
This function looks at the sequence of bytes between s(fR and e(fR, which are
assumed to be encoded in ASCII/Latin1, and returns how many of them would
change should the string be translated into UTF 8.  Due to the nature of UTF 8,
each of these would occupy two bytes instead of the single one in the input
string.  Thus, this function returns the precise number of bytes the string
would expand by when translated to UTF 8.

Unlike most of the other functions that have utf8(fR in their name, the input
to this function is NOT a UTF 8 encoded string.  The function name is slightly
odd to emphasize this.

This function is internal to Perl because khw thinks that any XS code that
would want this is probably operating too close to the internals.  Presenting a
valid use case could change that.

See also
"is_utf8_invariant_string" in perlapi(fR
and
"is_utf8_invariant_string_loc" in perlapi(fR,
        Size_t  variant_under_utf8_count(const U8W const s,
                                         const U8W const e)

Undocumented functions

The following functions are currently undocumented.  If you use one of
them, you may wish to consider creating and submitting documentation for
it.
PerlIO_restore_errno 4
PerlIO_save_errno 4
PerlLIO_dup2_cloexec 4
PerlLIO_dup_cloexec 4
PerlLIO_open3_cloexec 4
PerlLIO_open_cloexec 4
PerlProc_pipe_cloexec 4
PerlSock_accept_cloexec 4
PerlSock_socket_cloexec 4
PerlSock_socketpair_cloexec 4
Slab_Alloc 4
Slab_Free 4
Slab_to_ro 4
Slab_to_rw 4
_add_range_to_invlist 4
_byte_dump_string 4
_core_swash_init 4
_get_regclass_nonbitmap_data 4
_get_swash_invlist 4
_inverse_folds 4
_invlistEQ 4
_invlist_array_init 4
_invlist_contains_cp 4
_invlist_dump 4
_invlist_intersection 4
_invlist_intersection_maybe_complement_2nd 4
_invlist_invert 4
_invlist_len 4
_invlist_populate_swatch 4
_invlist_search 4
_invlist_subtract 4
_invlist_union 4
_invlist_union_maybe_complement_2nd 4
_is_grapheme 4
_is_in_locale_category 4
_mem_collxfrm 4
_new_invlist 4
_new_invlist_C_array 4
_setup_canned_invlist 4
_swash_to_invlist 4
_to_fold_latin1 4
_to_upper_title_latin1 4
_warn_problematic_locale 4
abort_execution 4
add_cp_to_invlist 4
alloc_LOGOP 4
alloc_maybe_populate_EXACT 4
allocmy 4
amagic_is_enabled 4
append_utf8_from_native_byte 4
apply 4
av_extend_guts 4
av_nonelem 4
av_reify 4
bind_match 4
boot_core_PerlIO 4
boot_core_UNIVERSAL 4
boot_core_mro 4
cando 4
check_utf8_print 4
ck_anoncode 4
ck_backtick 4
ck_bitop 4
ck_cmp 4
ck_concat 4
ck_defined 4
ck_delete 4
ck_each 4
ck_entersub_args_core 4
ck_eof 4
ck_eval 4
ck_exec 4
ck_exists 4
ck_ftst 4
ck_fun 4
ck_glob 4
ck_grep 4
ck_index 4
ck_join 4
ck_length 4
ck_lfun 4
ck_listiob 4
ck_match 4
ck_method 4
ck_null 4
ck_open 4
ck_prototype 4
ck_readline 4
ck_refassign 4
ck_repeat 4
ck_require 4
ck_return 4
ck_rfun 4
ck_rvconst 4
ck_sassign 4
ck_select 4
ck_shift 4
ck_smartmatch 4
ck_sort 4
ck_spair 4
ck_split 4
ck_stringify 4
ck_subr 4
ck_substr 4
ck_svconst 4
ck_tell 4
ck_trunc 4
closest_cop 4
compute_EXACTish 4
coresub_op 4
create_eval_scope 4
croak_caller 4
croak_no_mem 4
croak_popstack 4
current_re_engine 4
custom_op_get_field 4
cv_ckproto_len_flags 4
cv_clone_into 4
cv_const_sv_or_av 4
cv_undef_flags 4
cvgv_from_hek 4
cvgv_set 4
cvstash_set 4
deb_stack_all 4
defelem_target 4
delete_eval_scope 4
delimcpy_no_escape 4
die_unwind 4
do_aexec 4
do_aexec5 4
do_eof 4
do_exec 4
do_exec3 4
do_ipcctl 4
do_ipcget 4
do_msgrcv 4
do_msgsnd 4
do_ncmp 4
do_open6 4
do_open_raw 4
do_print 4
do_readline 4
do_seek 4
do_semop 4
do_shmio 4
do_sysseek 4
do_tell 4
do_trans 4
do_vecget 4
do_vecset 4
do_vop 4
does_utf8_overflow 4
dofile 4
drand48_init_r 4
drand48_r 4
dtrace_probe_call 4
dtrace_probe_load 4
dtrace_probe_op 4
dtrace_probe_phase 4
dump_all_perl 4
dump_packsubs_perl 4
dump_sub_perl 4
dump_sv_child 4
emulate_cop_io 4
feature_is_enabled 4
find_lexical_cv 4
find_runcv_where 4
find_script 4
form_short_octal_warning 4
free_tied_hv_pool 4
get_db_sub 4
get_debug_opts 4
get_hash_seed 4
get_invlist_iter_addr 4
get_invlist_offset_addr 4
get_invlist_previous_index_addr 4
get_no_modify 4
get_opargs 4
get_re_arg 4
getenv_len 4
grok_atoUV 4
grok_bslash_c 4
grok_bslash_o 4
grok_bslash_x 4
gv_fetchmeth_internal 4
gv_override 4
gv_setref 4
gv_stashpvn_internal 4
gv_stashsvpvn_cached 4
handle_named_backref 4
hfree_next_entry 4
hv_backreferences_p 4
hv_kill_backrefs 4
hv_placeholders_p 4
hv_pushkv 4
hv_undef_flags 4
init_argv_symbols 4
init_constants 4
init_dbargs 4
init_debugger 4
init_named_cv 4
init_uniprops 4
invert 4
invlist_array 4
invlist_clear 4
invlist_clone 4
invlist_highest 4
invlist_is_iterating 4
invlist_iterfinish 4
invlist_iterinit 4
invlist_max 4
invlist_previous_index 4
invlist_set_len 4
invlist_set_previous_index 4
invlist_trim 4
io_close 4
isFF_OVERLONG 4
isFOO_lc 4
is_utf8_common 4
is_utf8_common_with_len 4
is_utf8_overlong_given_start_byte_ok 4
isinfnansv 4
jmaybe 4
keyword 4
keyword_plugin_standard 4
list 4
localize 4
magic_clear_all_env 4
magic_cleararylen_p 4
magic_clearenv 4
magic_clearisa 4
magic_clearpack 4
magic_clearsig 4
magic_copycallchecker 4
magic_existspack 4
magic_freearylen_p 4
magic_freeovrld 4
magic_get 4
magic_getarylen 4
magic_getdebugvar 4
magic_getdefelem 4
magic_getnkeys 4
magic_getpack 4
magic_getpos 4
magic_getsig 4
magic_getsubstr 4
magic_gettaint 4
magic_getuvar 4
magic_getvec 4
magic_killbackrefs 4
magic_nextpack 4
magic_regdata_cnt 4
magic_regdatum_get 4
magic_regdatum_set 4
magic_scalarpack 4
magic_set 4
magic_set_all_env 4
magic_setarylen 4
magic_setcollxfrm 4
magic_setdbline 4
magic_setdebugvar 4
magic_setdefelem 4
magic_setenv 4
magic_setisa 4
magic_setlvref 4
magic_setmglob 4
magic_setnkeys 4
magic_setnonelem 4
magic_setpack 4
magic_setpos 4
magic_setregexp 4
magic_setsig 4
magic_setsubstr 4
magic_settaint 4
magic_setutf8 4
magic_setuvar 4
magic_setvec 4
magic_sizepack 4
magic_wipepack 4
malloc_good_size 4
malloced_size 4
mem_collxfrm 4
mem_log_alloc 4
mem_log_free 4
mem_log_realloc 4
mg_find_mglob 4
mode_from_discipline 4
more_bodies 4
mro_meta_dup 4
mro_meta_init 4
multiconcat_stringify 4
multideref_stringify 4
my_attrs 4
my_clearenv 4
my_lstat_flags 4
my_memrchr 4
my_mkostemp 4
my_mkstemp 4
my_mkstemp_cloexec 4
my_stat_flags 4
my_strerror 4
my_unexec 4
newGP 4
newMETHOP_internal 4
newSTUB 4
newSVavdefelem 4
newXS_deffile 4
new_warnings_bitfield 4
nextargv 4
noperl_die 4
notify_parser_that_changed_to_utf8 4
oopsAV 4
oopsHV 4
op_clear 4
op_integerize 4
op_lvalue_flags 4
op_refcnt_dec 4
op_refcnt_inc 4
op_relocate_sv 4
op_std_init 4
op_unscope 4
opmethod_stash 4
opslab_force_free 4
opslab_free 4
opslab_free_nopad 4
package 4
package_version 4
pad_add_weakref 4
padlist_store 4
padname_free 4
padnamelist_free 4
parse_unicode_opts 4
parse_uniprop_string 4
parser_free 4
parser_free_nexttoke_ops 4
path_is_searchable 4
peep 4
pmruntime 4
populate_isa 4
ptr_hash 4
qerror 4
re_exec_indentf 4
re_indentf 4
re_op_compile 4
re_printf 4
reg_named_buff 4
reg_named_buff_iter 4
reg_numbered_buff_fetch 4
reg_numbered_buff_length 4
reg_numbered_buff_store 4
reg_qr_package 4
reg_skipcomment 4
reg_temp_copy 4
regcurly 4
regprop 4
report_evil_fh 4
report_redefined_cv 4
report_wrongway_fh 4
rpeep 4
rsignal_restore 4
rsignal_save 4
rxres_save 4
same_dirent 4
save_strlen 4
save_to_buffer 4
sawparens 4
scalar 4
scalarvoid 4
set_caret_X 4
set_numeric_standard 4
set_numeric_underlying 4
set_padlist 4
setfd_cloexec 4
setfd_cloexec_for_nonsysfd 4
setfd_cloexec_or_inhexec_by_sysfdness 4
setfd_inhexec 4
setfd_inhexec_for_sysfd 4
should_warn_nl 4
sighandler 4
softref2xv 4
ssc_add_range 4
ssc_clear_locale 4
ssc_cp_and 4
ssc_intersection 4
ssc_union 4
sub_crush_depth 4
sv_add_backref 4
sv_buf_to_ro 4
sv_del_backref 4
sv_free2 4
sv_kill_backrefs 4
sv_len_utf8_nomg 4
sv_magicext_mglob 4
sv_mortalcopy_flags 4
sv_only_taint_gmagic 4
sv_or_pv_pos_u2b 4
sv_resetpvn 4
sv_sethek 4
sv_setsv_cow 4
sv_unglob 4
swash_fetch 4
swash_init 4
tied_method 4
tmps_grow_p 4
translate_substr_offsets 4
try_amagic_bin 4
try_amagic_un 4
unshare_hek 4
utf16_to_utf8 4
utf16_to_utf8_reversed 4
utilize 4
varname 4
vivify_defelem 4
vivify_ref 4
wait4pid 4
was_lvalue_sub 4
watch 4
win32_croak_not_implemented 4
write_to_stderr 4
xs_boot_epilog 4
xs_handshake 4
yyerror 4
yyerror_pv 4
yyerror_pvn 4
yylex 4
yyparse 4
yyquit 4
yyunlex 4
AUTHORS

The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl.  Documentation is by whoever was kind enough to
document their functions.
SEE ALSO

perlguts, perlapi

