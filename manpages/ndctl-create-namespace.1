'\" t
.\"     Title: ndctl-create-namespace
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.8
.\"      Date: 2019-03-18
.\"    Manual: ndctl Manual
.\"    Source: ndctl
.\"  Language: English
.\"
.TH "NDCTL\-CREATE\-NAMESPACE" "1" "2019-03-18" "ndctl" "ndctl Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
ndctl\-create\-namespace \- provision or reconfigure a namespace
.SH "SYNOPSIS"
.sp
.nf
\fIndctl create\-namespace\fP [<options>]
.fi
.br
.SH "THEORY OF OPERATION"
.sp
The capacity of an NVDIMM REGION (contiguous span of persistent memory)
is accessed via one or more NAMESPACE devices. REGION is the Linux term
for what ACPI and UEFI call a DIMM\-interleave\-set, or a
system\-physical\-address\-range that is striped (by the memory controller)
across one or more memory modules.
.sp
The UEFI specification defines the \fINVDIMM Label Protocol\fP as the
combination of label area access methods and a data format for
provisioning one or more NAMESPACE objects from a REGION. Note that
label support is optional and if Linux does not detect the label
capability it will automatically instantiate a "label\-less" namespace
per region. Examples of label\-less namespaces are the ones created by
the kernel\(cqs \fImemmap=ss!nn\fP command line option (see the nvdimm wiki on
kernel.org), or NVDIMMs without a valid \fInamespace index\fP in their label
area.
.sp
A namespace can be provisioned to operate in one of 4 modes, \fIfsdax\fP,
\fIdevdax\fP, \fIsector\fP, and \fIraw\fP. Here are the expected usage models for
these modes:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
fsdax: Filesystem\-DAX mode is the default mode of a namespace
when specifying \fIndctl create\-namespace\fP with no options. It creates
a block device (/dev/pmemX[.Y]) that supports the DAX capabilities
of Linux filesystems (xfs and ext4 to date). DAX removes the page
cache from the I/O path and allows mmap(2) to establish direct
mappings to persistent memory media. The DAX capability enables
workloads / working\-sets that would exceed the capacity of the page
cache to scale up to the capacity of persistent memory. Workloads
that fit in page cache or perform bulk data transfers may not see
benefit from DAX. When in doubt, pick this mode.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
devdax: Device\-DAX mode enables similar mmap(2) DAX mapping
capabilities as Filesystem\-DAX. However, instead of a block\-device
that can support a DAX\-enabled filesystem, this mode emits a single
character device file (/dev/daxX.Y). Use this mode to assign
persistent memory to a virtual\-machine, register persistent memory
for RDMA, or when gigantic mappings are needed.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
sector: Use this mode to host legacy filesystems that do
not checksum metadata or applications that are not prepared for torn
sectors after a crash. Expected usage for this mode is for small
boot volumes. This mode is compatible with other operating systems.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
raw: Raw mode is effectively just a memory disk that does
not support DAX. Typically this indicates a namespace that was
created by tooling or another operating system that did not know how
to create a Linux \fIfsdax\fP or \fIdevdax\fP mode namespace. This mode is
compatible with other operating systems, but again, does not support
DAX operation.
.RE
.SH "EXAMPLES"
.sp
Create a maximally sized pmem namespace in \fIfsdax\fP mode (the
default)
.sp
.nf
ndctl create\-namespace
.fi
.br
.sp
Convert namespace0.0 to \fIsector\fP mode
.sp
.nf
ndctl create\-namespace \-f \-e namespace0.0 \-\-mode=sector
.fi
.br
.SH "OPTIONS"
.sp
\-t, \-\-type=
.RS 4
Create a \fIpmem\fP or \fIblk\fP namespace (subject to available
capacity).  A pmem namespace supports the dax (direct access)
capability to mmap(2) persistent memory directly into
a process address space.  A blk namespace access persistent
memory through a block\-window\-aperture.  Compared to pmem it
supports a traditional storage error model (EIO on error rather
than a cpu exception on a bad memory access), but it does not
support dax.
.RE
.sp
\-m, \-\-mode=
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
"raw": expose the namespace capacity directly with
limitations.  Neither a raw pmem namepace nor raw blk
namespace support sector atomicity by default (see "sector"
mode below).  A raw pmem namespace may have limited to no dax
support depending the kernel. In other words operations like
direct\-I/O targeting a dax buffer may fail for a pmem
namespace in raw mode or indirect through a page\-cache buffer.
See "fsdax" and "devdax" mode for dax operation.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
"sector": persistent memory, given that it is byte
addressable, does not support sector atomicity.  The
problematic aspect of sector tearing is that most applications
do not know they have a atomic sector update dependency.  At
least a disk rarely ever tears sectors and if it does it
almost certainly returns a checksum error on access.
Persistent memory devices will always tear and always
silently.  Until an application is audited to be robust in the
presence of sector\-tearing "safe" mode is recommended.  This
imposes some performance overhead and disables the dax
capability. (also known as "safe" or "btt" mode)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
"fsdax": A pmem namespace in this mode supports dax
operation with a block\-device based filesystem (in previous
ndctl releases this mode was named "memory" mode). This mode
comes at the cost of allocating per\-page metadata. The
capacity can be allocated from "System RAM", or from a
reserved portion of "Persistent Memory" (see the \-\-map=
option).  NOTE: A filesystem that supports DAX is required
for dax operation. If the raw block device (/dev/pmemX) is
used directly without a filesystem, it will use the page
cache. See "devdax" mode for raw device access that supports
dax.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
"devdax": The device\-dax character device interface is a
statically allocated / raw access analogue of filesystem\-dax
(in previous ndctl releases this mode was named "dax" mode).
It allows memory ranges to be mapped without need of an
intervening filesystem.  The device\-dax is interface strict,
precise and predictable. Specifically the interface:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Guarantees fault granularity with respect to a given page
size (4K, 2M, or 1G on x86) set at configuration time.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Enforces deterministic behavior by being strict about what
fault scenarios are supported. I.e. if a device is
configured with a 2M alignment an attempt to fault a 4K
aligned offset will result in SIGBUS.
.RE
.RE
.RE
.sp
\-s, \-\-size=
.RS 4
For NVDIMM devices that support namespace labels, set the
namespace size in bytes.  Otherwise it defaults to the maximum
size specified by platform firmware.  This option supports the
suffixes "k" or "K" for KiB, "m" or "M" for MiB, "g" or "G" for
GiB and "t" or "T" for TiB.
.sp
.if n .RS 4
.nf
For pmem namepsaces the size must be a multiple of the
interleave\-width and the namespace alignment (see
below).
.fi
.if n .RE
.RE
.sp
\-a, \-\-align
.RS 4
Applications that want to establish dax memory mappings with
page table entries greater than system base page size (4K on
x86) need a persistent memory namespace that is sufficiently
aligned. For "fsdax" and "devdax" mode this defaults to 2M.
Note that "devdax" mode enforces all mappings to be aligned to
this value, i.e. it fails unaligned mapping attempts. The
"fsdax" alignment setting determines the starting alignment of
filesystem extents and may limit the possible granularities,
if a large mapping is not possible it will silently fall back
to a smaller page size.
.RE
.sp
\-e, \-\-reconfig=
.RS 4
Reconfigure an existing namespace (change the mode, sector size,
etc...).  All namespace parameters, save uuid, default to the
current attributes of the specified namespace.  The namespace is
then re\-created with the specified modifications.  The uuid is
refreshed to a new value by default whenever the data layout of
a namespace is changed, see \-\-uuid= to set a specific uuid.
.RE
.sp
\-u, \-\-uuid=
.RS 4
This option is not recommended as a new uuid should be generated
every time a namespace is (re\-)created.  For recovery scenarios
however the uuid may be specified.
.RE
.sp
\-n, \-\-name=
.RS 4
For NVDIMM devices that support namespace labels,
specify a human friendly name for a namespace.  This name is
available as a device attribute for use in udev rules.
.RE
.sp
\-l, \-\-sector\-size
.RS 4
Specify the logical sector size (LBA size) of the
Linux block device associated with an namespace.
.RE
.sp
\-M, \-\-map=
.RS 4
A pmem namespace in "fsdax" or "devdax" mode requires allocation of
per\-page metadata.  The allocation can be drawn from either:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
"mem": typical system memory
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
"dev": persistent memory reserved from the namespace
.sp
.if n .RS 4
.nf
Given relative capacities of "Persistent Memory" to "System
RAM" the allocation defaults to reserving space out of the
namespace directly ("\-\-map=dev"). The overhead is 64\-bytes per
4K (16GB per 1TB) on x86.
.fi
.if n .RE
.RE
.RE
.sp
\-f, \-\-force
.RS 4
Unless this option is specified the \fIreconfigure namespace\fP
operation will fail if the namespace is presently active.
Specifying \-\-force causes the namespace to be disabled before
the operation is attempted. However, if the namespace is
mounted then the \fIdisable namespace\fP and \fIreconfigure
namespace\fP operations will be aborted.  The namespace must be
unmounted before being reconfigured.
.RE
.sp
\-L, \-\-autolabel, \-\-no\-autolabel
.RS 4
Legacy NVDIMM devices do not support namespace labels. In that
case the kernel creates region\-sized namespaces that can not
be deleted.  Their mode can be changed, but they can not be
resized smaller than their parent region. This is termed a
"label\-less namespace". In contrast, NVDIMMs and hypervisors
that support the ACPI 6.2 label area definition (ACPI 6.2
Section 6.5.10 NVDIMM Label Methods) support "labelled
namespace" operation.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
There are two cases where the kernel will default to
label\-less operation:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
NVDIMM does not support labels
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
The NVDIMM supports labels, but the Label Index Block (see
UEFI 2.7) is not present and there is no capacity aliasing
between \fIblk\fP and \fIpmem\fP regions.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
In the latter case the configuration can be upgraded to
labelled operation by writing an index block on all DIMMs in a
region and re\-enabling that region. The \fIautolabel\fP capability
of \fIndctl create\-namespace \-\-reconfig\fP tries to do this by
default if it can determine that all DIMM capacity is
referenced by the namespace being reconfigured. It will
otherwise fail to autolabel and remain in label\-less mode if
it finds a DIMM contributes capacity to more than one region.
This check prevents inadvertent data loss of that other region
is in active use. The \-\-autolabel option is implied by
default, the \-\-no\-autolabel option can be used to disable this
behavior. When automatic labeling fails and labelled operation
is still desired the safety policy can be bypassed by the
following commands, note that all data on all regions is
forfeited by running these commands:
.sp
.if n .RS 4
.nf
ndctl disable\-region all
ndctl init\-labels all
ndctl enable\-region all
.fi
.if n .RE
.RE
.RE
.sp
\-v, \-\-verbose
.RS 4
Emit debug messages for the namespace creation process
.RE
.sp
\-r, \-\-region=
.RS 4
.sp
.if n .RS 4
.nf
A \(aqregionX\(aq device name, or a region id number. The keyword \(aqall\(aq can
be specified to carry out the operation on every region in the system,
optionally filtered by bus id (see \-\-bus= option).
.fi
.if n .RE
.RE
.sp
\-b, \-\-bus=
.RS 4
Enforce that the operation only be carried on devices that are
attached to the given bus. Where \fIbus\fP can be a provider name or a bus
id number.
.RE
.SH "COPYRIGHT"
.sp
Copyright (c) 2016 \- 2019, Intel Corporation. License GPLv2: GNU GPL
version 2 \c
.URL "http://gnu.org/licenses/gpl.html" "" "."
This is free software:
you are free to change and redistribute it.  There is NO WARRANTY, to
the extent permitted by law.
.SH "SEE ALSO"
.sp
ndctl\-zero\-labels(1),
ndctl\-init\-labels(1),
ndctl\-disable\-namespace(1),
ndctl\-enable\-namespace(1),
\c
.URL "http://www.uefi.org/sites/default/files/resources/UEFI_Spec_2_7.pdf" "UEFI NVDIMM Label Protocol"
.URL "https://nvdimm.wiki.kernel.org" "Linux Persistent Memory Wiki" ""