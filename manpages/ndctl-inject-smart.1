'\" t
.\"     Title: ndctl-inject-smart
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.8
.\"      Date: 2019-03-18
.\"    Manual: ndctl Manual
.\"    Source: ndctl
.\"  Language: English
.\"
.TH "NDCTL\-INJECT\-SMART" "1" "2019-03-18" "ndctl" "ndctl Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
ndctl\-inject\-smart \- perform smart threshold/injection operations on a DIMM
.SH "SYNOPSIS"
.sp
.nf
\fIndctl inject\-smart\fP <dimm> [<options>]
.fi
.br
.SH "DESCRIPTION"
.sp
A generic DIMM device object, named /dev/nmemX, is registered for each
memory device indicated in the ACPI NFIT table, or other platform NVDIMM
resource discovery mechanism.
.sp
ndctl\-inject\-smart can be used to set smart thresholds, and inject smart
attributes.
.SH "EXAMPLES"
.sp
Set smart controller temperature and spares threshold for DIMM\-0 to 32C, spares
threshold to 8, and enable the spares alarm.
.sp
.nf
ndctl inject\-smart \-\-ctrl\-temperature\-threshold=32 \-\-spares\-threshold=8 \-\-spares\-alarm nmem0
.fi
.br
.sp
Inject a media temperature value of 52 and fatal health status flag for DIMM\-0
.sp
.nf
ndctl inject\-smart \-\-media\-temperature=52 \-\-health=fatal nmem0
.fi
.br
.SH "OPTIONS"
.sp
\-b, \-\-bus=
.RS 4
Enforce that the operation only be carried on devices that are
attached to the given bus. Where \fIbus\fP can be a provider name or a bus
id number.
.RE
.sp
\-m, \-\-media\-temperature=
.RS 4
Inject <value> for the media temperature smart attribute.
.RE
.sp
\-M, \-\-media\-temperature\-threshold=
.RS 4
Set <value> for the smart media temperature threshold.
.RE
.sp
\-\-media\-temperature\-alarm=
.RS 4
Enable or disable the smart media temperature alarm. Options are
\fIon\fP or \fIoff\fP.
.RE
.sp
\-\-media\-temperature\-uninject
.RS 4
Uninject any media temperature previously injected.
.RE
.sp
\-c, \-\-ctrl\-temperature=
.RS 4
Inject <value> for the controller temperature smart attribute.
.RE
.sp
\-C, \-\-ctrl\-temperature\-threshold=
.RS 4
Set <value> for the smart controller temperature threshold.
.RE
.sp
\-\-ctrl\-temperature\-alarm=
.RS 4
Enable or disable the smart controller temperature alarm. Options are
\fIon\fP or \fIoff\fP.
.RE
.sp
\-\-ctrl\-temperature\-uninject
.RS 4
Uninject any controller temperature previously injected.
.RE
.sp
\-s, \-\-spares=
.RS 4
Inject <value> for the spares smart attribute.
.RE
.sp
\-S, \-\-spares\-threshold=
.RS 4
Set <value> for the smart spares threshold.
.RE
.sp
\-\-spares\-alarm=
.RS 4
Enable or disable the smart spares alarm. Options are \fIon\fP or \fIoff\fP.
.RE
.sp
\-\-spares\-uninject
.RS 4
Uninject any spare percentage previously injected.
.RE
.sp
\-f, \-\-fatal
.RS 4
Set the flag to spoof fatal health status.
.RE
.sp
\-\-fatal\-uninject
.RS 4
Uninject the fatal health status flag.
.RE
.sp
\-U, \-\-unsafe\-shutdown
.RS 4
Set the flag to spoof an unsafe shutdown on the next power down.
.RE
.sp
\-\-unsafe\-shutdown\-uninject
.RS 4
Uninject the unsafe shutdown flag.
.RE
.sp
\-N, \-\-uninject\-all
.RS 4
Uninject all possible smart fields/values irrespective of whether
they have been previously injected or not.
.RE
.sp
\-v, \-\-verbose
.RS 4
Emit debug messages for the error injection process
.RE
.sp
\-u, \-\-human
.RS 4
Format numbers representing storage sizes, or offsets as human
readable strings with units instead of the default machine\-friendly
raw\-integer data. Convert other numeric fields into hexadecimal strings.
.RE
.SH "COPYRIGHT"
.sp
Copyright (c) 2016 \- 2019, Intel Corporation. License GPLv2: GNU GPL
version 2 \c
.URL "http://gnu.org/licenses/gpl.html" "" "."
This is free software:
you are free to change and redistribute it.  There is NO WARRANTY, to
the extent permitted by law.
.SH "SEE ALSO"
.sp
ndctl\-list(1),